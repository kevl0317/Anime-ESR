2025-06-13 04:23:22,523 INFO: 
                ____                _       _____  ____
               / __ ) ____ _ _____ (_)_____/ ___/ / __ \
              / __  |/ __ `// ___// // ___/\__ \ / /_/ /
             / /_/ // /_/ /(__  )/ // /__ ___/ // _, _/
            /_____/ \__,_//____//_/ \___//____//_/ |_|
     ______                   __   __                 __      __
    / ____/____   ____   ____/ /  / /   __  __ _____ / /__   / /
   / / __ / __ \ / __ \ / __  /  / /   / / / // ___// //_/  / /
  / /_/ // /_/ // /_/ // /_/ /  / /___/ /_/ // /__ / /<    /_/
  \____/ \____/ \____/ \____/  /_____/\____/ \___//_/|_|  (_)
    
Version Information: 
	BasicSR: 1.4.2
	PyTorch: 2.7.1+cpu
	TorchVision: 0.22.1+cu128
2025-06-13 04:23:22,524 INFO: 
  name: train_anime_RealESRNetx4plus_1000k_B12G4
  model_type: RealESRNetModel
  scale: 4
  num_gpu: 1
  manual_seed: 0
  gt_usm: True
  resize_prob: [0.2, 0.7, 0.1]
  resize_range: [0.15, 1.5]
  gaussian_noise_prob: 0.5
  noise_range: [1, 30]
  poisson_scale_range: [0.05, 3]
  gray_noise_prob: 0.4
  jpeg_range: [30, 95]
  second_blur_prob: 0.8
  resize_prob2: [0.3, 0.4, 0.3]
  resize_range2: [0.3, 1.2]
  gaussian_noise_prob2: 0.5
  noise_range2: [1, 25]
  poisson_scale_range2: [0.05, 2.5]
  gray_noise_prob2: 0.4
  jpeg_range2: [30, 95]
  gt_size: 256
  queue_size: 120
  datasets:[
    train:[
      name: Anime
      type: RealESRGANDataset
      dataroot_gt: datasets/anime
      meta_info: datasets/anime/meta_info_train.txt
      io_backend:[
        type: disk
      ]
      blur_kernel_size: 21
      kernel_list: ['iso', 'aniso', 'generalized_iso', 'generalized_aniso', 'plateau_iso', 'plateau_aniso']
      kernel_prob: [0.45, 0.25, 0.12, 0.03, 0.12, 0.03]
      sinc_prob: 0.1
      blur_sigma: [0.2, 3]
      betag_range: [0.5, 4]
      betap_range: [1, 2]
      blur_kernel_size2: 21
      kernel_list2: ['iso', 'aniso', 'generalized_iso', 'generalized_aniso', 'plateau_iso', 'plateau_aniso']
      kernel_prob2: [0.45, 0.25, 0.12, 0.03, 0.12, 0.03]
      sinc_prob2: 0.1
      blur_sigma2: [0.2, 1.5]
      betag_range2: [0.5, 4]
      betap_range2: [1, 2]
      final_sinc_prob: 0.8
      gt_size: 256
      use_hflip: True
      use_rot: False
      use_shuffle: True
      num_worker_per_gpu: 8
      batch_size_per_gpu: 12
      dataset_enlarge_ratio: 1
      prefetch_mode: None
      phase: train
      scale: 4
    ]
    val:[
      name: validation
      type: PairedImageDataset
      dataroot_gt: datasets/anime/galData_val
      dataroot_lq: datasets/anime/galData_val_lr_x4_bicubic
      io_backend:[
        type: disk
      ]
      phase: val
      scale: 4
    ]
  ]
  network_g:[
    type: RRDBNet
    num_in_ch: 3
    num_out_ch: 3
    num_feat: 64
    num_block: 23
    num_grow_ch: 32
  ]
  path:[
    pretrain_network_g: E:\AI\Anime-ESR\experiments\train_anime_RealESRNetx4plus_1000k_B12G4\models\net_g_935000.pth
    param_key_g: params
    strict_load_g: True
    resume_state: experiments\train_anime_RealESRNetx4plus_1000k_B12G4\training_states\935000.state
    experiments_root: E:\AI\Anime-ESR\experiments\train_anime_RealESRNetx4plus_1000k_B12G4
    models: E:\AI\Anime-ESR\experiments\train_anime_RealESRNetx4plus_1000k_B12G4\models
    training_states: E:\AI\Anime-ESR\experiments\train_anime_RealESRNetx4plus_1000k_B12G4\training_states
    log: E:\AI\Anime-ESR\experiments\train_anime_RealESRNetx4plus_1000k_B12G4
    visualization: E:\AI\Anime-ESR\experiments\train_anime_RealESRNetx4plus_1000k_B12G4\visualization
  ]
  train:[
    ema_decay: 0.999
    optim_g:[
      type: Adam
      lr: 0.0002
      weight_decay: 0
      betas: [0.9, 0.99]
    ]
    scheduler:[
      type: MultiStepLR
      milestones: [1000000]
      gamma: 0.5
    ]
    total_iter: 1000000
    warmup_iter: -1
    pixel_opt:[
      type: L1Loss
      loss_weight: 1.0
      reduction: mean
    ]
  ]
  val:[
    val_freq: 5000.0
    save_img: True
    metrics:[
      psnr:[
        type: calculate_psnr
        crop_border: 4
        test_y_channel: False
      ]
    ]
  ]
  logger:[
    print_freq: 100
    save_checkpoint_freq: 5000.0
    use_tb_logger: True
    wandb:[
      project: None
      resume_id: None
    ]
  ]
  dist_params:[
    backend: nccl
    port: 29500
  ]
  dist: False
  rank: 0
  world_size: 1
  auto_resume: True
  is_train: True
  root_path: E:\AI\Anime-ESR

2025-06-13 04:23:23,432 INFO: Dataset [RealESRGANDataset] - Anime is built.
2025-06-13 04:23:23,433 INFO: Training statistics:
	Number of train images: 299263
	Dataset enlarge ratio: 1
	Batch size per gpu: 12
	World size (gpu number): 1
	Require iter number per epoch: 24939
	Total epochs: 41; iters: 1000000.
2025-06-13 04:23:23,496 INFO: Dataset [PairedImageDataset] - validation is built.
2025-06-13 04:23:23,496 INFO: Number of val images/folders in validation: 488
2025-06-13 04:23:23,664 INFO: Network [RRDBNet] is created.
2025-06-13 04:23:23,706 INFO: Network: RRDBNet, with parameters: 16,697,987
2025-06-13 04:23:23,707 INFO: RRDBNet(
  (conv_first): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (body): Sequential(
    (0): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (5): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (6): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (7): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (8): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (9): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (10): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (11): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (12): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (13): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (14): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (15): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (16): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (17): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (18): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (19): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (20): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (21): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (22): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
  (conv_body): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv_up1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv_up2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv_hr): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv_last): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
)
2025-06-13 04:23:23,833 INFO: Loading RRDBNet model from E:\AI\Anime-ESR\experiments\train_anime_RealESRNetx4plus_1000k_B12G4\models\net_g_935000.pth, with param key: [params].
2025-06-13 04:23:23,911 INFO: Use Exponential Moving Average with decay: 0.999
2025-06-13 04:23:24,055 INFO: Network [RRDBNet] is created.
2025-06-13 04:23:24,246 INFO: Loading RRDBNet model from E:\AI\Anime-ESR\experiments\train_anime_RealESRNetx4plus_1000k_B12G4\models\net_g_935000.pth, with param key: [params_ema].
2025-06-13 04:23:24,324 INFO: Loss [L1Loss] is created.
2025-06-13 04:23:24,345 INFO: Model [RealESRNetModel] is created.
2025-06-13 04:23:24,354 INFO: Resuming training from epoch: 36, iter: 935000.
2025-06-13 04:23:50,091 INFO: Start training from epoch: 36, iter: 935000
2025-06-13 04:25:36,512 INFO: [train..][epoch: 36, iter: 935,100, lr:(2.000e-04,)] [eta: 23:35:20, time (data): 1.064 (0.280)] l_pix: 6.1362e-02 
2025-06-13 04:26:48,089 INFO: [train..][epoch: 36, iter: 935,200, lr:(2.000e-04,)] [eta: 18:14:40, time (data): 0.890 (0.142)] l_pix: 6.1708e-02 
2025-06-13 04:27:59,776 INFO: [train..][epoch: 36, iter: 935,300, lr:(2.000e-04,)] [eta: 16:26:40, time (data): 0.717 (0.004)] l_pix: 4.6658e-02 
2025-06-13 04:29:11,523 INFO: [train..][epoch: 36, iter: 935,400, lr:(2.000e-04,)] [eta: 15:32:07, time (data): 0.717 (0.004)] l_pix: 4.1998e-02 
2025-06-13 04:30:18,223 INFO: [train..][epoch: 36, iter: 935,500, lr:(2.000e-04,)] [eta: 14:48:01, time (data): 0.667 (0.004)] l_pix: 4.5043e-02 
2025-06-13 04:31:30,135 INFO: [train..][epoch: 36, iter: 935,600, lr:(2.000e-04,)] [eta: 14:27:32, time (data): 0.693 (0.004)] l_pix: 4.9440e-02 
2025-06-13 04:32:41,722 INFO: [train..][epoch: 36, iter: 935,700, lr:(2.000e-04,)] [eta: 14:12:04, time (data): 0.716 (0.004)] l_pix: 4.6320e-02 
2025-06-13 04:33:53,402 INFO: [train..][epoch: 36, iter: 935,800, lr:(2.000e-04,)] [eta: 14:00:17, time (data): 0.716 (0.004)] l_pix: 3.9941e-02 
2025-06-13 04:35:05,087 INFO: [train..][epoch: 36, iter: 935,900, lr:(2.000e-04,)] [eta: 13:50:51, time (data): 0.717 (0.004)] l_pix: 4.2155e-02 
2025-06-13 04:36:16,711 INFO: [train..][epoch: 36, iter: 936,000, lr:(2.000e-04,)] [eta: 13:43:00, time (data): 0.717 (0.004)] l_pix: 3.3752e-02 
2025-06-13 04:37:28,631 INFO: [train..][epoch: 36, iter: 936,100, lr:(2.000e-04,)] [eta: 13:36:39, time (data): 0.719 (0.004)] l_pix: 4.0352e-02 
2025-06-13 04:38:40,181 INFO: [train..][epoch: 36, iter: 936,200, lr:(2.000e-04,)] [eta: 13:30:50, time (data): 0.717 (0.004)] l_pix: 4.0001e-02 
2025-06-13 04:39:51,690 INFO: [train..][epoch: 36, iter: 936,300, lr:(2.000e-04,)] [eta: 13:25:41, time (data): 0.715 (0.004)] l_pix: 4.8888e-02 
2025-06-13 04:41:03,339 INFO: [train..][epoch: 36, iter: 936,400, lr:(2.000e-04,)] [eta: 13:21:13, time (data): 0.716 (0.004)] l_pix: 2.6425e-02 
2025-06-13 04:42:14,678 INFO: [train..][epoch: 36, iter: 936,500, lr:(2.000e-04,)] [eta: 13:16:57, time (data): 0.713 (0.004)] l_pix: 4.3551e-02 
2025-06-13 04:43:26,529 INFO: [train..][epoch: 36, iter: 936,600, lr:(2.000e-04,)] [eta: 13:13:25, time (data): 0.716 (0.004)] l_pix: 3.7808e-02 
2025-06-13 04:44:33,350 INFO: [train..][epoch: 36, iter: 936,700, lr:(2.000e-04,)] [eta: 13:07:02, time (data): 0.668 (0.004)] l_pix: 5.0807e-02 
2025-06-13 04:45:45,315 INFO: [train..][epoch: 36, iter: 936,800, lr:(2.000e-04,)] [eta: 13:04:15, time (data): 0.695 (0.004)] l_pix: 4.4431e-02 
2025-06-13 04:46:57,090 INFO: [train..][epoch: 36, iter: 936,900, lr:(2.000e-04,)] [eta: 13:01:32, time (data): 0.718 (0.004)] l_pix: 4.1286e-02 
2025-06-13 04:48:08,717 INFO: [train..][epoch: 36, iter: 937,000, lr:(2.000e-04,)] [eta: 12:58:53, time (data): 0.717 (0.004)] l_pix: 5.5504e-02 
2025-06-13 04:49:20,311 INFO: [train..][epoch: 36, iter: 937,100, lr:(2.000e-04,)] [eta: 12:56:21, time (data): 0.716 (0.004)] l_pix: 4.4788e-02 
2025-06-13 04:50:32,103 INFO: [train..][epoch: 36, iter: 937,200, lr:(2.000e-04,)] [eta: 12:54:02, time (data): 0.717 (0.004)] l_pix: 5.4794e-02 
2025-06-13 04:51:43,936 INFO: [train..][epoch: 36, iter: 937,300, lr:(2.000e-04,)] [eta: 12:51:51, time (data): 0.718 (0.004)] l_pix: 5.6495e-02 
2025-06-13 04:52:55,569 INFO: [train..][epoch: 36, iter: 937,400, lr:(2.000e-04,)] [eta: 12:49:39, time (data): 0.717 (0.004)] l_pix: 4.8301e-02 
2025-06-13 04:54:07,147 INFO: [train..][epoch: 36, iter: 937,500, lr:(2.000e-04,)] [eta: 12:47:30, time (data): 0.715 (0.004)] l_pix: 4.5481e-02 
2025-06-13 04:55:19,077 INFO: [train..][epoch: 36, iter: 937,600, lr:(2.000e-04,)] [eta: 12:45:34, time (data): 0.717 (0.004)] l_pix: 4.2223e-02 
2025-06-13 04:56:30,608 INFO: [train..][epoch: 36, iter: 937,700, lr:(2.000e-04,)] [eta: 12:43:33, time (data): 0.716 (0.004)] l_pix: 6.2983e-02 
2025-06-13 04:57:42,422 INFO: [train..][epoch: 36, iter: 937,800, lr:(2.000e-04,)] [eta: 12:41:41, time (data): 0.717 (0.004)] l_pix: 5.9814e-02 
2025-06-13 04:58:54,220 INFO: [train..][epoch: 36, iter: 937,900, lr:(2.000e-04,)] [eta: 12:39:52, time (data): 0.719 (0.004)] l_pix: 4.2097e-02 
2025-06-13 05:00:06,223 INFO: [train..][epoch: 36, iter: 938,000, lr:(2.000e-04,)] [eta: 12:38:09, time (data): 0.719 (0.004)] l_pix: 4.6625e-02 
2025-06-13 05:01:18,125 INFO: [train..][epoch: 36, iter: 938,100, lr:(2.000e-04,)] [eta: 12:36:26, time (data): 0.719 (0.004)] l_pix: 4.7129e-02 
2025-06-13 05:02:29,774 INFO: [train..][epoch: 36, iter: 938,200, lr:(2.000e-04,)] [eta: 12:34:41, time (data): 0.718 (0.004)] l_pix: 3.9188e-02 
2025-06-13 05:03:41,636 INFO: [train..][epoch: 36, iter: 938,300, lr:(2.000e-04,)] [eta: 12:33:01, time (data): 0.718 (0.004)] l_pix: 4.3091e-02 
2025-06-13 05:04:53,144 INFO: [train..][epoch: 36, iter: 938,400, lr:(2.000e-04,)] [eta: 12:31:17, time (data): 0.717 (0.004)] l_pix: 5.0016e-02 
2025-06-13 05:06:04,721 INFO: [train..][epoch: 36, iter: 938,500, lr:(2.000e-04,)] [eta: 12:29:35, time (data): 0.716 (0.004)] l_pix: 3.4521e-02 
2025-06-13 05:07:16,532 INFO: [train..][epoch: 36, iter: 938,600, lr:(2.000e-04,)] [eta: 12:28:00, time (data): 0.717 (0.004)] l_pix: 4.8636e-02 
2025-06-13 05:08:28,330 INFO: [train..][epoch: 36, iter: 938,700, lr:(2.000e-04,)] [eta: 12:26:25, time (data): 0.717 (0.004)] l_pix: 4.3529e-02 
2025-06-13 05:09:40,588 INFO: [train..][epoch: 36, iter: 938,800, lr:(2.000e-04,)] [eta: 12:24:59, time (data): 0.720 (0.004)] l_pix: 4.2030e-02 
2025-06-13 05:10:52,208 INFO: [train..][epoch: 36, iter: 938,900, lr:(2.000e-04,)] [eta: 12:23:24, time (data): 0.717 (0.004)] l_pix: 4.3075e-02 
2025-06-13 05:12:03,685 INFO: [train..][epoch: 36, iter: 939,000, lr:(2.000e-04,)] [eta: 12:21:47, time (data): 0.716 (0.004)] l_pix: 3.8100e-02 
2025-06-13 05:13:15,736 INFO: [train..][epoch: 36, iter: 939,100, lr:(2.000e-04,)] [eta: 12:20:21, time (data): 0.720 (0.004)] l_pix: 4.4581e-02 
2025-06-13 05:14:27,357 INFO: [train..][epoch: 36, iter: 939,200, lr:(2.000e-04,)] [eta: 12:18:49, time (data): 0.718 (0.004)] l_pix: 3.8676e-02 
2025-06-13 05:15:39,254 INFO: [train..][epoch: 36, iter: 939,300, lr:(2.000e-04,)] [eta: 12:17:22, time (data): 0.718 (0.004)] l_pix: 4.4745e-02 
2025-06-13 05:16:51,035 INFO: [train..][epoch: 36, iter: 939,400, lr:(2.000e-04,)] [eta: 12:15:53, time (data): 0.718 (0.004)] l_pix: 4.6283e-02 
2025-06-13 05:18:02,668 INFO: [train..][epoch: 36, iter: 939,500, lr:(2.000e-04,)] [eta: 12:14:24, time (data): 0.715 (0.004)] l_pix: 3.9896e-02 
2025-06-13 05:19:14,581 INFO: [train..][epoch: 36, iter: 939,600, lr:(2.000e-04,)] [eta: 12:12:59, time (data): 0.717 (0.004)] l_pix: 5.0873e-02 
2025-06-13 05:20:26,361 INFO: [train..][epoch: 36, iter: 939,700, lr:(2.000e-04,)] [eta: 12:11:33, time (data): 0.718 (0.004)] l_pix: 4.1018e-02 
2025-06-13 05:21:38,507 INFO: [train..][epoch: 36, iter: 939,800, lr:(2.000e-04,)] [eta: 12:10:12, time (data): 0.720 (0.004)] l_pix: 3.4561e-02 
2025-06-13 05:22:50,155 INFO: [train..][epoch: 36, iter: 939,900, lr:(2.000e-04,)] [eta: 12:08:45, time (data): 0.717 (0.004)] l_pix: 4.9523e-02 
2025-06-13 05:24:01,865 INFO: [train..][epoch: 36, iter: 940,000, lr:(2.000e-04,)] [eta: 12:07:20, time (data): 0.717 (0.004)] l_pix: 5.2264e-02 
2025-06-13 05:24:01,865 INFO: Saving models and training states.
2025-06-13 05:33:39,904 INFO: Validation validation
	 # psnr: 27.2742	Best: 27.2742 @ 940000 iter

2025-06-13 05:34:51,947 INFO: [train..][epoch: 36, iter: 940,100, lr:(2.000e-04,)] [eta: 13:59:07, time (data): 0.718 (0.004)] l_pix: 4.5189e-02 
2025-06-13 05:36:03,409 INFO: [train..][epoch: 36, iter: 940,200, lr:(2.000e-04,)] [eta: 13:55:18, time (data): 0.716 (0.004)] l_pix: 4.9086e-02 
2025-06-13 05:37:15,365 INFO: [train..][epoch: 36, iter: 940,300, lr:(2.000e-04,)] [eta: 13:51:41, time (data): 0.720 (0.004)] l_pix: 5.2594e-02 
2025-06-13 05:38:27,078 INFO: [train..][epoch: 36, iter: 940,400, lr:(2.000e-04,)] [eta: 13:48:06, time (data): 0.718 (0.004)] l_pix: 4.7097e-02 
2025-06-13 05:39:38,846 INFO: [train..][epoch: 36, iter: 940,500, lr:(2.000e-04,)] [eta: 13:44:37, time (data): 0.718 (0.004)] l_pix: 4.3262e-02 
2025-06-13 05:40:50,423 INFO: [train..][epoch: 36, iter: 940,600, lr:(2.000e-04,)] [eta: 13:41:11, time (data): 0.717 (0.004)] l_pix: 5.6464e-02 
2025-06-13 05:42:01,943 INFO: [train..][epoch: 36, iter: 940,700, lr:(2.000e-04,)] [eta: 13:37:50, time (data): 0.715 (0.004)] l_pix: 5.4404e-02 
2025-06-13 05:43:14,274 INFO: [train..][epoch: 36, iter: 940,800, lr:(2.000e-04,)] [eta: 13:34:40, time (data): 0.720 (0.004)] l_pix: 6.2800e-02 
2025-06-13 05:44:25,812 INFO: [train..][epoch: 36, iter: 940,900, lr:(2.000e-04,)] [eta: 13:31:27, time (data): 0.715 (0.004)] l_pix: 5.2608e-02 
2025-06-13 05:45:37,636 INFO: [train..][epoch: 36, iter: 941,000, lr:(2.000e-04,)] [eta: 13:28:21, time (data): 0.717 (0.004)] l_pix: 4.4143e-02 
2025-06-13 05:46:49,217 INFO: [train..][epoch: 36, iter: 941,100, lr:(2.000e-04,)] [eta: 13:25:16, time (data): 0.717 (0.004)] l_pix: 5.5226e-02 
2025-06-13 05:48:00,934 INFO: [train..][epoch: 36, iter: 941,200, lr:(2.000e-04,)] [eta: 13:22:17, time (data): 0.717 (0.004)] l_pix: 5.7781e-02 
2025-06-13 05:49:12,683 INFO: [train..][epoch: 36, iter: 941,300, lr:(2.000e-04,)] [eta: 13:19:20, time (data): 0.718 (0.004)] l_pix: 4.1222e-02 
2025-06-13 05:50:24,283 INFO: [train..][epoch: 36, iter: 941,400, lr:(2.000e-04,)] [eta: 13:16:26, time (data): 0.717 (0.004)] l_pix: 3.3211e-02 
2025-06-13 05:51:36,175 INFO: [train..][epoch: 36, iter: 941,500, lr:(2.000e-04,)] [eta: 13:13:38, time (data): 0.719 (0.004)] l_pix: 4.4440e-02 
2025-06-13 05:52:47,906 INFO: [train..][epoch: 36, iter: 941,600, lr:(2.000e-04,)] [eta: 13:10:51, time (data): 0.718 (0.004)] l_pix: 4.3993e-02 
2025-06-13 05:53:59,775 INFO: [train..][epoch: 36, iter: 941,700, lr:(2.000e-04,)] [eta: 13:08:08, time (data): 0.717 (0.004)] l_pix: 3.7297e-02 
2025-06-13 05:55:11,715 INFO: [train..][epoch: 36, iter: 941,800, lr:(2.000e-04,)] [eta: 13:05:28, time (data): 0.718 (0.004)] l_pix: 4.5597e-02 
2025-06-13 05:56:23,401 INFO: [train..][epoch: 36, iter: 941,900, lr:(2.000e-04,)] [eta: 13:02:49, time (data): 0.717 (0.004)] l_pix: 3.9795e-02 
2025-06-13 05:57:35,191 INFO: [train..][epoch: 36, iter: 942,000, lr:(2.000e-04,)] [eta: 13:00:13, time (data): 0.718 (0.004)] l_pix: 3.9092e-02 
2025-06-13 05:58:46,784 INFO: [train..][epoch: 36, iter: 942,100, lr:(2.000e-04,)] [eta: 12:57:38, time (data): 0.716 (0.004)] l_pix: 4.8087e-02 
2025-06-13 05:59:58,462 INFO: [train..][epoch: 36, iter: 942,200, lr:(2.000e-04,)] [eta: 12:55:06, time (data): 0.717 (0.004)] l_pix: 4.0743e-02 
2025-06-13 06:01:10,136 INFO: [train..][epoch: 36, iter: 942,300, lr:(2.000e-04,)] [eta: 12:52:36, time (data): 0.718 (0.004)] l_pix: 4.1018e-02 
2025-06-13 06:02:21,686 INFO: [train..][epoch: 36, iter: 942,400, lr:(2.000e-04,)] [eta: 12:50:07, time (data): 0.717 (0.004)] l_pix: 4.3817e-02 
2025-06-13 06:03:33,551 INFO: [train..][epoch: 36, iter: 942,500, lr:(2.000e-04,)] [eta: 12:47:43, time (data): 0.719 (0.004)] l_pix: 4.4684e-02 
2025-06-13 06:04:40,206 INFO: [train..][epoch: 36, iter: 942,600, lr:(2.000e-04,)] [eta: 12:44:41, time (data): 0.687 (0.004)] l_pix: 4.5192e-02 
2025-06-13 06:05:51,898 INFO: [train..][epoch: 36, iter: 942,700, lr:(2.000e-04,)] [eta: 12:42:20, time (data): 0.717 (0.004)] l_pix: 4.6083e-02 
2025-06-13 06:07:03,557 INFO: [train..][epoch: 36, iter: 942,800, lr:(2.000e-04,)] [eta: 12:40:00, time (data): 0.717 (0.004)] l_pix: 4.7501e-02 
2025-06-13 06:08:15,052 INFO: [train..][epoch: 36, iter: 942,900, lr:(2.000e-04,)] [eta: 12:37:41, time (data): 0.713 (0.004)] l_pix: 4.9581e-02 
2025-06-13 06:09:26,992 INFO: [train..][epoch: 36, iter: 943,000, lr:(2.000e-04,)] [eta: 12:35:27, time (data): 0.717 (0.004)] l_pix: 5.2427e-02 
2025-06-13 06:10:38,640 INFO: [train..][epoch: 36, iter: 943,100, lr:(2.000e-04,)] [eta: 12:33:12, time (data): 0.717 (0.004)] l_pix: 3.6573e-02 
2025-06-13 06:11:50,374 INFO: [train..][epoch: 36, iter: 943,200, lr:(2.000e-04,)] [eta: 12:30:59, time (data): 0.717 (0.004)] l_pix: 4.3167e-02 
2025-06-13 06:13:02,364 INFO: [train..][epoch: 36, iter: 943,300, lr:(2.000e-04,)] [eta: 12:28:50, time (data): 0.719 (0.004)] l_pix: 4.3307e-02 
2025-06-13 06:14:13,876 INFO: [train..][epoch: 36, iter: 943,400, lr:(2.000e-04,)] [eta: 12:26:38, time (data): 0.716 (0.004)] l_pix: 5.5584e-02 
2025-06-13 06:15:25,804 INFO: [train..][epoch: 36, iter: 943,500, lr:(2.000e-04,)] [eta: 12:24:31, time (data): 0.719 (0.004)] l_pix: 5.0782e-02 
2025-06-13 06:16:37,328 INFO: [train..][epoch: 36, iter: 943,600, lr:(2.000e-04,)] [eta: 12:22:23, time (data): 0.717 (0.004)] l_pix: 3.7500e-02 
2025-06-13 06:17:49,238 INFO: [train..][epoch: 36, iter: 943,700, lr:(2.000e-04,)] [eta: 12:20:18, time (data): 0.717 (0.004)] l_pix: 3.9490e-02 
2025-06-13 06:19:01,135 INFO: [train..][epoch: 36, iter: 943,800, lr:(2.000e-04,)] [eta: 12:18:14, time (data): 0.718 (0.004)] l_pix: 2.9453e-02 
2025-06-13 06:20:12,821 INFO: [train..][epoch: 36, iter: 943,900, lr:(2.000e-04,)] [eta: 12:16:11, time (data): 0.715 (0.004)] l_pix: 2.8807e-02 
2025-06-13 06:21:24,928 INFO: [train..][epoch: 36, iter: 944,000, lr:(2.000e-04,)] [eta: 12:14:11, time (data): 0.719 (0.004)] l_pix: 6.0272e-02 
2025-06-13 06:22:36,756 INFO: [train..][epoch: 36, iter: 944,100, lr:(2.000e-04,)] [eta: 12:12:10, time (data): 0.718 (0.004)] l_pix: 4.6879e-02 
2025-06-13 06:23:48,588 INFO: [train..][epoch: 36, iter: 944,200, lr:(2.000e-04,)] [eta: 12:10:11, time (data): 0.718 (0.004)] l_pix: 3.3570e-02 
2025-06-13 06:25:00,326 INFO: [train..][epoch: 36, iter: 944,300, lr:(2.000e-04,)] [eta: 12:08:11, time (data): 0.720 (0.004)] l_pix: 4.1548e-02 
2025-06-13 06:26:12,011 INFO: [train..][epoch: 36, iter: 944,400, lr:(2.000e-04,)] [eta: 12:06:13, time (data): 0.718 (0.004)] l_pix: 5.8862e-02 
2025-06-13 06:27:23,793 INFO: [train..][epoch: 36, iter: 944,500, lr:(2.000e-04,)] [eta: 12:04:16, time (data): 0.716 (0.004)] l_pix: 4.6606e-02 
2025-06-13 06:28:35,316 INFO: [train..][epoch: 36, iter: 944,600, lr:(2.000e-04,)] [eta: 12:02:19, time (data): 0.715 (0.004)] l_pix: 7.0380e-02 
2025-06-13 06:29:46,982 INFO: [train..][epoch: 36, iter: 944,700, lr:(2.000e-04,)] [eta: 12:00:23, time (data): 0.716 (0.004)] l_pix: 4.5900e-02 
2025-06-13 06:30:58,739 INFO: [train..][epoch: 36, iter: 944,800, lr:(2.000e-04,)] [eta: 11:58:29, time (data): 0.717 (0.004)] l_pix: 4.8271e-02 
2025-06-13 06:32:10,651 INFO: [train..][epoch: 36, iter: 944,900, lr:(2.000e-04,)] [eta: 11:56:36, time (data): 0.720 (0.004)] l_pix: 4.3345e-02 
2025-06-13 06:33:22,537 INFO: [train..][epoch: 36, iter: 945,000, lr:(2.000e-04,)] [eta: 11:54:44, time (data): 0.719 (0.004)] l_pix: 4.5031e-02 
2025-06-13 06:33:22,537 INFO: Saving models and training states.
2025-06-13 06:39:20,512 INFO: Validation validation
	 # psnr: 27.3159	Best: 27.3159 @ 945000 iter

2025-06-13 06:40:32,797 INFO: [train..][epoch: 36, iter: 945,100, lr:(2.000e-04,)] [eta: 12:25:21, time (data): 0.717 (0.004)] l_pix: 6.2175e-02 
2025-06-13 06:41:44,797 INFO: [train..][epoch: 36, iter: 945,200, lr:(2.000e-04,)] [eta: 12:23:09, time (data): 0.719 (0.004)] l_pix: 4.4756e-02 
2025-06-13 06:42:56,602 INFO: [train..][epoch: 36, iter: 945,300, lr:(2.000e-04,)] [eta: 12:20:57, time (data): 0.720 (0.004)] l_pix: 4.5545e-02 
2025-06-13 06:44:08,100 INFO: [train..][epoch: 36, iter: 945,400, lr:(2.000e-04,)] [eta: 12:18:44, time (data): 0.717 (0.004)] l_pix: 5.1115e-02 
2025-06-13 06:45:19,941 INFO: [train..][epoch: 36, iter: 945,500, lr:(2.000e-04,)] [eta: 12:16:34, time (data): 0.719 (0.004)] l_pix: 4.2918e-02 
2025-06-13 06:46:31,494 INFO: [train..][epoch: 36, iter: 945,600, lr:(2.000e-04,)] [eta: 12:14:24, time (data): 0.717 (0.004)] l_pix: 3.7134e-02 
2025-06-13 06:47:38,210 INFO: [train..][epoch: 36, iter: 945,700, lr:(2.000e-04,)] [eta: 12:11:51, time (data): 0.668 (0.004)] l_pix: 5.0582e-02 
2025-06-13 06:48:50,129 INFO: [train..][epoch: 36, iter: 945,800, lr:(2.000e-04,)] [eta: 12:09:45, time (data): 0.703 (0.004)] l_pix: 5.6778e-02 
2025-06-13 06:49:14,533 INFO: [train..][epoch: 36, iter: 945,900, lr:(2.000e-04,)] [eta: 12:03:45, time (data): -0.310 (0.004)] l_pix: 3.4535e-02 
2025-06-13 06:50:26,385 INFO: [train..][epoch: 36, iter: 946,000, lr:(2.000e-04,)] [eta: 12:01:43, time (data): 0.394 (0.004)] l_pix: 5.6775e-02 
2025-06-13 06:51:33,232 INFO: [train..][epoch: 36, iter: 946,100, lr:(2.000e-04,)] [eta: 11:59:18, time (data): 0.669 (0.004)] l_pix: 5.1360e-02 
2025-06-13 06:52:45,254 INFO: [train..][epoch: 36, iter: 946,200, lr:(2.000e-04,)] [eta: 11:57:19, time (data): 0.704 (0.004)] l_pix: 3.5673e-02 
2025-06-13 06:53:56,889 INFO: [train..][epoch: 36, iter: 946,300, lr:(2.000e-04,)] [eta: 11:55:19, time (data): 0.720 (0.004)] l_pix: 4.9937e-02 
2025-06-13 06:55:09,061 INFO: [train..][epoch: 36, iter: 946,400, lr:(2.000e-04,)] [eta: 11:53:23, time (data): 0.721 (0.004)] l_pix: 4.6960e-02 
2025-06-13 06:56:20,828 INFO: [train..][epoch: 36, iter: 946,500, lr:(2.000e-04,)] [eta: 11:51:26, time (data): 0.717 (0.004)] l_pix: 5.0452e-02 
2025-06-13 06:57:32,390 INFO: [train..][epoch: 36, iter: 946,600, lr:(2.000e-04,)] [eta: 11:49:28, time (data): 0.716 (0.004)] l_pix: 4.3798e-02 
2025-06-13 06:58:44,383 INFO: [train..][epoch: 36, iter: 946,700, lr:(2.000e-04,)] [eta: 11:47:33, time (data): 0.721 (0.005)] l_pix: 4.3205e-02 
2025-06-13 06:59:56,503 INFO: [train..][epoch: 36, iter: 946,800, lr:(2.000e-04,)] [eta: 11:45:39, time (data): 0.721 (0.004)] l_pix: 5.0720e-02 
2025-06-13 07:01:08,362 INFO: [train..][epoch: 36, iter: 946,900, lr:(2.000e-04,)] [eta: 11:43:45, time (data): 0.715 (0.004)] l_pix: 4.9494e-02 
2025-06-13 07:02:20,082 INFO: [train..][epoch: 36, iter: 947,000, lr:(2.000e-04,)] [eta: 11:41:51, time (data): 0.717 (0.004)] l_pix: 5.0183e-02 
2025-06-13 07:03:31,864 INFO: [train..][epoch: 36, iter: 947,100, lr:(2.000e-04,)] [eta: 11:39:58, time (data): 0.717 (0.004)] l_pix: 5.0039e-02 
2025-06-13 07:04:43,707 INFO: [train..][epoch: 36, iter: 947,200, lr:(2.000e-04,)] [eta: 11:38:06, time (data): 0.718 (0.004)] l_pix: 4.9039e-02 
2025-06-13 07:05:55,405 INFO: [train..][epoch: 36, iter: 947,300, lr:(2.000e-04,)] [eta: 11:36:14, time (data): 0.718 (0.004)] l_pix: 3.9508e-02 
2025-06-13 07:07:02,198 INFO: [train..][epoch: 36, iter: 947,400, lr:(2.000e-04,)] [eta: 11:34:02, time (data): 0.682 (0.004)] l_pix: 5.6186e-02 
2025-06-13 07:08:13,974 INFO: [train..][epoch: 36, iter: 947,500, lr:(2.000e-04,)] [eta: 11:32:12, time (data): 0.717 (0.004)] l_pix: 4.2662e-02 
2025-06-13 07:09:26,184 INFO: [train..][epoch: 36, iter: 947,600, lr:(2.000e-04,)] [eta: 11:30:24, time (data): 0.721 (0.004)] l_pix: 4.2481e-02 
2025-06-13 07:10:38,145 INFO: [train..][epoch: 36, iter: 947,700, lr:(2.000e-04,)] [eta: 11:28:36, time (data): 0.721 (0.004)] l_pix: 5.8665e-02 
2025-06-13 07:11:49,778 INFO: [train..][epoch: 36, iter: 947,800, lr:(2.000e-04,)] [eta: 11:26:47, time (data): 0.718 (0.004)] l_pix: 4.5016e-02 
2025-06-13 07:13:01,472 INFO: [train..][epoch: 36, iter: 947,900, lr:(2.000e-04,)] [eta: 11:24:58, time (data): 0.717 (0.004)] l_pix: 4.3733e-02 
2025-06-13 07:14:13,205 INFO: [train..][epoch: 36, iter: 948,000, lr:(2.000e-04,)] [eta: 11:23:11, time (data): 0.717 (0.004)] l_pix: 4.9864e-02 
2025-06-13 07:15:24,863 INFO: [train..][epoch: 36, iter: 948,100, lr:(2.000e-04,)] [eta: 11:21:24, time (data): 0.713 (0.004)] l_pix: 5.2047e-02 
2025-06-13 07:16:36,544 INFO: [train..][epoch: 36, iter: 948,200, lr:(2.000e-04,)] [eta: 11:19:37, time (data): 0.716 (0.004)] l_pix: 4.4839e-02 
2025-06-13 07:17:48,131 INFO: [train..][epoch: 36, iter: 948,300, lr:(2.000e-04,)] [eta: 11:17:51, time (data): 0.719 (0.004)] l_pix: 5.1469e-02 
2025-06-13 07:18:59,992 INFO: [train..][epoch: 36, iter: 948,400, lr:(2.000e-04,)] [eta: 11:16:06, time (data): 0.719 (0.004)] l_pix: 4.5095e-02 
2025-06-13 07:20:11,985 INFO: [train..][epoch: 36, iter: 948,500, lr:(2.000e-04,)] [eta: 11:14:22, time (data): 0.718 (0.004)] l_pix: 4.4071e-02 
2025-06-13 07:21:23,694 INFO: [train..][epoch: 36, iter: 948,600, lr:(2.000e-04,)] [eta: 11:12:37, time (data): 0.717 (0.004)] l_pix: 5.3628e-02 
2025-06-13 07:22:35,712 INFO: [train..][epoch: 36, iter: 948,700, lr:(2.000e-04,)] [eta: 11:10:55, time (data): 0.718 (0.004)] l_pix: 6.1242e-02 
2025-06-13 07:23:47,403 INFO: [train..][epoch: 36, iter: 948,800, lr:(2.000e-04,)] [eta: 11:09:11, time (data): 0.717 (0.004)] l_pix: 3.8930e-02 
2025-06-13 07:24:54,316 INFO: [train..][epoch: 36, iter: 948,900, lr:(2.000e-04,)] [eta: 11:07:10, time (data): 0.670 (0.004)] l_pix: 3.9949e-02 
2025-06-13 07:26:01,515 INFO: [train..][epoch: 36, iter: 949,000, lr:(2.000e-04,)] [eta: 11:05:11, time (data): 0.671 (0.004)] l_pix: 5.1999e-02 
2025-06-13 07:27:13,364 INFO: [train..][epoch: 36, iter: 949,100, lr:(2.000e-04,)] [eta: 11:03:30, time (data): 0.712 (0.004)] l_pix: 3.3611e-02 
2025-06-13 07:28:20,272 INFO: [train..][epoch: 36, iter: 949,200, lr:(2.000e-04,)] [eta: 11:01:31, time (data): 0.679 (0.004)] l_pix: 4.0521e-02 
2025-06-13 07:29:27,274 INFO: [train..][epoch: 36, iter: 949,300, lr:(2.000e-04,)] [eta: 10:59:34, time (data): 0.673 (0.004)] l_pix: 4.2031e-02 
2025-06-13 07:30:39,310 INFO: [train..][epoch: 36, iter: 949,400, lr:(2.000e-04,)] [eta: 10:57:54, time (data): 0.710 (0.004)] l_pix: 4.0942e-02 
2025-06-13 07:31:50,891 INFO: [train..][epoch: 36, iter: 949,500, lr:(2.000e-04,)] [eta: 10:56:14, time (data): 0.718 (0.004)] l_pix: 6.4231e-02 
2025-06-13 07:33:02,656 INFO: [train..][epoch: 36, iter: 949,600, lr:(2.000e-04,)] [eta: 10:54:35, time (data): 0.718 (0.004)] l_pix: 4.7141e-02 
2025-06-13 07:34:14,305 INFO: [train..][epoch: 36, iter: 949,700, lr:(2.000e-04,)] [eta: 10:52:55, time (data): 0.715 (0.004)] l_pix: 4.7319e-02 
2025-06-13 07:35:26,020 INFO: [train..][epoch: 36, iter: 949,800, lr:(2.000e-04,)] [eta: 10:51:16, time (data): 0.717 (0.004)] l_pix: 5.4409e-02 
2025-06-13 07:36:37,726 INFO: [train..][epoch: 36, iter: 949,900, lr:(2.000e-04,)] [eta: 10:49:38, time (data): 0.719 (0.004)] l_pix: 4.7151e-02 
2025-06-13 07:37:49,434 INFO: [train..][epoch: 36, iter: 950,000, lr:(2.000e-04,)] [eta: 10:48:00, time (data): 0.717 (0.004)] l_pix: 6.0952e-02 
2025-06-13 07:37:49,434 INFO: Saving models and training states.
2025-06-13 07:44:12,539 INFO: Validation validation
	 # psnr: 27.3426	Best: 27.3426 @ 950000 iter

2025-06-13 07:45:24,756 INFO: [train..][epoch: 36, iter: 950,100, lr:(2.000e-04,)] [eta: 11:07:30, time (data): 0.717 (0.004)] l_pix: 5.6552e-02 
2025-06-13 07:46:36,597 INFO: [train..][epoch: 36, iter: 950,200, lr:(2.000e-04,)] [eta: 11:05:42, time (data): 0.718 (0.004)] l_pix: 5.1398e-02 
2025-06-13 07:47:48,326 INFO: [train..][epoch: 36, iter: 950,300, lr:(2.000e-04,)] [eta: 11:03:54, time (data): 0.719 (0.004)] l_pix: 6.9469e-02 
2025-06-13 07:49:00,100 INFO: [train..][epoch: 36, iter: 950,400, lr:(2.000e-04,)] [eta: 11:02:07, time (data): 0.718 (0.004)] l_pix: 4.7851e-02 
2025-06-13 07:50:12,009 INFO: [train..][epoch: 36, iter: 950,500, lr:(2.000e-04,)] [eta: 11:00:21, time (data): 0.721 (0.004)] l_pix: 4.2141e-02 
2025-06-13 07:51:23,716 INFO: [train..][epoch: 36, iter: 950,600, lr:(2.000e-04,)] [eta: 10:58:34, time (data): 0.718 (0.004)] l_pix: 4.4623e-02 
2025-06-13 07:52:35,487 INFO: [train..][epoch: 36, iter: 950,700, lr:(2.000e-04,)] [eta: 10:56:48, time (data): 0.718 (0.004)] l_pix: 5.0029e-02 
2025-06-13 07:53:47,344 INFO: [train..][epoch: 36, iter: 950,800, lr:(2.000e-04,)] [eta: 10:55:03, time (data): 0.718 (0.004)] l_pix: 4.6662e-02 
2025-06-13 07:54:59,162 INFO: [train..][epoch: 36, iter: 950,900, lr:(2.000e-04,)] [eta: 10:53:18, time (data): 0.716 (0.004)] l_pix: 4.4350e-02 
2025-06-13 07:56:11,095 INFO: [train..][epoch: 36, iter: 951,000, lr:(2.000e-04,)] [eta: 10:51:34, time (data): 0.719 (0.004)] l_pix: 4.2872e-02 
2025-06-13 07:57:22,780 INFO: [train..][epoch: 36, iter: 951,100, lr:(2.000e-04,)] [eta: 10:49:50, time (data): 0.712 (0.004)] l_pix: 5.4220e-02 
2025-06-13 07:58:34,842 INFO: [train..][epoch: 36, iter: 951,200, lr:(2.000e-04,)] [eta: 10:48:07, time (data): 0.719 (0.004)] l_pix: 4.8980e-02 
2025-06-13 07:59:46,408 INFO: [train..][epoch: 36, iter: 951,300, lr:(2.000e-04,)] [eta: 10:46:23, time (data): 0.718 (0.004)] l_pix: 4.4918e-02 
2025-06-13 08:00:58,247 INFO: [train..][epoch: 36, iter: 951,400, lr:(2.000e-04,)] [eta: 10:44:40, time (data): 0.718 (0.004)] l_pix: 4.0423e-02 
2025-06-13 08:02:10,027 INFO: [train..][epoch: 36, iter: 951,500, lr:(2.000e-04,)] [eta: 10:42:58, time (data): 0.719 (0.004)] l_pix: 3.8609e-02 
2025-06-13 08:03:21,854 INFO: [train..][epoch: 36, iter: 951,600, lr:(2.000e-04,)] [eta: 10:41:16, time (data): 0.718 (0.004)] l_pix: 4.4901e-02 
2025-06-13 08:04:33,932 INFO: [train..][epoch: 36, iter: 951,700, lr:(2.000e-04,)] [eta: 10:39:35, time (data): 0.716 (0.004)] l_pix: 4.7457e-02 
2025-06-13 08:05:45,715 INFO: [train..][epoch: 36, iter: 951,800, lr:(2.000e-04,)] [eta: 10:37:53, time (data): 0.718 (0.004)] l_pix: 5.1125e-02 
2025-06-13 08:06:57,747 INFO: [train..][epoch: 36, iter: 951,900, lr:(2.000e-04,)] [eta: 10:36:13, time (data): 0.719 (0.004)] l_pix: 4.1786e-02 
2025-06-13 08:08:09,502 INFO: [train..][epoch: 36, iter: 952,000, lr:(2.000e-04,)] [eta: 10:34:32, time (data): 0.718 (0.004)] l_pix: 7.3468e-02 
2025-06-13 08:09:21,278 INFO: [train..][epoch: 36, iter: 952,100, lr:(2.000e-04,)] [eta: 10:32:52, time (data): 0.720 (0.004)] l_pix: 3.9412e-02 
2025-06-13 08:10:33,152 INFO: [train..][epoch: 36, iter: 952,200, lr:(2.000e-04,)] [eta: 10:31:12, time (data): 0.719 (0.004)] l_pix: 5.6694e-02 
2025-06-13 08:11:44,886 INFO: [train..][epoch: 36, iter: 952,300, lr:(2.000e-04,)] [eta: 10:29:32, time (data): 0.719 (0.004)] l_pix: 4.3757e-02 
2025-06-13 08:12:56,717 INFO: [train..][epoch: 36, iter: 952,400, lr:(2.000e-04,)] [eta: 10:27:53, time (data): 0.718 (0.004)] l_pix: 4.2403e-02 
2025-06-13 08:14:09,019 INFO: [train..][epoch: 36, iter: 952,500, lr:(2.000e-04,)] [eta: 10:26:15, time (data): 0.719 (0.004)] l_pix: 5.5671e-02 
2025-06-13 08:15:20,863 INFO: [train..][epoch: 36, iter: 952,600, lr:(2.000e-04,)] [eta: 10:24:36, time (data): 0.718 (0.004)] l_pix: 4.3674e-02 
2025-06-13 08:16:32,921 INFO: [train..][epoch: 36, iter: 952,700, lr:(2.000e-04,)] [eta: 10:22:58, time (data): 0.720 (0.004)] l_pix: 4.8147e-02 
2025-06-13 08:17:44,761 INFO: [train..][epoch: 36, iter: 952,800, lr:(2.000e-04,)] [eta: 10:21:20, time (data): 0.719 (0.004)] l_pix: 3.8335e-02 
2025-06-13 08:18:56,782 INFO: [train..][epoch: 36, iter: 952,900, lr:(2.000e-04,)] [eta: 10:19:43, time (data): 0.720 (0.004)] l_pix: 4.9457e-02 
2025-06-13 08:20:08,700 INFO: [train..][epoch: 36, iter: 953,000, lr:(2.000e-04,)] [eta: 10:18:06, time (data): 0.719 (0.004)] l_pix: 2.7070e-02 
2025-06-13 08:21:20,603 INFO: [train..][epoch: 36, iter: 953,100, lr:(2.000e-04,)] [eta: 10:16:29, time (data): 0.717 (0.004)] l_pix: 5.0824e-02 
2025-06-13 08:22:32,471 INFO: [train..][epoch: 36, iter: 953,200, lr:(2.000e-04,)] [eta: 10:14:52, time (data): 0.719 (0.004)] l_pix: 4.6188e-02 
2025-06-13 08:23:44,427 INFO: [train..][epoch: 36, iter: 953,300, lr:(2.000e-04,)] [eta: 10:13:15, time (data): 0.721 (0.004)] l_pix: 6.9345e-02 
2025-06-13 08:24:56,341 INFO: [train..][epoch: 36, iter: 953,400, lr:(2.000e-04,)] [eta: 10:11:39, time (data): 0.719 (0.004)] l_pix: 5.7402e-02 
2025-06-13 08:26:08,265 INFO: [train..][epoch: 36, iter: 953,500, lr:(2.000e-04,)] [eta: 10:10:03, time (data): 0.722 (0.005)] l_pix: 4.3567e-02 
2025-06-13 08:27:19,830 INFO: [train..][epoch: 36, iter: 953,600, lr:(2.000e-04,)] [eta: 10:08:27, time (data): 0.716 (0.004)] l_pix: 4.1269e-02 
2025-06-13 08:28:31,712 INFO: [train..][epoch: 36, iter: 953,700, lr:(2.000e-04,)] [eta: 10:06:51, time (data): 0.715 (0.004)] l_pix: 3.5751e-02 
2025-06-13 08:29:43,395 INFO: [train..][epoch: 36, iter: 953,800, lr:(2.000e-04,)] [eta: 10:05:15, time (data): 0.717 (0.004)] l_pix: 5.2353e-02 
2025-06-13 08:30:55,288 INFO: [train..][epoch: 36, iter: 953,900, lr:(2.000e-04,)] [eta: 10:03:41, time (data): 0.724 (0.004)] l_pix: 4.0472e-02 
2025-06-13 08:32:07,090 INFO: [train..][epoch: 36, iter: 954,000, lr:(2.000e-04,)] [eta: 10:02:06, time (data): 0.718 (0.004)] l_pix: 3.8877e-02 
2025-06-13 08:33:18,949 INFO: [train..][epoch: 36, iter: 954,100, lr:(2.000e-04,)] [eta: 10:00:31, time (data): 0.715 (0.005)] l_pix: 4.6681e-02 
2025-06-13 08:34:30,873 INFO: [train..][epoch: 36, iter: 954,200, lr:(2.000e-04,)] [eta: 9:58:57, time (data): 0.719 (0.005)] l_pix: 4.2489e-02 
2025-06-13 08:35:42,635 INFO: [train..][epoch: 36, iter: 954,300, lr:(2.000e-04,)] [eta: 9:57:22, time (data): 0.715 (0.005)] l_pix: 4.3788e-02 
2025-06-13 08:36:54,442 INFO: [train..][epoch: 36, iter: 954,400, lr:(2.000e-04,)] [eta: 9:55:48, time (data): 0.718 (0.004)] l_pix: 4.4843e-02 
2025-06-13 08:38:06,189 INFO: [train..][epoch: 36, iter: 954,500, lr:(2.000e-04,)] [eta: 9:54:15, time (data): 0.724 (0.004)] l_pix: 5.1932e-02 
2025-06-13 08:39:17,864 INFO: [train..][epoch: 36, iter: 954,600, lr:(2.000e-04,)] [eta: 9:52:41, time (data): 0.717 (0.004)] l_pix: 5.5311e-02 
2025-06-13 08:40:29,620 INFO: [train..][epoch: 36, iter: 954,700, lr:(2.000e-04,)] [eta: 9:51:07, time (data): 0.712 (0.003)] l_pix: 5.2684e-02 
2025-06-13 08:41:41,721 INFO: [train..][epoch: 36, iter: 954,800, lr:(2.000e-04,)] [eta: 9:49:35, time (data): 0.721 (0.004)] l_pix: 6.7359e-02 
2025-06-13 08:42:53,838 INFO: [train..][epoch: 36, iter: 954,900, lr:(2.000e-04,)] [eta: 9:48:03, time (data): 0.709 (0.002)] l_pix: 5.9206e-02 
2025-06-13 08:44:05,369 INFO: [train..][epoch: 36, iter: 955,000, lr:(2.000e-04,)] [eta: 9:46:29, time (data): 0.715 (0.004)] l_pix: 3.4565e-02 
2025-06-13 08:44:05,370 INFO: Saving models and training states.
2025-06-13 08:50:29,914 INFO: Validation validation
	 # psnr: 27.2951	Best: 27.3426 @ 950000 iter

2025-06-13 08:51:41,771 INFO: [train..][epoch: 36, iter: 955,100, lr:(2.000e-04,)] [eta: 9:59:16, time (data): 0.717 (0.004)] l_pix: 4.7874e-02 
2025-06-13 08:52:53,686 INFO: [train..][epoch: 36, iter: 955,200, lr:(2.000e-04,)] [eta: 9:57:38, time (data): 0.719 (0.004)] l_pix: 4.9158e-02 
2025-06-13 08:54:05,585 INFO: [train..][epoch: 36, iter: 955,300, lr:(2.000e-04,)] [eta: 9:56:00, time (data): 0.719 (0.004)] l_pix: 3.8376e-02 
2025-06-13 08:55:17,357 INFO: [train..][epoch: 36, iter: 955,400, lr:(2.000e-04,)] [eta: 9:54:22, time (data): 0.718 (0.004)] l_pix: 3.8670e-02 
2025-06-13 08:56:29,486 INFO: [train..][epoch: 36, iter: 955,500, lr:(2.000e-04,)] [eta: 9:52:45, time (data): 0.720 (0.004)] l_pix: 4.5838e-02 
2025-06-13 08:57:41,295 INFO: [train..][epoch: 36, iter: 955,600, lr:(2.000e-04,)] [eta: 9:51:07, time (data): 0.718 (0.004)] l_pix: 3.2052e-02 
2025-06-13 08:58:53,298 INFO: [train..][epoch: 36, iter: 955,700, lr:(2.000e-04,)] [eta: 9:49:31, time (data): 0.719 (0.004)] l_pix: 5.2144e-02 
2025-06-13 09:00:05,130 INFO: [train..][epoch: 36, iter: 955,800, lr:(2.000e-04,)] [eta: 9:47:54, time (data): 0.719 (0.004)] l_pix: 4.7850e-02 
2025-06-13 09:01:16,817 INFO: [train..][epoch: 36, iter: 955,900, lr:(2.000e-04,)] [eta: 9:46:17, time (data): 0.718 (0.004)] l_pix: 3.3473e-02 
2025-06-13 09:02:28,704 INFO: [train..][epoch: 36, iter: 956,000, lr:(2.000e-04,)] [eta: 9:44:40, time (data): 0.719 (0.004)] l_pix: 4.6212e-02 
2025-06-13 09:03:40,454 INFO: [train..][epoch: 36, iter: 956,100, lr:(2.000e-04,)] [eta: 9:43:04, time (data): 0.718 (0.004)] l_pix: 4.5266e-02 
2025-06-13 09:04:52,403 INFO: [train..][epoch: 36, iter: 956,200, lr:(2.000e-04,)] [eta: 9:41:28, time (data): 0.719 (0.004)] l_pix: 4.7006e-02 
2025-06-13 09:05:59,292 INFO: [train..][epoch: 36, iter: 956,300, lr:(2.000e-04,)] [eta: 9:39:43, time (data): 0.693 (0.004)] l_pix: 5.6525e-02 
2025-06-13 09:07:11,241 INFO: [train..][epoch: 36, iter: 956,400, lr:(2.000e-04,)] [eta: 9:38:07, time (data): 0.718 (0.004)] l_pix: 4.3122e-02 
2025-06-13 09:08:23,045 INFO: [train..][epoch: 36, iter: 956,500, lr:(2.000e-04,)] [eta: 9:36:32, time (data): 0.718 (0.004)] l_pix: 4.4040e-02 
2025-06-13 09:09:34,801 INFO: [train..][epoch: 36, iter: 956,600, lr:(2.000e-04,)] [eta: 9:34:57, time (data): 0.717 (0.004)] l_pix: 5.2225e-02 
2025-06-13 09:10:46,672 INFO: [train..][epoch: 36, iter: 956,700, lr:(2.000e-04,)] [eta: 9:33:22, time (data): 0.718 (0.004)] l_pix: 4.3582e-02 
2025-06-13 09:11:58,527 INFO: [train..][epoch: 36, iter: 956,800, lr:(2.000e-04,)] [eta: 9:31:48, time (data): 0.719 (0.004)] l_pix: 4.0640e-02 
2025-06-13 09:13:10,275 INFO: [train..][epoch: 36, iter: 956,900, lr:(2.000e-04,)] [eta: 9:30:13, time (data): 0.718 (0.004)] l_pix: 4.1179e-02 
2025-06-13 09:14:22,150 INFO: [train..][epoch: 36, iter: 957,000, lr:(2.000e-04,)] [eta: 9:28:39, time (data): 0.719 (0.004)] l_pix: 5.0911e-02 
2025-06-13 09:15:33,927 INFO: [train..][epoch: 36, iter: 957,100, lr:(2.000e-04,)] [eta: 9:27:05, time (data): 0.719 (0.004)] l_pix: 4.8533e-02 
2025-06-13 09:16:45,657 INFO: [train..][epoch: 36, iter: 957,200, lr:(2.000e-04,)] [eta: 9:25:31, time (data): 0.717 (0.004)] l_pix: 4.8011e-02 
2025-06-13 09:17:57,333 INFO: [train..][epoch: 36, iter: 957,300, lr:(2.000e-04,)] [eta: 9:23:57, time (data): 0.717 (0.004)] l_pix: 4.7322e-02 
2025-06-13 09:19:09,093 INFO: [train..][epoch: 36, iter: 957,400, lr:(2.000e-04,)] [eta: 9:22:24, time (data): 0.717 (0.004)] l_pix: 4.4900e-02 
2025-06-13 09:20:20,964 INFO: [train..][epoch: 36, iter: 957,500, lr:(2.000e-04,)] [eta: 9:20:51, time (data): 0.718 (0.004)] l_pix: 3.1929e-02 
2025-06-13 09:21:32,875 INFO: [train..][epoch: 36, iter: 957,600, lr:(2.000e-04,)] [eta: 9:19:18, time (data): 0.719 (0.004)] l_pix: 5.2801e-02 
2025-06-13 09:22:44,747 INFO: [train..][epoch: 36, iter: 957,700, lr:(2.000e-04,)] [eta: 9:17:45, time (data): 0.719 (0.004)] l_pix: 5.3875e-02 
2025-06-13 09:23:56,667 INFO: [train..][epoch: 36, iter: 957,800, lr:(2.000e-04,)] [eta: 9:16:13, time (data): 0.719 (0.004)] l_pix: 3.8677e-02 
2025-06-13 09:25:08,561 INFO: [train..][epoch: 36, iter: 957,900, lr:(2.000e-04,)] [eta: 9:14:41, time (data): 0.719 (0.004)] l_pix: 5.4185e-02 
2025-06-13 09:26:20,456 INFO: [train..][epoch: 36, iter: 958,000, lr:(2.000e-04,)] [eta: 9:13:08, time (data): 0.719 (0.004)] l_pix: 3.8469e-02 
2025-06-13 09:27:32,094 INFO: [train..][epoch: 36, iter: 958,100, lr:(2.000e-04,)] [eta: 9:11:36, time (data): 0.718 (0.004)] l_pix: 6.0865e-02 
2025-06-13 09:28:44,203 INFO: [train..][epoch: 36, iter: 958,200, lr:(2.000e-04,)] [eta: 9:10:05, time (data): 0.722 (0.004)] l_pix: 5.7436e-02 
2025-06-13 09:29:55,912 INFO: [train..][epoch: 36, iter: 958,300, lr:(2.000e-04,)] [eta: 9:08:33, time (data): 0.719 (0.004)] l_pix: 4.9590e-02 
2025-06-13 09:31:07,712 INFO: [train..][epoch: 36, iter: 958,400, lr:(2.000e-04,)] [eta: 9:07:01, time (data): 0.717 (0.004)] l_pix: 4.1107e-02 
2025-06-13 09:32:19,503 INFO: [train..][epoch: 36, iter: 958,500, lr:(2.000e-04,)] [eta: 9:05:30, time (data): 0.718 (0.004)] l_pix: 5.1860e-02 
2025-06-13 09:33:31,211 INFO: [train..][epoch: 36, iter: 958,600, lr:(2.000e-04,)] [eta: 9:03:58, time (data): 0.717 (0.004)] l_pix: 4.0892e-02 
2025-06-13 09:34:43,211 INFO: [train..][epoch: 36, iter: 958,700, lr:(2.000e-04,)] [eta: 9:02:27, time (data): 0.719 (0.004)] l_pix: 4.8654e-02 
2025-06-13 09:35:54,971 INFO: [train..][epoch: 36, iter: 958,800, lr:(2.000e-04,)] [eta: 9:00:56, time (data): 0.717 (0.004)] l_pix: 4.5655e-02 
2025-06-13 09:37:06,635 INFO: [train..][epoch: 36, iter: 958,900, lr:(2.000e-04,)] [eta: 8:59:25, time (data): 0.717 (0.004)] l_pix: 3.7424e-02 
2025-06-13 09:38:18,561 INFO: [train..][epoch: 36, iter: 959,000, lr:(2.000e-04,)] [eta: 8:57:55, time (data): 0.720 (0.004)] l_pix: 4.9241e-02 
2025-06-13 09:39:30,503 INFO: [train..][epoch: 36, iter: 959,100, lr:(2.000e-04,)] [eta: 8:56:25, time (data): 0.720 (0.004)] l_pix: 4.5930e-02 
2025-06-13 09:40:42,576 INFO: [train..][epoch: 36, iter: 959,200, lr:(2.000e-04,)] [eta: 8:54:55, time (data): 0.721 (0.004)] l_pix: 4.6314e-02 
2025-06-13 09:41:54,326 INFO: [train..][epoch: 36, iter: 959,300, lr:(2.000e-04,)] [eta: 8:53:25, time (data): 0.719 (0.004)] l_pix: 5.3249e-02 
2025-06-13 09:43:06,107 INFO: [train..][epoch: 36, iter: 959,400, lr:(2.000e-04,)] [eta: 8:51:55, time (data): 0.718 (0.004)] l_pix: 3.6945e-02 
2025-06-13 09:44:17,989 INFO: [train..][epoch: 36, iter: 959,500, lr:(2.000e-04,)] [eta: 8:50:25, time (data): 0.718 (0.004)] l_pix: 6.0045e-02 
2025-06-13 09:45:29,803 INFO: [train..][epoch: 36, iter: 959,600, lr:(2.000e-04,)] [eta: 8:48:55, time (data): 0.719 (0.004)] l_pix: 4.5971e-02 
2025-06-13 09:46:41,699 INFO: [train..][epoch: 36, iter: 959,700, lr:(2.000e-04,)] [eta: 8:47:26, time (data): 0.719 (0.004)] l_pix: 5.3841e-02 
2025-06-13 09:47:53,504 INFO: [train..][epoch: 36, iter: 959,800, lr:(2.000e-04,)] [eta: 8:45:56, time (data): 0.718 (0.004)] l_pix: 4.0219e-02 
2025-06-13 09:49:05,447 INFO: [train..][epoch: 36, iter: 959,900, lr:(2.000e-04,)] [eta: 8:44:27, time (data): 0.719 (0.004)] l_pix: 3.4694e-02 
2025-06-13 09:50:48,877 INFO: [train..][epoch: 37, iter: 960,000, lr:(2.000e-04,)] [eta: 8:43:49, time (data): 1.135 (0.420)] l_pix: 3.0059e-02 
2025-06-13 09:50:48,878 INFO: Saving models and training states.
2025-06-13 09:57:12,270 INFO: Validation validation
	 # psnr: 27.1809	Best: 27.3426 @ 950000 iter

2025-06-13 09:58:24,408 INFO: [train..][epoch: 37, iter: 960,100, lr:(2.000e-04,)] [eta: 8:52:29, time (data): 0.900 (0.183)] l_pix: 3.6439e-02 
2025-06-13 09:59:35,966 INFO: [train..][epoch: 37, iter: 960,200, lr:(2.000e-04,)] [eta: 8:50:56, time (data): 0.715 (0.004)] l_pix: 5.0853e-02 
2025-06-13 10:00:47,919 INFO: [train..][epoch: 37, iter: 960,300, lr:(2.000e-04,)] [eta: 8:49:23, time (data): 0.718 (0.004)] l_pix: 5.9852e-02 
2025-06-13 10:01:59,498 INFO: [train..][epoch: 37, iter: 960,400, lr:(2.000e-04,)] [eta: 8:47:50, time (data): 0.717 (0.004)] l_pix: 4.3009e-02 
2025-06-13 10:03:11,031 INFO: [train..][epoch: 37, iter: 960,500, lr:(2.000e-04,)] [eta: 8:46:17, time (data): 0.716 (0.004)] l_pix: 4.4069e-02 
2025-06-13 10:04:22,856 INFO: [train..][epoch: 37, iter: 960,600, lr:(2.000e-04,)] [eta: 8:44:44, time (data): 0.718 (0.004)] l_pix: 4.8619e-02 
2025-06-13 10:05:34,667 INFO: [train..][epoch: 37, iter: 960,700, lr:(2.000e-04,)] [eta: 8:43:12, time (data): 0.718 (0.004)] l_pix: 6.1065e-02 
2025-06-13 10:06:46,855 INFO: [train..][epoch: 37, iter: 960,800, lr:(2.000e-04,)] [eta: 8:41:41, time (data): 0.723 (0.004)] l_pix: 5.0810e-02 
2025-06-13 10:07:58,571 INFO: [train..][epoch: 37, iter: 960,900, lr:(2.000e-04,)] [eta: 8:40:08, time (data): 0.720 (0.004)] l_pix: 5.5173e-02 
2025-06-13 10:09:10,148 INFO: [train..][epoch: 37, iter: 961,000, lr:(2.000e-04,)] [eta: 8:38:36, time (data): 0.714 (0.004)] l_pix: 3.2805e-02 
2025-06-13 10:10:22,025 INFO: [train..][epoch: 37, iter: 961,100, lr:(2.000e-04,)] [eta: 8:37:05, time (data): 0.717 (0.004)] l_pix: 5.5042e-02 
2025-06-13 10:11:33,674 INFO: [train..][epoch: 37, iter: 961,200, lr:(2.000e-04,)] [eta: 8:35:33, time (data): 0.717 (0.004)] l_pix: 5.4535e-02 
2025-06-13 10:12:45,429 INFO: [train..][epoch: 37, iter: 961,300, lr:(2.000e-04,)] [eta: 8:34:01, time (data): 0.717 (0.004)] l_pix: 5.0048e-02 
2025-06-13 10:13:57,247 INFO: [train..][epoch: 37, iter: 961,400, lr:(2.000e-04,)] [eta: 8:32:30, time (data): 0.719 (0.004)] l_pix: 3.7808e-02 
2025-06-13 10:15:08,903 INFO: [train..][epoch: 37, iter: 961,500, lr:(2.000e-04,)] [eta: 8:30:59, time (data): 0.718 (0.004)] l_pix: 6.1208e-02 
2025-06-13 10:16:20,479 INFO: [train..][epoch: 37, iter: 961,600, lr:(2.000e-04,)] [eta: 8:29:28, time (data): 0.716 (0.004)] l_pix: 5.1169e-02 
2025-06-13 10:17:32,238 INFO: [train..][epoch: 37, iter: 961,700, lr:(2.000e-04,)] [eta: 8:27:57, time (data): 0.717 (0.004)] l_pix: 4.4931e-02 
2025-06-13 10:18:44,274 INFO: [train..][epoch: 37, iter: 961,800, lr:(2.000e-04,)] [eta: 8:26:26, time (data): 0.719 (0.004)] l_pix: 3.9245e-02 
2025-06-13 10:19:55,908 INFO: [train..][epoch: 37, iter: 961,900, lr:(2.000e-04,)] [eta: 8:24:56, time (data): 0.717 (0.004)] l_pix: 4.3592e-02 
2025-06-13 10:21:07,506 INFO: [train..][epoch: 37, iter: 962,000, lr:(2.000e-04,)] [eta: 8:23:25, time (data): 0.715 (0.004)] l_pix: 3.4603e-02 
2025-06-13 10:22:19,489 INFO: [train..][epoch: 37, iter: 962,100, lr:(2.000e-04,)] [eta: 8:21:55, time (data): 0.718 (0.004)] l_pix: 5.2108e-02 
2025-06-13 10:23:31,000 INFO: [train..][epoch: 37, iter: 962,200, lr:(2.000e-04,)] [eta: 8:20:24, time (data): 0.715 (0.004)] l_pix: 5.9473e-02 
2025-06-13 10:24:43,027 INFO: [train..][epoch: 37, iter: 962,300, lr:(2.000e-04,)] [eta: 8:18:55, time (data): 0.718 (0.004)] l_pix: 4.6448e-02 
2025-06-13 10:25:54,948 INFO: [train..][epoch: 37, iter: 962,400, lr:(2.000e-04,)] [eta: 8:17:25, time (data): 0.722 (0.004)] l_pix: 5.5323e-02 
2025-06-13 10:27:06,608 INFO: [train..][epoch: 37, iter: 962,500, lr:(2.000e-04,)] [eta: 8:15:55, time (data): 0.719 (0.004)] l_pix: 4.4198e-02 
2025-06-13 10:28:18,477 INFO: [train..][epoch: 37, iter: 962,600, lr:(2.000e-04,)] [eta: 8:14:26, time (data): 0.719 (0.004)] l_pix: 5.1358e-02 
2025-06-13 10:29:30,105 INFO: [train..][epoch: 37, iter: 962,700, lr:(2.000e-04,)] [eta: 8:12:56, time (data): 0.717 (0.004)] l_pix: 4.5121e-02 
2025-06-13 10:30:42,079 INFO: [train..][epoch: 37, iter: 962,800, lr:(2.000e-04,)] [eta: 8:11:27, time (data): 0.720 (0.004)] l_pix: 5.0227e-02 
2025-06-13 10:31:53,681 INFO: [train..][epoch: 37, iter: 962,900, lr:(2.000e-04,)] [eta: 8:09:58, time (data): 0.717 (0.004)] l_pix: 5.2298e-02 
2025-06-13 10:33:05,583 INFO: [train..][epoch: 37, iter: 963,000, lr:(2.000e-04,)] [eta: 8:08:29, time (data): 0.719 (0.004)] l_pix: 4.4729e-02 
2025-06-13 10:34:17,416 INFO: [train..][epoch: 37, iter: 963,100, lr:(2.000e-04,)] [eta: 8:07:00, time (data): 0.719 (0.004)] l_pix: 4.7344e-02 
2025-06-13 10:35:29,187 INFO: [train..][epoch: 37, iter: 963,200, lr:(2.000e-04,)] [eta: 8:05:31, time (data): 0.718 (0.003)] l_pix: 4.3407e-02 
2025-06-13 10:36:40,930 INFO: [train..][epoch: 37, iter: 963,300, lr:(2.000e-04,)] [eta: 8:04:02, time (data): 0.717 (0.004)] l_pix: 3.1740e-02 
2025-06-13 10:37:52,700 INFO: [train..][epoch: 37, iter: 963,400, lr:(2.000e-04,)] [eta: 8:02:33, time (data): 0.718 (0.004)] l_pix: 2.9446e-02 
2025-06-13 10:39:04,255 INFO: [train..][epoch: 37, iter: 963,500, lr:(2.000e-04,)] [eta: 8:01:05, time (data): 0.717 (0.004)] l_pix: 4.3923e-02 
2025-06-13 10:40:16,078 INFO: [train..][epoch: 37, iter: 963,600, lr:(2.000e-04,)] [eta: 7:59:36, time (data): 0.720 (0.004)] l_pix: 4.3773e-02 
2025-06-13 10:41:27,628 INFO: [train..][epoch: 37, iter: 963,700, lr:(2.000e-04,)] [eta: 7:58:08, time (data): 0.717 (0.004)] l_pix: 5.0401e-02 
2025-06-13 10:42:39,478 INFO: [train..][epoch: 37, iter: 963,800, lr:(2.000e-04,)] [eta: 7:56:40, time (data): 0.718 (0.004)] l_pix: 4.6957e-02 
2025-06-13 10:43:51,120 INFO: [train..][epoch: 37, iter: 963,900, lr:(2.000e-04,)] [eta: 7:55:11, time (data): 0.717 (0.004)] l_pix: 4.8746e-02 
2025-06-13 10:45:03,032 INFO: [train..][epoch: 37, iter: 964,000, lr:(2.000e-04,)] [eta: 7:53:44, time (data): 0.717 (0.004)] l_pix: 3.7261e-02 
2025-06-13 10:46:14,781 INFO: [train..][epoch: 37, iter: 964,100, lr:(2.000e-04,)] [eta: 7:52:16, time (data): 0.717 (0.004)] l_pix: 5.4129e-02 
2025-06-13 10:47:26,277 INFO: [train..][epoch: 37, iter: 964,200, lr:(2.000e-04,)] [eta: 7:50:48, time (data): 0.713 (0.003)] l_pix: 4.2629e-02 
2025-06-13 10:48:38,049 INFO: [train..][epoch: 37, iter: 964,300, lr:(2.000e-04,)] [eta: 7:49:20, time (data): 0.716 (0.004)] l_pix: 3.7232e-02 
2025-06-13 10:49:49,900 INFO: [train..][epoch: 37, iter: 964,400, lr:(2.000e-04,)] [eta: 7:47:53, time (data): 0.721 (0.004)] l_pix: 3.3016e-02 
2025-06-13 10:51:01,819 INFO: [train..][epoch: 37, iter: 964,500, lr:(2.000e-04,)] [eta: 7:46:26, time (data): 0.720 (0.004)] l_pix: 5.6548e-02 
2025-06-13 10:52:13,592 INFO: [train..][epoch: 37, iter: 964,600, lr:(2.000e-04,)] [eta: 7:44:58, time (data): 0.719 (0.004)] l_pix: 3.9694e-02 
2025-06-13 10:53:25,186 INFO: [train..][epoch: 37, iter: 964,700, lr:(2.000e-04,)] [eta: 7:43:31, time (data): 0.717 (0.004)] l_pix: 5.7300e-02 
2025-06-13 10:54:37,164 INFO: [train..][epoch: 37, iter: 964,800, lr:(2.000e-04,)] [eta: 7:42:04, time (data): 0.718 (0.004)] l_pix: 6.4587e-02 
2025-06-13 10:55:49,053 INFO: [train..][epoch: 37, iter: 964,900, lr:(2.000e-04,)] [eta: 7:40:37, time (data): 0.719 (0.004)] l_pix: 4.7842e-02 
2025-06-13 10:57:00,802 INFO: [train..][epoch: 37, iter: 965,000, lr:(2.000e-04,)] [eta: 7:39:10, time (data): 0.716 (0.004)] l_pix: 4.5903e-02 
2025-06-13 10:57:00,803 INFO: Saving models and training states.
2025-06-13 11:03:24,605 INFO: Validation validation
	 # psnr: 27.3060	Best: 27.3426 @ 950000 iter

2025-06-13 11:04:36,821 INFO: [train..][epoch: 37, iter: 965,100, lr:(2.000e-04,)] [eta: 7:45:09, time (data): 0.720 (0.004)] l_pix: 3.4966e-02 
2025-06-13 11:05:48,427 INFO: [train..][epoch: 37, iter: 965,200, lr:(2.000e-04,)] [eta: 7:43:39, time (data): 0.717 (0.004)] l_pix: 4.7515e-02 
2025-06-13 11:07:00,167 INFO: [train..][epoch: 37, iter: 965,300, lr:(2.000e-04,)] [eta: 7:42:10, time (data): 0.717 (0.004)] l_pix: 3.6197e-02 
2025-06-13 11:08:11,903 INFO: [train..][epoch: 37, iter: 965,400, lr:(2.000e-04,)] [eta: 7:40:41, time (data): 0.719 (0.004)] l_pix: 5.9256e-02 
2025-06-13 11:09:23,575 INFO: [train..][epoch: 37, iter: 965,500, lr:(2.000e-04,)] [eta: 7:39:12, time (data): 0.717 (0.004)] l_pix: 4.2004e-02 
2025-06-13 11:10:35,381 INFO: [train..][epoch: 37, iter: 965,600, lr:(2.000e-04,)] [eta: 7:37:43, time (data): 0.717 (0.004)] l_pix: 3.5874e-02 
2025-06-13 11:11:47,098 INFO: [train..][epoch: 37, iter: 965,700, lr:(2.000e-04,)] [eta: 7:36:14, time (data): 0.717 (0.004)] l_pix: 4.8208e-02 
2025-06-13 11:12:59,067 INFO: [train..][epoch: 37, iter: 965,800, lr:(2.000e-04,)] [eta: 7:34:45, time (data): 0.722 (0.004)] l_pix: 6.6664e-02 
2025-06-13 11:14:10,780 INFO: [train..][epoch: 37, iter: 965,900, lr:(2.000e-04,)] [eta: 7:33:17, time (data): 0.719 (0.004)] l_pix: 5.9759e-02 
2025-06-13 11:15:22,570 INFO: [train..][epoch: 37, iter: 966,000, lr:(2.000e-04,)] [eta: 7:31:48, time (data): 0.715 (0.004)] l_pix: 4.8298e-02 
2025-06-13 11:16:34,438 INFO: [train..][epoch: 37, iter: 966,100, lr:(2.000e-04,)] [eta: 7:30:20, time (data): 0.717 (0.004)] l_pix: 3.7107e-02 
2025-06-13 11:17:46,299 INFO: [train..][epoch: 37, iter: 966,200, lr:(2.000e-04,)] [eta: 7:28:52, time (data): 0.723 (0.004)] l_pix: 4.6708e-02 
2025-06-13 11:18:58,119 INFO: [train..][epoch: 37, iter: 966,300, lr:(2.000e-04,)] [eta: 7:27:23, time (data): 0.720 (0.004)] l_pix: 4.3476e-02 
2025-06-13 11:20:09,806 INFO: [train..][epoch: 37, iter: 966,400, lr:(2.000e-04,)] [eta: 7:25:55, time (data): 0.720 (0.004)] l_pix: 3.9578e-02 
2025-06-13 11:21:21,545 INFO: [train..][epoch: 37, iter: 966,500, lr:(2.000e-04,)] [eta: 7:24:27, time (data): 0.718 (0.004)] l_pix: 4.7891e-02 
2025-06-13 11:22:33,796 INFO: [train..][epoch: 37, iter: 966,600, lr:(2.000e-04,)] [eta: 7:23:00, time (data): 0.726 (0.004)] l_pix: 4.2781e-02 
2025-06-13 11:23:45,436 INFO: [train..][epoch: 37, iter: 966,700, lr:(2.000e-04,)] [eta: 7:21:32, time (data): 0.719 (0.004)] l_pix: 4.8106e-02 
2025-06-13 11:24:52,257 INFO: [train..][epoch: 37, iter: 966,800, lr:(2.000e-04,)] [eta: 7:19:59, time (data): 0.668 (0.004)] l_pix: 4.7472e-02 
2025-06-13 11:26:03,996 INFO: [train..][epoch: 37, iter: 966,900, lr:(2.000e-04,)] [eta: 7:18:31, time (data): 0.703 (0.004)] l_pix: 6.4448e-02 
2025-06-13 11:27:15,604 INFO: [train..][epoch: 37, iter: 967,000, lr:(2.000e-04,)] [eta: 7:17:04, time (data): 0.714 (0.004)] l_pix: 4.2332e-02 
2025-06-13 11:28:27,437 INFO: [train..][epoch: 37, iter: 967,100, lr:(2.000e-04,)] [eta: 7:15:37, time (data): 0.717 (0.004)] l_pix: 4.8571e-02 
2025-06-13 11:29:34,195 INFO: [train..][epoch: 37, iter: 967,200, lr:(2.000e-04,)] [eta: 7:14:04, time (data): 0.668 (0.004)] l_pix: 5.4092e-02 
2025-06-13 11:30:46,153 INFO: [train..][epoch: 37, iter: 967,300, lr:(2.000e-04,)] [eta: 7:12:37, time (data): 0.705 (0.004)] l_pix: 4.0259e-02 
2025-06-13 11:31:57,978 INFO: [train..][epoch: 37, iter: 967,400, lr:(2.000e-04,)] [eta: 7:11:10, time (data): 0.722 (0.004)] l_pix: 3.7569e-02 
2025-06-13 11:33:09,598 INFO: [train..][epoch: 37, iter: 967,500, lr:(2.000e-04,)] [eta: 7:09:43, time (data): 0.718 (0.004)] l_pix: 5.4554e-02 
2025-06-13 11:34:21,285 INFO: [train..][epoch: 37, iter: 967,600, lr:(2.000e-04,)] [eta: 7:08:16, time (data): 0.719 (0.004)] l_pix: 4.0348e-02 
2025-06-13 11:35:33,056 INFO: [train..][epoch: 37, iter: 967,700, lr:(2.000e-04,)] [eta: 7:06:49, time (data): 0.718 (0.004)] l_pix: 6.0112e-02 
2025-06-13 11:36:44,876 INFO: [train..][epoch: 37, iter: 967,800, lr:(2.000e-04,)] [eta: 7:05:23, time (data): 0.718 (0.004)] l_pix: 3.7941e-02 
2025-06-13 11:37:56,654 INFO: [train..][epoch: 37, iter: 967,900, lr:(2.000e-04,)] [eta: 7:03:56, time (data): 0.718 (0.004)] l_pix: 4.1935e-02 
2025-06-13 11:39:08,338 INFO: [train..][epoch: 37, iter: 968,000, lr:(2.000e-04,)] [eta: 7:02:30, time (data): 0.715 (0.004)] l_pix: 5.0825e-02 
2025-06-13 11:40:20,261 INFO: [train..][epoch: 37, iter: 968,100, lr:(2.000e-04,)] [eta: 7:01:03, time (data): 0.718 (0.004)] l_pix: 4.0844e-02 
2025-06-13 11:41:32,134 INFO: [train..][epoch: 37, iter: 968,200, lr:(2.000e-04,)] [eta: 6:59:37, time (data): 0.718 (0.004)] l_pix: 3.6876e-02 
2025-06-13 11:42:43,975 INFO: [train..][epoch: 37, iter: 968,300, lr:(2.000e-04,)] [eta: 6:58:11, time (data): 0.718 (0.004)] l_pix: 4.5198e-02 
2025-06-13 11:43:55,786 INFO: [train..][epoch: 37, iter: 968,400, lr:(2.000e-04,)] [eta: 6:56:45, time (data): 0.723 (0.004)] l_pix: 4.6858e-02 
2025-06-13 11:45:07,581 INFO: [train..][epoch: 37, iter: 968,500, lr:(2.000e-04,)] [eta: 6:55:19, time (data): 0.719 (0.004)] l_pix: 5.0873e-02 
2025-06-13 11:46:19,267 INFO: [train..][epoch: 37, iter: 968,600, lr:(2.000e-04,)] [eta: 6:53:53, time (data): 0.717 (0.004)] l_pix: 3.7693e-02 
2025-06-13 11:47:30,981 INFO: [train..][epoch: 37, iter: 968,700, lr:(2.000e-04,)] [eta: 6:52:27, time (data): 0.717 (0.004)] l_pix: 5.6864e-02 
2025-06-13 11:48:42,968 INFO: [train..][epoch: 37, iter: 968,800, lr:(2.000e-04,)] [eta: 6:51:01, time (data): 0.717 (0.003)] l_pix: 4.6767e-02 
2025-06-13 11:49:54,579 INFO: [train..][epoch: 37, iter: 968,900, lr:(2.000e-04,)] [eta: 6:49:35, time (data): 0.716 (0.004)] l_pix: 5.9950e-02 
2025-06-13 11:51:06,347 INFO: [train..][epoch: 37, iter: 969,000, lr:(2.000e-04,)] [eta: 6:48:10, time (data): 0.717 (0.004)] l_pix: 6.3566e-02 
2025-06-13 11:52:18,315 INFO: [train..][epoch: 37, iter: 969,100, lr:(2.000e-04,)] [eta: 6:46:44, time (data): 0.719 (0.004)] l_pix: 5.4715e-02 
2025-06-13 11:53:30,026 INFO: [train..][epoch: 37, iter: 969,200, lr:(2.000e-04,)] [eta: 6:45:19, time (data): 0.719 (0.004)] l_pix: 5.3908e-02 
2025-06-13 11:54:41,975 INFO: [train..][epoch: 37, iter: 969,300, lr:(2.000e-04,)] [eta: 6:43:54, time (data): 0.719 (0.004)] l_pix: 4.9953e-02 
2025-06-13 11:55:53,812 INFO: [train..][epoch: 37, iter: 969,400, lr:(2.000e-04,)] [eta: 6:42:28, time (data): 0.721 (0.004)] l_pix: 4.5702e-02 
2025-06-13 11:57:05,468 INFO: [train..][epoch: 37, iter: 969,500, lr:(2.000e-04,)] [eta: 6:41:03, time (data): 0.718 (0.004)] l_pix: 4.5602e-02 
2025-06-13 11:58:17,295 INFO: [train..][epoch: 37, iter: 969,600, lr:(2.000e-04,)] [eta: 6:39:38, time (data): 0.718 (0.003)] l_pix: 3.9418e-02 
2025-06-13 11:59:29,220 INFO: [train..][epoch: 37, iter: 969,700, lr:(2.000e-04,)] [eta: 6:38:13, time (data): 0.719 (0.004)] l_pix: 5.7473e-02 
2025-06-13 12:00:41,115 INFO: [train..][epoch: 37, iter: 969,800, lr:(2.000e-04,)] [eta: 6:36:48, time (data): 0.716 (0.004)] l_pix: 6.5790e-02 
2025-06-13 12:01:52,998 INFO: [train..][epoch: 37, iter: 969,900, lr:(2.000e-04,)] [eta: 6:35:23, time (data): 0.718 (0.004)] l_pix: 5.6677e-02 
2025-06-13 12:03:04,892 INFO: [train..][epoch: 37, iter: 970,000, lr:(2.000e-04,)] [eta: 6:33:58, time (data): 0.716 (0.004)] l_pix: 4.6017e-02 
2025-06-13 12:03:04,893 INFO: Saving models and training states.
2025-06-13 12:09:19,990 INFO: Validation validation
	 # psnr: 27.3386	Best: 27.3426 @ 950000 iter

2025-06-13 12:10:32,639 INFO: [train..][epoch: 37, iter: 970,100, lr:(2.000e-04,)] [eta: 6:37:54, time (data): 0.724 (0.004)] l_pix: 5.5939e-02 
2025-06-13 12:11:44,161 INFO: [train..][epoch: 37, iter: 970,200, lr:(2.000e-04,)] [eta: 6:36:27, time (data): 0.718 (0.003)] l_pix: 4.6399e-02 
