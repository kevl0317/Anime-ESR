2025-06-13 04:36:22,691 INFO: 
                ____                _       _____  ____
               / __ ) ____ _ _____ (_)_____/ ___/ / __ \
              / __  |/ __ `// ___// // ___/\__ \ / /_/ /
             / /_/ // /_/ /(__  )/ // /__ ___/ // _, _/
            /_____/ \__,_//____//_/ \___//____//_/ |_|
     ______                   __   __                 __      __
    / ____/____   ____   ____/ /  / /   __  __ _____ / /__   / /
   / / __ / __ \ / __ \ / __  /  / /   / / / // ___// //_/  / /
  / /_/ // /_/ // /_/ // /_/ /  / /___/ /_/ // /__ / /<    /_/
  \____/ \____/ \____/ \____/  /_____/\____/ \___//_/|_|  (_)
    
Version Information: 
	BasicSR: 1.4.2
	PyTorch: 2.7.0+cu128
	TorchVision: 0.22.0+cu128
2025-06-13 04:36:22,692 INFO: 
  name: train_anime_RealESRNetx4plus_1000k_B12G4
  model_type: RealESRNetModel
  scale: 4
  num_gpu: 1
  manual_seed: 0
  gt_usm: True
  resize_prob: [0.2, 0.7, 0.1]
  resize_range: [0.15, 1.5]
  gaussian_noise_prob: 0.5
  noise_range: [1, 30]
  poisson_scale_range: [0.05, 3]
  gray_noise_prob: 0.4
  jpeg_range: [30, 95]
  second_blur_prob: 0.8
  resize_prob2: [0.3, 0.4, 0.3]
  resize_range2: [0.3, 1.2]
  gaussian_noise_prob2: 0.5
  noise_range2: [1, 25]
  poisson_scale_range2: [0.05, 2.5]
  gray_noise_prob2: 0.4
  jpeg_range2: [30, 95]
  gt_size: 256
  queue_size: 120
  datasets:[
    train:[
      name: Anime
      type: RealESRGANDataset
      dataroot_gt: datasets/anime
      meta_info: datasets/anime/meta_info_train.txt
      io_backend:[
        type: disk
      ]
      blur_kernel_size: 21
      kernel_list: ['iso', 'aniso', 'generalized_iso', 'generalized_aniso', 'plateau_iso', 'plateau_aniso']
      kernel_prob: [0.45, 0.25, 0.12, 0.03, 0.12, 0.03]
      sinc_prob: 0.1
      blur_sigma: [0.2, 3]
      betag_range: [0.5, 4]
      betap_range: [1, 2]
      blur_kernel_size2: 21
      kernel_list2: ['iso', 'aniso', 'generalized_iso', 'generalized_aniso', 'plateau_iso', 'plateau_aniso']
      kernel_prob2: [0.45, 0.25, 0.12, 0.03, 0.12, 0.03]
      sinc_prob2: 0.1
      blur_sigma2: [0.2, 1.5]
      betag_range2: [0.5, 4]
      betap_range2: [1, 2]
      final_sinc_prob: 0.8
      gt_size: 256
      use_hflip: True
      use_rot: False
      use_shuffle: True
      num_worker_per_gpu: 8
      batch_size_per_gpu: 12
      dataset_enlarge_ratio: 1
      prefetch_mode: None
      phase: train
      scale: 4
    ]
    val:[
      name: validation
      type: PairedImageDataset
      dataroot_gt: datasets/anime/galData_val
      dataroot_lq: datasets/anime/galData_val_lr_x4_bicubic
      io_backend:[
        type: disk
      ]
      phase: val
      scale: 4
    ]
  ]
  network_g:[
    type: RRDBNet
    num_in_ch: 3
    num_out_ch: 3
    num_feat: 64
    num_block: 23
    num_grow_ch: 32
  ]
  path:[
    pretrain_network_g: G:\AI\Anime-ESR\experiments\train_anime_RealESRNetx4plus_1000k_B12G4\models\net_g_970000.pth
    param_key_g: params
    strict_load_g: True
    resume_state: experiments\train_anime_RealESRNetx4plus_1000k_B12G4\training_states\970000.state
    experiments_root: G:\AI\Anime-ESR\experiments\train_anime_RealESRNetx4plus_1000k_B12G4
    models: G:\AI\Anime-ESR\experiments\train_anime_RealESRNetx4plus_1000k_B12G4\models
    training_states: G:\AI\Anime-ESR\experiments\train_anime_RealESRNetx4plus_1000k_B12G4\training_states
    log: G:\AI\Anime-ESR\experiments\train_anime_RealESRNetx4plus_1000k_B12G4
    visualization: G:\AI\Anime-ESR\experiments\train_anime_RealESRNetx4plus_1000k_B12G4\visualization
  ]
  train:[
    ema_decay: 0.999
    optim_g:[
      type: Adam
      lr: 0.0002
      weight_decay: 0
      betas: [0.9, 0.99]
    ]
    scheduler:[
      type: MultiStepLR
      milestones: [1000000]
      gamma: 0.5
    ]
    total_iter: 1000000
    warmup_iter: -1
    pixel_opt:[
      type: L1Loss
      loss_weight: 1.0
      reduction: mean
    ]
  ]
  val:[
    val_freq: 5000.0
    save_img: True
    metrics:[
      psnr:[
        type: calculate_psnr
        crop_border: 4
        test_y_channel: False
      ]
    ]
  ]
  logger:[
    print_freq: 100
    save_checkpoint_freq: 5000.0
    use_tb_logger: True
    wandb:[
      project: None
      resume_id: None
    ]
  ]
  dist_params:[
    backend: nccl
    port: 29500
  ]
  dist: False
  rank: 0
  world_size: 1
  auto_resume: True
  is_train: True
  root_path: G:\AI\Anime-ESR

2025-06-13 04:36:23,386 INFO: Dataset [RealESRGANDataset] - Anime is built.
2025-06-13 04:36:23,386 INFO: Training statistics:
	Number of train images: 299263
	Dataset enlarge ratio: 1
	Batch size per gpu: 12
	World size (gpu number): 1
	Require iter number per epoch: 24939
	Total epochs: 41; iters: 1000000.
2025-06-13 04:36:23,450 INFO: Dataset [PairedImageDataset] - validation is built.
2025-06-13 04:36:23,451 INFO: Number of val images/folders in validation: 488
2025-06-13 04:36:23,631 INFO: Network [RRDBNet] is created.
2025-06-13 04:36:23,670 INFO: Network: RRDBNet, with parameters: 16,697,987
2025-06-13 04:36:23,670 INFO: RRDBNet(
  (conv_first): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (body): Sequential(
    (0): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (5): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (6): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (7): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (8): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (9): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (10): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (11): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (12): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (13): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (14): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (15): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (16): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (17): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (18): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (19): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (20): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (21): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (22): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
  (conv_body): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv_up1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv_up2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv_hr): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv_last): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
)
2025-06-13 04:36:23,823 INFO: Loading RRDBNet model from G:\AI\Anime-ESR\experiments\train_anime_RealESRNetx4plus_1000k_B12G4\models\net_g_970000.pth, with param key: [params].
2025-06-13 04:36:23,914 INFO: Use Exponential Moving Average with decay: 0.999
2025-06-13 04:36:24,067 INFO: Network [RRDBNet] is created.
2025-06-13 04:36:24,227 INFO: Loading RRDBNet model from G:\AI\Anime-ESR\experiments\train_anime_RealESRNetx4plus_1000k_B12G4\models\net_g_970000.pth, with param key: [params_ema].
2025-06-13 04:36:24,317 INFO: Loss [L1Loss] is created.
2025-06-13 04:36:24,332 INFO: Model [RealESRNetModel] is created.
2025-06-13 04:36:24,339 INFO: Resuming training from epoch: 37, iter: 970000.
2025-06-13 04:36:46,981 INFO: Start training from epoch: 37, iter: 970000
2025-06-13 04:38:26,558 INFO: [train..][epoch: 37, iter: 970,100, lr:(2.000e-04,)] [eta: 10:03:00, time (data): 0.996 (0.241)] l_pix: 5.7088e-02 
2025-06-13 04:39:36,205 INFO: [train..][epoch: 37, iter: 970,200, lr:(2.000e-04,)] [eta: 7:54:04, time (data): 0.846 (0.123)] l_pix: 4.6143e-02 
2025-06-13 04:40:46,006 INFO: [train..][epoch: 37, iter: 970,300, lr:(2.000e-04,)] [eta: 7:10:18, time (data): 0.698 (0.005)] l_pix: 3.2975e-02 
2025-06-13 04:41:55,536 INFO: [train..][epoch: 37, iter: 970,400, lr:(2.000e-04,)] [eta: 6:47:26, time (data): 0.697 (0.005)] l_pix: 5.6834e-02 
2025-06-13 04:43:05,585 INFO: [train..][epoch: 37, iter: 970,500, lr:(2.000e-04,)] [eta: 6:33:45, time (data): 0.700 (0.005)] l_pix: 4.8055e-02 
2025-06-13 04:44:15,634 INFO: [train..][epoch: 37, iter: 970,600, lr:(2.000e-04,)] [eta: 6:24:14, time (data): 0.700 (0.005)] l_pix: 5.1196e-02 
2025-06-13 04:45:25,533 INFO: [train..][epoch: 37, iter: 970,700, lr:(2.000e-04,)] [eta: 6:16:59, time (data): 0.699 (0.005)] l_pix: 6.2697e-02 
2025-06-13 04:46:35,215 INFO: [train..][epoch: 37, iter: 970,800, lr:(2.000e-04,)] [eta: 6:11:08, time (data): 0.698 (0.005)] l_pix: 5.3981e-02 
2025-06-13 04:47:45,212 INFO: [train..][epoch: 37, iter: 970,900, lr:(2.000e-04,)] [eta: 6:06:29, time (data): 0.699 (0.005)] l_pix: 4.1935e-02 
2025-06-13 04:48:55,030 INFO: [train..][epoch: 37, iter: 971,000, lr:(2.000e-04,)] [eta: 6:02:27, time (data): 0.699 (0.005)] l_pix: 4.1047e-02 
2025-06-13 04:50:05,060 INFO: [train..][epoch: 37, iter: 971,100, lr:(2.000e-04,)] [eta: 5:59:02, time (data): 0.701 (0.005)] l_pix: 3.3443e-02 
2025-06-13 04:51:14,763 INFO: [train..][epoch: 37, iter: 971,200, lr:(2.000e-04,)] [eta: 5:55:51, time (data): 0.699 (0.005)] l_pix: 3.2450e-02 
2025-06-13 04:52:24,381 INFO: [train..][epoch: 37, iter: 971,300, lr:(2.000e-04,)] [eta: 5:52:57, time (data): 0.697 (0.005)] l_pix: 6.7972e-02 
2025-06-13 04:53:33,886 INFO: [train..][epoch: 37, iter: 971,400, lr:(2.000e-04,)] [eta: 5:50:16, time (data): 0.696 (0.005)] l_pix: 3.2259e-02 
2025-06-13 04:54:43,701 INFO: [train..][epoch: 37, iter: 971,500, lr:(2.000e-04,)] [eta: 5:47:53, time (data): 0.697 (0.005)] l_pix: 5.2864e-02 
2025-06-13 04:55:53,470 INFO: [train..][epoch: 37, iter: 971,600, lr:(2.000e-04,)] [eta: 5:45:38, time (data): 0.698 (0.005)] l_pix: 4.6827e-02 
2025-06-13 04:57:03,335 INFO: [train..][epoch: 37, iter: 971,700, lr:(2.000e-04,)] [eta: 5:43:32, time (data): 0.698 (0.005)] l_pix: 3.3156e-02 
2025-06-13 04:58:13,189 INFO: [train..][epoch: 37, iter: 971,800, lr:(2.000e-04,)] [eta: 5:41:33, time (data): 0.698 (0.005)] l_pix: 3.4215e-02 
2025-06-13 04:59:23,145 INFO: [train..][epoch: 37, iter: 971,900, lr:(2.000e-04,)] [eta: 5:39:40, time (data): 0.699 (0.005)] l_pix: 3.6518e-02 
2025-06-13 05:00:32,880 INFO: [train..][epoch: 37, iter: 972,000, lr:(2.000e-04,)] [eta: 5:37:48, time (data): 0.698 (0.005)] l_pix: 4.2108e-02 
2025-06-13 05:01:42,525 INFO: [train..][epoch: 37, iter: 972,100, lr:(2.000e-04,)] [eta: 5:35:59, time (data): 0.697 (0.005)] l_pix: 4.4768e-02 
2025-06-13 05:02:52,045 INFO: [train..][epoch: 37, iter: 972,200, lr:(2.000e-04,)] [eta: 5:34:12, time (data): 0.696 (0.005)] l_pix: 4.8223e-02 
2025-06-13 05:04:01,895 INFO: [train..][epoch: 37, iter: 972,300, lr:(2.000e-04,)] [eta: 5:32:33, time (data): 0.698 (0.005)] l_pix: 5.1170e-02 
2025-06-13 05:05:11,603 INFO: [train..][epoch: 37, iter: 972,400, lr:(2.000e-04,)] [eta: 5:30:54, time (data): 0.697 (0.005)] l_pix: 4.4032e-02 
2025-06-13 05:06:21,578 INFO: [train..][epoch: 37, iter: 972,500, lr:(2.000e-04,)] [eta: 5:29:20, time (data): 0.700 (0.005)] l_pix: 4.4007e-02 
2025-06-13 05:07:31,214 INFO: [train..][epoch: 37, iter: 972,600, lr:(2.000e-04,)] [eta: 5:27:45, time (data): 0.698 (0.005)] l_pix: 4.6781e-02 
2025-06-13 05:08:40,835 INFO: [train..][epoch: 37, iter: 972,700, lr:(2.000e-04,)] [eta: 5:26:12, time (data): 0.698 (0.005)] l_pix: 5.6267e-02 
2025-06-13 05:09:50,634 INFO: [train..][epoch: 37, iter: 972,800, lr:(2.000e-04,)] [eta: 5:24:42, time (data): 0.698 (0.005)] l_pix: 4.7736e-02 
2025-06-13 05:11:00,344 INFO: [train..][epoch: 37, iter: 972,900, lr:(2.000e-04,)] [eta: 5:23:12, time (data): 0.698 (0.005)] l_pix: 5.0893e-02 
2025-06-13 05:12:10,081 INFO: [train..][epoch: 37, iter: 973,000, lr:(2.000e-04,)] [eta: 5:21:44, time (data): 0.698 (0.005)] l_pix: 4.3905e-02 
2025-06-13 05:13:19,877 INFO: [train..][epoch: 37, iter: 973,100, lr:(2.000e-04,)] [eta: 5:20:18, time (data): 0.696 (0.005)] l_pix: 6.4574e-02 
2025-06-13 05:14:29,664 INFO: [train..][epoch: 37, iter: 973,200, lr:(2.000e-04,)] [eta: 5:18:52, time (data): 0.697 (0.005)] l_pix: 4.6959e-02 
2025-06-13 05:15:39,682 INFO: [train..][epoch: 37, iter: 973,300, lr:(2.000e-04,)] [eta: 5:17:30, time (data): 0.699 (0.005)] l_pix: 3.5428e-02 
2025-06-13 05:16:49,637 INFO: [train..][epoch: 37, iter: 973,400, lr:(2.000e-04,)] [eta: 5:16:08, time (data): 0.699 (0.005)] l_pix: 2.8692e-02 
2025-06-13 05:17:59,310 INFO: [train..][epoch: 37, iter: 973,500, lr:(2.000e-04,)] [eta: 5:14:44, time (data): 0.699 (0.005)] l_pix: 4.3240e-02 
2025-06-13 05:19:09,015 INFO: [train..][epoch: 37, iter: 973,600, lr:(2.000e-04,)] [eta: 5:13:21, time (data): 0.698 (0.005)] l_pix: 5.4702e-02 
2025-06-13 05:20:19,029 INFO: [train..][epoch: 37, iter: 973,700, lr:(2.000e-04,)] [eta: 5:12:01, time (data): 0.699 (0.005)] l_pix: 4.2482e-02 
2025-06-13 05:21:28,996 INFO: [train..][epoch: 37, iter: 973,800, lr:(2.000e-04,)] [eta: 5:10:42, time (data): 0.700 (0.005)] l_pix: 4.6934e-02 
2025-06-13 05:22:39,013 INFO: [train..][epoch: 37, iter: 973,900, lr:(2.000e-04,)] [eta: 5:09:23, time (data): 0.699 (0.005)] l_pix: 5.1604e-02 
2025-06-13 05:23:48,694 INFO: [train..][epoch: 37, iter: 974,000, lr:(2.000e-04,)] [eta: 5:08:02, time (data): 0.698 (0.005)] l_pix: 4.6421e-02 
2025-06-13 05:24:58,435 INFO: [train..][epoch: 37, iter: 974,100, lr:(2.000e-04,)] [eta: 5:06:43, time (data): 0.697 (0.005)] l_pix: 4.6923e-02 
2025-06-13 05:26:08,069 INFO: [train..][epoch: 37, iter: 974,200, lr:(2.000e-04,)] [eta: 5:05:23, time (data): 0.696 (0.005)] l_pix: 3.9392e-02 
2025-06-13 05:27:17,485 INFO: [train..][epoch: 37, iter: 974,300, lr:(2.000e-04,)] [eta: 5:04:02, time (data): 0.694 (0.005)] l_pix: 4.1466e-02 
2025-06-13 05:28:27,295 INFO: [train..][epoch: 37, iter: 974,400, lr:(2.000e-04,)] [eta: 5:02:45, time (data): 0.696 (0.005)] l_pix: 4.7146e-02 
2025-06-13 05:29:36,910 INFO: [train..][epoch: 37, iter: 974,500, lr:(2.000e-04,)] [eta: 5:01:26, time (data): 0.695 (0.005)] l_pix: 5.0717e-02 
2025-06-13 05:30:46,701 INFO: [train..][epoch: 37, iter: 974,600, lr:(2.000e-04,)] [eta: 5:00:09, time (data): 0.697 (0.005)] l_pix: 6.8691e-02 
2025-06-13 05:31:56,423 INFO: [train..][epoch: 37, iter: 974,700, lr:(2.000e-04,)] [eta: 4:58:52, time (data): 0.697 (0.005)] l_pix: 3.7965e-02 
2025-06-13 05:33:06,430 INFO: [train..][epoch: 37, iter: 974,800, lr:(2.000e-04,)] [eta: 4:57:36, time (data): 0.699 (0.005)] l_pix: 5.2505e-02 
2025-06-13 05:34:16,187 INFO: [train..][epoch: 37, iter: 974,900, lr:(2.000e-04,)] [eta: 4:56:20, time (data): 0.700 (0.005)] l_pix: 3.7876e-02 
2025-06-13 05:35:25,875 INFO: [train..][epoch: 37, iter: 975,000, lr:(2.000e-04,)] [eta: 4:55:03, time (data): 0.698 (0.005)] l_pix: 5.6715e-02 
2025-06-13 05:35:25,875 INFO: Saving models and training states.
2025-06-13 05:44:37,534 INFO: Validation validation
	 # psnr: 27.3341	Best: 27.3341 @ 975000 iter

2025-06-13 05:45:47,299 INFO: [train..][epoch: 37, iter: 975,100, lr:(2.000e-04,)] [eta: 5:38:40, time (data): 0.698 (0.005)] l_pix: 3.6292e-02 
2025-06-13 05:46:56,874 INFO: [train..][epoch: 37, iter: 975,200, lr:(2.000e-04,)] [eta: 5:36:21, time (data): 0.697 (0.005)] l_pix: 4.1518e-02 
2025-06-13 05:48:06,721 INFO: [train..][epoch: 37, iter: 975,300, lr:(2.000e-04,)] [eta: 5:34:06, time (data): 0.699 (0.005)] l_pix: 6.3739e-02 
2025-06-13 05:49:16,575 INFO: [train..][epoch: 37, iter: 975,400, lr:(2.000e-04,)] [eta: 5:31:53, time (data): 0.699 (0.005)] l_pix: 4.4866e-02 
2025-06-13 05:50:26,066 INFO: [train..][epoch: 37, iter: 975,500, lr:(2.000e-04,)] [eta: 5:29:41, time (data): 0.697 (0.005)] l_pix: 5.9895e-02 
2025-06-13 05:51:35,663 INFO: [train..][epoch: 37, iter: 975,600, lr:(2.000e-04,)] [eta: 5:27:32, time (data): 0.696 (0.005)] l_pix: 4.0753e-02 
2025-06-13 05:52:45,085 INFO: [train..][epoch: 37, iter: 975,700, lr:(2.000e-04,)] [eta: 5:25:24, time (data): 0.694 (0.005)] l_pix: 4.9408e-02 
2025-06-13 05:53:54,860 INFO: [train..][epoch: 37, iter: 975,800, lr:(2.000e-04,)] [eta: 5:23:19, time (data): 0.696 (0.005)] l_pix: 5.5359e-02 
2025-06-13 05:55:04,462 INFO: [train..][epoch: 37, iter: 975,900, lr:(2.000e-04,)] [eta: 5:21:16, time (data): 0.694 (0.005)] l_pix: 4.7985e-02 
2025-06-13 05:56:14,276 INFO: [train..][epoch: 37, iter: 976,000, lr:(2.000e-04,)] [eta: 5:19:15, time (data): 0.696 (0.005)] l_pix: 5.3359e-02 
2025-06-13 05:57:23,758 INFO: [train..][epoch: 37, iter: 976,100, lr:(2.000e-04,)] [eta: 5:17:15, time (data): 0.696 (0.005)] l_pix: 3.5413e-02 
2025-06-13 05:58:33,544 INFO: [train..][epoch: 37, iter: 976,200, lr:(2.000e-04,)] [eta: 5:15:17, time (data): 0.697 (0.005)] l_pix: 4.5022e-02 
2025-06-13 05:59:43,218 INFO: [train..][epoch: 37, iter: 976,300, lr:(2.000e-04,)] [eta: 5:13:21, time (data): 0.698 (0.005)] l_pix: 5.4339e-02 
2025-06-13 06:00:52,816 INFO: [train..][epoch: 37, iter: 976,400, lr:(2.000e-04,)] [eta: 5:11:26, time (data): 0.697 (0.005)] l_pix: 5.1176e-02 
2025-06-13 06:02:02,402 INFO: [train..][epoch: 37, iter: 976,500, lr:(2.000e-04,)] [eta: 5:09:32, time (data): 0.695 (0.005)] l_pix: 4.3523e-02 
2025-06-13 06:03:12,187 INFO: [train..][epoch: 37, iter: 976,600, lr:(2.000e-04,)] [eta: 5:07:40, time (data): 0.697 (0.005)] l_pix: 6.4250e-02 
2025-06-13 06:04:21,984 INFO: [train..][epoch: 37, iter: 976,700, lr:(2.000e-04,)] [eta: 5:05:50, time (data): 0.696 (0.005)] l_pix: 3.3760e-02 
2025-06-13 06:05:31,716 INFO: [train..][epoch: 37, iter: 976,800, lr:(2.000e-04,)] [eta: 5:04:00, time (data): 0.697 (0.005)] l_pix: 4.8619e-02 
2025-06-13 06:06:41,627 INFO: [train..][epoch: 37, iter: 976,900, lr:(2.000e-04,)] [eta: 5:02:12, time (data): 0.701 (0.005)] l_pix: 4.5445e-02 
2025-06-13 06:07:51,272 INFO: [train..][epoch: 37, iter: 977,000, lr:(2.000e-04,)] [eta: 5:00:25, time (data): 0.698 (0.005)] l_pix: 6.6124e-02 
2025-06-13 06:09:00,879 INFO: [train..][epoch: 37, iter: 977,100, lr:(2.000e-04,)] [eta: 4:58:38, time (data): 0.695 (0.005)] l_pix: 5.3293e-02 
2025-06-13 06:10:10,476 INFO: [train..][epoch: 37, iter: 977,200, lr:(2.000e-04,)] [eta: 4:56:52, time (data): 0.696 (0.005)] l_pix: 4.7393e-02 
2025-06-13 06:11:20,186 INFO: [train..][epoch: 37, iter: 977,300, lr:(2.000e-04,)] [eta: 4:55:08, time (data): 0.696 (0.005)] l_pix: 4.6947e-02 
2025-06-13 06:12:29,758 INFO: [train..][epoch: 37, iter: 977,400, lr:(2.000e-04,)] [eta: 4:53:24, time (data): 0.696 (0.005)] l_pix: 4.0867e-02 
2025-06-13 06:13:39,436 INFO: [train..][epoch: 37, iter: 977,500, lr:(2.000e-04,)] [eta: 4:51:42, time (data): 0.699 (0.005)] l_pix: 5.9720e-02 
2025-06-13 06:14:48,800 INFO: [train..][epoch: 37, iter: 977,600, lr:(2.000e-04,)] [eta: 4:49:59, time (data): 0.696 (0.005)] l_pix: 3.4289e-02 
2025-06-13 06:15:58,362 INFO: [train..][epoch: 37, iter: 977,700, lr:(2.000e-04,)] [eta: 4:48:18, time (data): 0.698 (0.005)] l_pix: 5.8649e-02 
2025-06-13 06:17:08,273 INFO: [train..][epoch: 37, iter: 977,800, lr:(2.000e-04,)] [eta: 4:46:38, time (data): 0.699 (0.005)] l_pix: 3.5338e-02 
2025-06-13 06:18:18,161 INFO: [train..][epoch: 37, iter: 977,900, lr:(2.000e-04,)] [eta: 4:45:00, time (data): 0.697 (0.005)] l_pix: 2.6789e-02 
2025-06-13 06:19:28,149 INFO: [train..][epoch: 37, iter: 978,000, lr:(2.000e-04,)] [eta: 4:43:22, time (data): 0.699 (0.005)] l_pix: 5.6847e-02 
2025-06-13 06:20:37,783 INFO: [train..][epoch: 37, iter: 978,100, lr:(2.000e-04,)] [eta: 4:41:44, time (data): 0.696 (0.005)] l_pix: 4.4449e-02 
2025-06-13 06:21:47,684 INFO: [train..][epoch: 37, iter: 978,200, lr:(2.000e-04,)] [eta: 4:40:08, time (data): 0.698 (0.005)] l_pix: 4.6633e-02 
2025-06-13 06:22:57,488 INFO: [train..][epoch: 37, iter: 978,300, lr:(2.000e-04,)] [eta: 4:38:31, time (data): 0.700 (0.005)] l_pix: 5.5530e-02 
2025-06-13 06:24:07,069 INFO: [train..][epoch: 37, iter: 978,400, lr:(2.000e-04,)] [eta: 4:36:55, time (data): 0.697 (0.005)] l_pix: 4.7081e-02 
2025-06-13 06:25:16,934 INFO: [train..][epoch: 37, iter: 978,500, lr:(2.000e-04,)] [eta: 4:35:20, time (data): 0.700 (0.005)] l_pix: 4.7974e-02 
2025-06-13 06:26:26,437 INFO: [train..][epoch: 37, iter: 978,600, lr:(2.000e-04,)] [eta: 4:33:45, time (data): 0.697 (0.005)] l_pix: 5.7812e-02 
2025-06-13 06:27:36,210 INFO: [train..][epoch: 37, iter: 978,700, lr:(2.000e-04,)] [eta: 4:32:11, time (data): 0.696 (0.005)] l_pix: 3.6960e-02 
2025-06-13 06:28:46,076 INFO: [train..][epoch: 37, iter: 978,800, lr:(2.000e-04,)] [eta: 4:30:38, time (data): 0.698 (0.005)] l_pix: 4.5070e-02 
2025-06-13 06:29:55,961 INFO: [train..][epoch: 37, iter: 978,900, lr:(2.000e-04,)] [eta: 4:29:06, time (data): 0.698 (0.005)] l_pix: 5.3435e-02 
2025-06-13 06:31:06,128 INFO: [train..][epoch: 37, iter: 979,000, lr:(2.000e-04,)] [eta: 4:27:34, time (data): 0.700 (0.005)] l_pix: 5.0915e-02 
2025-06-13 06:32:15,562 INFO: [train..][epoch: 37, iter: 979,100, lr:(2.000e-04,)] [eta: 4:26:02, time (data): 0.696 (0.005)] l_pix: 4.9043e-02 
2025-06-13 06:33:25,203 INFO: [train..][epoch: 37, iter: 979,200, lr:(2.000e-04,)] [eta: 4:24:30, time (data): 0.696 (0.005)] l_pix: 4.6822e-02 
2025-06-13 06:34:34,982 INFO: [train..][epoch: 37, iter: 979,300, lr:(2.000e-04,)] [eta: 4:22:59, time (data): 0.698 (0.005)] l_pix: 5.5317e-02 
2025-06-13 06:35:44,707 INFO: [train..][epoch: 37, iter: 979,400, lr:(2.000e-04,)] [eta: 4:21:29, time (data): 0.698 (0.005)] l_pix: 4.5110e-02 
2025-06-13 06:36:54,357 INFO: [train..][epoch: 37, iter: 979,500, lr:(2.000e-04,)] [eta: 4:19:59, time (data): 0.694 (0.005)] l_pix: 6.3325e-02 
2025-06-13 06:38:04,232 INFO: [train..][epoch: 37, iter: 979,600, lr:(2.000e-04,)] [eta: 4:18:29, time (data): 0.697 (0.005)] l_pix: 5.3876e-02 
2025-06-13 06:39:14,058 INFO: [train..][epoch: 37, iter: 979,700, lr:(2.000e-04,)] [eta: 4:17:00, time (data): 0.698 (0.005)] l_pix: 4.6127e-02 
2025-06-13 06:40:24,165 INFO: [train..][epoch: 37, iter: 979,800, lr:(2.000e-04,)] [eta: 4:15:32, time (data): 0.700 (0.005)] l_pix: 5.6163e-02 
2025-06-13 06:41:34,231 INFO: [train..][epoch: 37, iter: 979,900, lr:(2.000e-04,)] [eta: 4:14:05, time (data): 0.702 (0.005)] l_pix: 4.6663e-02 
2025-06-13 06:42:44,005 INFO: [train..][epoch: 37, iter: 980,000, lr:(2.000e-04,)] [eta: 4:12:37, time (data): 0.699 (0.005)] l_pix: 5.4562e-02 
2025-06-13 06:42:44,005 INFO: Saving models and training states.
2025-06-13 06:48:49,562 INFO: Validation validation
	 # psnr: 27.3437	Best: 27.3437 @ 980000 iter

2025-06-13 06:49:59,656 INFO: [train..][epoch: 37, iter: 980,100, lr:(2.000e-04,)] [eta: 4:23:10, time (data): 0.701 (0.005)] l_pix: 4.7752e-02 
2025-06-13 06:51:09,717 INFO: [train..][epoch: 37, iter: 980,200, lr:(2.000e-04,)] [eta: 4:21:32, time (data): 0.701 (0.005)] l_pix: 5.2382e-02 
2025-06-13 06:52:19,892 INFO: [train..][epoch: 37, iter: 980,300, lr:(2.000e-04,)] [eta: 4:19:56, time (data): 0.702 (0.005)] l_pix: 5.3712e-02 
2025-06-13 06:53:29,562 INFO: [train..][epoch: 37, iter: 980,400, lr:(2.000e-04,)] [eta: 4:18:19, time (data): 0.698 (0.005)] l_pix: 3.6688e-02 
2025-06-13 06:54:39,401 INFO: [train..][epoch: 37, iter: 980,500, lr:(2.000e-04,)] [eta: 4:16:42, time (data): 0.697 (0.005)] l_pix: 4.6510e-02 
2025-06-13 06:55:49,273 INFO: [train..][epoch: 37, iter: 980,600, lr:(2.000e-04,)] [eta: 4:15:07, time (data): 0.698 (0.005)] l_pix: 4.6664e-02 
2025-06-13 06:56:59,259 INFO: [train..][epoch: 37, iter: 980,700, lr:(2.000e-04,)] [eta: 4:13:32, time (data): 0.701 (0.005)] l_pix: 5.2860e-02 
2025-06-13 06:58:09,186 INFO: [train..][epoch: 37, iter: 980,800, lr:(2.000e-04,)] [eta: 4:11:57, time (data): 0.700 (0.005)] l_pix: 4.5580e-02 
2025-06-13 06:59:19,317 INFO: [train..][epoch: 37, iter: 980,900, lr:(2.000e-04,)] [eta: 4:10:23, time (data): 0.702 (0.005)] l_pix: 7.0857e-02 
2025-06-13 07:00:29,139 INFO: [train..][epoch: 37, iter: 981,000, lr:(2.000e-04,)] [eta: 4:08:49, time (data): 0.699 (0.005)] l_pix: 2.7648e-02 
2025-06-13 07:01:39,199 INFO: [train..][epoch: 37, iter: 981,100, lr:(2.000e-04,)] [eta: 4:07:16, time (data): 0.700 (0.005)] l_pix: 4.6963e-02 
2025-06-13 07:02:49,113 INFO: [train..][epoch: 37, iter: 981,200, lr:(2.000e-04,)] [eta: 4:05:43, time (data): 0.699 (0.005)] l_pix: 5.0367e-02 
2025-06-13 07:03:58,966 INFO: [train..][epoch: 37, iter: 981,300, lr:(2.000e-04,)] [eta: 4:04:11, time (data): 0.703 (0.005)] l_pix: 5.9061e-02 
2025-06-13 07:05:08,997 INFO: [train..][epoch: 37, iter: 981,400, lr:(2.000e-04,)] [eta: 4:02:39, time (data): 0.701 (0.005)] l_pix: 3.5612e-02 
2025-06-13 07:06:18,897 INFO: [train..][epoch: 37, iter: 981,500, lr:(2.000e-04,)] [eta: 4:01:07, time (data): 0.700 (0.005)] l_pix: 6.0937e-02 
2025-06-13 07:07:28,836 INFO: [train..][epoch: 37, iter: 981,600, lr:(2.000e-04,)] [eta: 3:59:36, time (data): 0.700 (0.005)] l_pix: 4.7517e-02 
2025-06-13 07:08:38,726 INFO: [train..][epoch: 37, iter: 981,700, lr:(2.000e-04,)] [eta: 3:58:05, time (data): 0.699 (0.005)] l_pix: 5.1633e-02 
2025-06-13 07:09:48,845 INFO: [train..][epoch: 37, iter: 981,800, lr:(2.000e-04,)] [eta: 3:56:34, time (data): 0.701 (0.005)] l_pix: 4.4576e-02 
2025-06-13 07:10:58,900 INFO: [train..][epoch: 37, iter: 981,900, lr:(2.000e-04,)] [eta: 3:55:04, time (data): 0.699 (0.005)] l_pix: 4.4366e-02 
2025-06-13 07:12:08,634 INFO: [train..][epoch: 37, iter: 982,000, lr:(2.000e-04,)] [eta: 3:53:34, time (data): 0.698 (0.005)] l_pix: 4.0371e-02 
2025-06-13 07:13:18,713 INFO: [train..][epoch: 37, iter: 982,100, lr:(2.000e-04,)] [eta: 3:52:05, time (data): 0.699 (0.005)] l_pix: 5.7044e-02 
2025-06-13 07:14:28,556 INFO: [train..][epoch: 37, iter: 982,200, lr:(2.000e-04,)] [eta: 3:50:35, time (data): 0.699 (0.005)] l_pix: 5.2053e-02 
2025-06-13 07:15:38,722 INFO: [train..][epoch: 37, iter: 982,300, lr:(2.000e-04,)] [eta: 3:49:07, time (data): 0.700 (0.005)] l_pix: 4.9539e-02 
2025-06-13 07:16:48,635 INFO: [train..][epoch: 37, iter: 982,400, lr:(2.000e-04,)] [eta: 3:47:38, time (data): 0.699 (0.005)] l_pix: 7.1203e-02 
2025-06-13 07:17:58,428 INFO: [train..][epoch: 37, iter: 982,500, lr:(2.000e-04,)] [eta: 3:46:09, time (data): 0.698 (0.005)] l_pix: 5.0351e-02 
2025-06-13 07:19:08,286 INFO: [train..][epoch: 37, iter: 982,600, lr:(2.000e-04,)] [eta: 3:44:41, time (data): 0.698 (0.005)] l_pix: 5.1710e-02 
2025-06-13 07:20:18,103 INFO: [train..][epoch: 37, iter: 982,700, lr:(2.000e-04,)] [eta: 3:43:13, time (data): 0.696 (0.005)] l_pix: 5.0859e-02 
2025-06-13 07:21:27,805 INFO: [train..][epoch: 37, iter: 982,800, lr:(2.000e-04,)] [eta: 3:41:45, time (data): 0.697 (0.005)] l_pix: 5.9355e-02 
2025-06-13 07:22:37,703 INFO: [train..][epoch: 37, iter: 982,900, lr:(2.000e-04,)] [eta: 3:40:18, time (data): 0.699 (0.005)] l_pix: 4.0997e-02 
2025-06-13 07:23:47,666 INFO: [train..][epoch: 37, iter: 983,000, lr:(2.000e-04,)] [eta: 3:38:51, time (data): 0.699 (0.005)] l_pix: 4.4182e-02 
2025-06-13 07:24:57,691 INFO: [train..][epoch: 37, iter: 983,100, lr:(2.000e-04,)] [eta: 3:37:25, time (data): 0.699 (0.005)] l_pix: 6.0475e-02 
2025-06-13 07:26:07,192 INFO: [train..][epoch: 37, iter: 983,200, lr:(2.000e-04,)] [eta: 3:35:58, time (data): 0.696 (0.005)] l_pix: 4.9784e-02 
2025-06-13 07:27:17,202 INFO: [train..][epoch: 37, iter: 983,300, lr:(2.000e-04,)] [eta: 3:34:32, time (data): 0.701 (0.005)] l_pix: 5.1744e-02 
2025-06-13 07:28:27,034 INFO: [train..][epoch: 37, iter: 983,400, lr:(2.000e-04,)] [eta: 3:33:06, time (data): 0.699 (0.005)] l_pix: 4.8531e-02 
2025-06-13 07:29:36,699 INFO: [train..][epoch: 37, iter: 983,500, lr:(2.000e-04,)] [eta: 3:31:40, time (data): 0.693 (0.005)] l_pix: 3.6582e-02 
2025-06-13 07:30:46,680 INFO: [train..][epoch: 37, iter: 983,600, lr:(2.000e-04,)] [eta: 3:30:14, time (data): 0.698 (0.005)] l_pix: 5.1239e-02 
2025-06-13 07:31:56,781 INFO: [train..][epoch: 37, iter: 983,700, lr:(2.000e-04,)] [eta: 3:28:49, time (data): 0.702 (0.005)] l_pix: 5.0914e-02 
2025-06-13 07:33:06,469 INFO: [train..][epoch: 37, iter: 983,800, lr:(2.000e-04,)] [eta: 3:27:24, time (data): 0.698 (0.005)] l_pix: 5.1543e-02 
2025-06-13 07:34:16,503 INFO: [train..][epoch: 37, iter: 983,900, lr:(2.000e-04,)] [eta: 3:25:59, time (data): 0.706 (0.005)] l_pix: 4.3388e-02 
2025-06-13 07:35:26,296 INFO: [train..][epoch: 37, iter: 984,000, lr:(2.000e-04,)] [eta: 3:24:34, time (data): 0.700 (0.005)] l_pix: 4.4266e-02 
2025-06-13 07:36:36,018 INFO: [train..][epoch: 37, iter: 984,100, lr:(2.000e-04,)] [eta: 3:23:10, time (data): 0.695 (0.005)] l_pix: 4.4563e-02 
2025-06-13 07:37:45,955 INFO: [train..][epoch: 37, iter: 984,200, lr:(2.000e-04,)] [eta: 3:21:46, time (data): 0.698 (0.005)] l_pix: 6.1046e-02 
2025-06-13 07:38:55,678 INFO: [train..][epoch: 37, iter: 984,300, lr:(2.000e-04,)] [eta: 3:20:21, time (data): 0.690 (0.005)] l_pix: 4.6034e-02 
2025-06-13 07:40:05,069 INFO: [train..][epoch: 37, iter: 984,400, lr:(2.000e-04,)] [eta: 3:18:57, time (data): 0.693 (0.005)] l_pix: 4.1677e-02 
2025-06-13 07:41:14,690 INFO: [train..][epoch: 37, iter: 984,500, lr:(2.000e-04,)] [eta: 3:17:33, time (data): 0.700 (0.005)] l_pix: 5.8354e-02 
2025-06-13 07:42:24,438 INFO: [train..][epoch: 37, iter: 984,600, lr:(2.000e-04,)] [eta: 3:16:10, time (data): 0.698 (0.005)] l_pix: 4.1370e-02 
2025-06-13 07:43:34,029 INFO: [train..][epoch: 37, iter: 984,700, lr:(2.000e-04,)] [eta: 3:14:46, time (data): 0.695 (0.005)] l_pix: 4.8987e-02 
2025-06-13 07:44:43,992 INFO: [train..][epoch: 37, iter: 984,800, lr:(2.000e-04,)] [eta: 3:13:23, time (data): 0.699 (0.005)] l_pix: 4.4017e-02 
2025-06-13 07:45:53,665 INFO: [train..][epoch: 37, iter: 984,900, lr:(2.000e-04,)] [eta: 3:12:00, time (data): 0.699 (0.005)] l_pix: 5.7727e-02 
2025-06-13 07:47:03,423 INFO: [train..][epoch: 37, iter: 985,000, lr:(2.000e-04,)] [eta: 3:10:37, time (data): 0.698 (0.005)] l_pix: 5.1471e-02 
2025-06-13 07:47:03,424 INFO: Saving models and training states.
2025-06-13 07:53:08,971 INFO: Validation validation
	 # psnr: 27.3038	Best: 27.3437 @ 980000 iter

2025-06-13 07:54:18,670 INFO: [train..][epoch: 37, iter: 985,100, lr:(2.000e-04,)] [eta: 3:15:15, time (data): 0.700 (0.005)] l_pix: 4.9676e-02 
2025-06-13 07:55:28,268 INFO: [train..][epoch: 37, iter: 985,200, lr:(2.000e-04,)] [eta: 3:13:48, time (data): 0.697 (0.005)] l_pix: 5.0875e-02 
2025-06-13 07:56:37,903 INFO: [train..][epoch: 37, iter: 985,300, lr:(2.000e-04,)] [eta: 3:12:20, time (data): 0.696 (0.005)] l_pix: 5.2589e-02 
2025-06-13 07:57:47,672 INFO: [train..][epoch: 37, iter: 985,400, lr:(2.000e-04,)] [eta: 3:10:54, time (data): 0.697 (0.005)] l_pix: 5.5656e-02 
2025-06-13 07:58:57,548 INFO: [train..][epoch: 37, iter: 985,500, lr:(2.000e-04,)] [eta: 3:09:27, time (data): 0.700 (0.005)] l_pix: 5.4793e-02 
2025-06-13 08:00:07,585 INFO: [train..][epoch: 37, iter: 985,600, lr:(2.000e-04,)] [eta: 3:08:01, time (data): 0.700 (0.005)] l_pix: 5.7249e-02 
2025-06-13 08:01:17,142 INFO: [train..][epoch: 37, iter: 985,700, lr:(2.000e-04,)] [eta: 3:06:35, time (data): 0.704 (0.005)] l_pix: 3.4574e-02 
2025-06-13 08:02:27,010 INFO: [train..][epoch: 37, iter: 985,800, lr:(2.000e-04,)] [eta: 3:05:09, time (data): 0.700 (0.005)] l_pix: 5.3811e-02 
2025-06-13 08:03:36,695 INFO: [train..][epoch: 37, iter: 985,900, lr:(2.000e-04,)] [eta: 3:03:43, time (data): 0.694 (0.005)] l_pix: 4.5024e-02 
2025-06-13 08:04:46,684 INFO: [train..][epoch: 37, iter: 986,000, lr:(2.000e-04,)] [eta: 3:02:18, time (data): 0.699 (0.005)] l_pix: 4.4267e-02 
2025-06-13 08:05:56,325 INFO: [train..][epoch: 37, iter: 986,100, lr:(2.000e-04,)] [eta: 3:00:52, time (data): 0.690 (0.005)] l_pix: 3.2289e-02 
2025-06-13 08:07:06,457 INFO: [train..][epoch: 37, iter: 986,200, lr:(2.000e-04,)] [eta: 2:59:27, time (data): 0.699 (0.005)] l_pix: 3.9409e-02 
2025-06-13 08:08:16,070 INFO: [train..][epoch: 37, iter: 986,300, lr:(2.000e-04,)] [eta: 2:58:02, time (data): 0.701 (0.005)] l_pix: 3.8267e-02 
2025-06-13 08:09:25,977 INFO: [train..][epoch: 37, iter: 986,400, lr:(2.000e-04,)] [eta: 2:56:37, time (data): 0.699 (0.005)] l_pix: 3.6478e-02 
2025-06-13 08:10:35,925 INFO: [train..][epoch: 37, iter: 986,500, lr:(2.000e-04,)] [eta: 2:55:13, time (data): 0.706 (0.005)] l_pix: 5.2254e-02 
2025-06-13 08:11:45,817 INFO: [train..][epoch: 37, iter: 986,600, lr:(2.000e-04,)] [eta: 2:53:49, time (data): 0.700 (0.005)] l_pix: 4.1681e-02 
2025-06-13 08:12:55,731 INFO: [train..][epoch: 37, iter: 986,700, lr:(2.000e-04,)] [eta: 2:52:25, time (data): 0.690 (0.005)] l_pix: 4.1602e-02 
2025-06-13 08:14:05,664 INFO: [train..][epoch: 37, iter: 986,800, lr:(2.000e-04,)] [eta: 2:51:01, time (data): 0.698 (0.005)] l_pix: 4.0080e-02 
2025-06-13 08:15:15,756 INFO: [train..][epoch: 37, iter: 986,900, lr:(2.000e-04,)] [eta: 2:49:37, time (data): 0.693 (0.005)] l_pix: 6.0493e-02 
2025-06-13 08:16:25,591 INFO: [train..][epoch: 37, iter: 987,000, lr:(2.000e-04,)] [eta: 2:48:13, time (data): 0.698 (0.005)] l_pix: 3.4502e-02 
2025-06-13 08:17:35,469 INFO: [train..][epoch: 37, iter: 987,100, lr:(2.000e-04,)] [eta: 2:46:50, time (data): 0.708 (0.005)] l_pix: 4.5935e-02 
2025-06-13 08:18:45,135 INFO: [train..][epoch: 37, iter: 987,200, lr:(2.000e-04,)] [eta: 2:45:26, time (data): 0.698 (0.005)] l_pix: 4.2341e-02 
2025-06-13 08:19:54,947 INFO: [train..][epoch: 37, iter: 987,300, lr:(2.000e-04,)] [eta: 2:44:03, time (data): 0.703 (0.005)] l_pix: 3.4219e-02 
2025-06-13 08:21:04,793 INFO: [train..][epoch: 37, iter: 987,400, lr:(2.000e-04,)] [eta: 2:42:40, time (data): 0.699 (0.005)] l_pix: 5.1752e-02 
2025-06-13 08:22:14,772 INFO: [train..][epoch: 37, iter: 987,500, lr:(2.000e-04,)] [eta: 2:41:17, time (data): 0.695 (0.005)] l_pix: 5.4446e-02 
2025-06-13 08:23:24,736 INFO: [train..][epoch: 37, iter: 987,600, lr:(2.000e-04,)] [eta: 2:39:54, time (data): 0.699 (0.005)] l_pix: 5.6705e-02 
2025-06-13 08:24:34,718 INFO: [train..][epoch: 37, iter: 987,700, lr:(2.000e-04,)] [eta: 2:38:32, time (data): 0.693 (0.005)] l_pix: 3.5458e-02 
2025-06-13 08:25:44,744 INFO: [train..][epoch: 37, iter: 987,800, lr:(2.000e-04,)] [eta: 2:37:09, time (data): 0.699 (0.005)] l_pix: 4.5773e-02 
2025-06-13 08:26:54,442 INFO: [train..][epoch: 37, iter: 987,900, lr:(2.000e-04,)] [eta: 2:35:47, time (data): 0.702 (0.005)] l_pix: 5.1754e-02 
2025-06-13 08:28:04,468 INFO: [train..][epoch: 37, iter: 988,000, lr:(2.000e-04,)] [eta: 2:34:25, time (data): 0.700 (0.005)] l_pix: 5.9754e-02 
2025-06-13 08:29:14,544 INFO: [train..][epoch: 37, iter: 988,100, lr:(2.000e-04,)] [eta: 2:33:03, time (data): 0.710 (0.005)] l_pix: 4.2534e-02 
2025-06-13 08:30:24,178 INFO: [train..][epoch: 37, iter: 988,200, lr:(2.000e-04,)] [eta: 2:31:41, time (data): 0.698 (0.005)] l_pix: 5.3643e-02 
2025-06-13 08:31:34,293 INFO: [train..][epoch: 37, iter: 988,300, lr:(2.000e-04,)] [eta: 2:30:19, time (data): 0.704 (0.005)] l_pix: 5.9827e-02 
2025-06-13 08:32:43,766 INFO: [train..][epoch: 37, iter: 988,400, lr:(2.000e-04,)] [eta: 2:28:57, time (data): 0.696 (0.005)] l_pix: 4.7163e-02 
2025-06-13 08:33:53,926 INFO: [train..][epoch: 37, iter: 988,500, lr:(2.000e-04,)] [eta: 2:27:36, time (data): 0.694 (0.005)] l_pix: 4.0648e-02 
2025-06-13 08:35:03,670 INFO: [train..][epoch: 37, iter: 988,600, lr:(2.000e-04,)] [eta: 2:26:15, time (data): 0.697 (0.005)] l_pix: 4.5556e-02 
2025-06-13 08:36:13,587 INFO: [train..][epoch: 37, iter: 988,700, lr:(2.000e-04,)] [eta: 2:24:53, time (data): 0.699 (0.005)] l_pix: 4.2856e-02 
2025-06-13 08:37:23,480 INFO: [train..][epoch: 37, iter: 988,800, lr:(2.000e-04,)] [eta: 2:23:32, time (data): 0.699 (0.005)] l_pix: 6.2139e-02 
2025-06-13 08:38:33,388 INFO: [train..][epoch: 37, iter: 988,900, lr:(2.000e-04,)] [eta: 2:22:11, time (data): 0.709 (0.005)] l_pix: 4.5843e-02 
2025-06-13 08:39:43,252 INFO: [train..][epoch: 37, iter: 989,000, lr:(2.000e-04,)] [eta: 2:20:50, time (data): 0.699 (0.005)] l_pix: 4.5824e-02 
2025-06-13 08:40:53,239 INFO: [train..][epoch: 37, iter: 989,100, lr:(2.000e-04,)] [eta: 2:19:30, time (data): 0.696 (0.005)] l_pix: 4.2912e-02 
2025-06-13 08:42:03,036 INFO: [train..][epoch: 37, iter: 989,200, lr:(2.000e-04,)] [eta: 2:18:09, time (data): 0.698 (0.005)] l_pix: 5.3170e-02 
2025-06-13 08:43:12,852 INFO: [train..][epoch: 37, iter: 989,300, lr:(2.000e-04,)] [eta: 2:16:48, time (data): 0.684 (0.004)] l_pix: 4.3020e-02 
2025-06-13 08:44:22,807 INFO: [train..][epoch: 37, iter: 989,400, lr:(2.000e-04,)] [eta: 2:15:28, time (data): 0.699 (0.005)] l_pix: 5.3313e-02 
2025-06-13 08:45:32,707 INFO: [train..][epoch: 37, iter: 989,500, lr:(2.000e-04,)] [eta: 2:14:07, time (data): 0.704 (0.005)] l_pix: 4.6440e-02 
2025-06-13 08:46:42,365 INFO: [train..][epoch: 37, iter: 989,600, lr:(2.000e-04,)] [eta: 2:12:47, time (data): 0.697 (0.005)] l_pix: 5.1969e-02 
2025-06-13 08:47:52,035 INFO: [train..][epoch: 37, iter: 989,700, lr:(2.000e-04,)] [eta: 2:11:27, time (data): 0.698 (0.005)] l_pix: 5.0010e-02 
2025-06-13 08:49:02,167 INFO: [train..][epoch: 37, iter: 989,800, lr:(2.000e-04,)] [eta: 2:10:07, time (data): 0.701 (0.005)] l_pix: 4.7148e-02 
2025-06-13 08:50:12,196 INFO: [train..][epoch: 37, iter: 989,900, lr:(2.000e-04,)] [eta: 2:08:47, time (data): 0.680 (0.003)] l_pix: 5.2497e-02 
2025-06-13 08:51:21,836 INFO: [train..][epoch: 37, iter: 990,000, lr:(2.000e-04,)] [eta: 2:07:27, time (data): 0.696 (0.005)] l_pix: 3.1015e-02 
2025-06-13 08:51:21,837 INFO: Saving models and training states.
2025-06-13 08:57:25,840 INFO: Validation validation
	 # psnr: 27.3073	Best: 27.3437 @ 980000 iter

2025-06-13 08:58:36,019 INFO: [train..][epoch: 37, iter: 990,100, lr:(2.000e-04,)] [eta: 2:09:07, time (data): 0.699 (0.005)] l_pix: 5.5221e-02 
2025-06-13 08:59:46,153 INFO: [train..][epoch: 37, iter: 990,200, lr:(2.000e-04,)] [eta: 2:07:45, time (data): 0.701 (0.005)] l_pix: 5.6077e-02 
2025-06-13 09:00:56,521 INFO: [train..][epoch: 37, iter: 990,300, lr:(2.000e-04,)] [eta: 2:06:23, time (data): 0.703 (0.005)] l_pix: 6.0831e-02 
2025-06-13 09:02:06,705 INFO: [train..][epoch: 37, iter: 990,400, lr:(2.000e-04,)] [eta: 2:05:01, time (data): 0.702 (0.005)] l_pix: 4.0926e-02 
2025-06-13 09:03:16,991 INFO: [train..][epoch: 37, iter: 990,500, lr:(2.000e-04,)] [eta: 2:03:39, time (data): 0.702 (0.005)] l_pix: 3.5873e-02 
2025-06-13 09:04:27,082 INFO: [train..][epoch: 37, iter: 990,600, lr:(2.000e-04,)] [eta: 2:02:17, time (data): 0.701 (0.005)] l_pix: 3.4790e-02 
2025-06-13 09:05:37,044 INFO: [train..][epoch: 37, iter: 990,700, lr:(2.000e-04,)] [eta: 2:00:55, time (data): 0.700 (0.005)] l_pix: 5.0987e-02 
2025-06-13 09:06:46,702 INFO: [train..][epoch: 37, iter: 990,800, lr:(2.000e-04,)] [eta: 1:59:34, time (data): 0.696 (0.005)] l_pix: 4.9278e-02 
2025-06-13 09:07:56,696 INFO: [train..][epoch: 37, iter: 990,900, lr:(2.000e-04,)] [eta: 1:58:12, time (data): 0.698 (0.005)] l_pix: 4.7701e-02 
2025-06-13 09:09:06,672 INFO: [train..][epoch: 37, iter: 991,000, lr:(2.000e-04,)] [eta: 1:56:51, time (data): 0.700 (0.005)] l_pix: 3.8128e-02 
2025-06-13 09:10:16,987 INFO: [train..][epoch: 37, iter: 991,100, lr:(2.000e-04,)] [eta: 1:55:30, time (data): 0.701 (0.005)] l_pix: 4.0228e-02 
2025-06-13 09:11:26,838 INFO: [train..][epoch: 37, iter: 991,200, lr:(2.000e-04,)] [eta: 1:54:08, time (data): 0.699 (0.005)] l_pix: 5.8235e-02 
2025-06-13 09:12:36,919 INFO: [train..][epoch: 37, iter: 991,300, lr:(2.000e-04,)] [eta: 1:52:47, time (data): 0.700 (0.005)] l_pix: 5.0602e-02 
2025-06-13 09:13:46,814 INFO: [train..][epoch: 37, iter: 991,400, lr:(2.000e-04,)] [eta: 1:51:27, time (data): 0.698 (0.005)] l_pix: 5.8230e-02 
2025-06-13 09:14:56,665 INFO: [train..][epoch: 37, iter: 991,500, lr:(2.000e-04,)] [eta: 1:50:06, time (data): 0.698 (0.005)] l_pix: 6.7968e-02 
2025-06-13 09:16:06,624 INFO: [train..][epoch: 37, iter: 991,600, lr:(2.000e-04,)] [eta: 1:48:45, time (data): 0.699 (0.005)] l_pix: 4.7379e-02 
2025-06-13 09:17:16,530 INFO: [train..][epoch: 37, iter: 991,700, lr:(2.000e-04,)] [eta: 1:47:24, time (data): 0.699 (0.005)] l_pix: 4.9527e-02 
2025-06-13 09:18:26,235 INFO: [train..][epoch: 37, iter: 991,800, lr:(2.000e-04,)] [eta: 1:46:04, time (data): 0.698 (0.005)] l_pix: 4.2450e-02 
2025-06-13 09:19:36,142 INFO: [train..][epoch: 37, iter: 991,900, lr:(2.000e-04,)] [eta: 1:44:43, time (data): 0.698 (0.005)] l_pix: 4.1568e-02 
2025-06-13 09:20:45,798 INFO: [train..][epoch: 37, iter: 992,000, lr:(2.000e-04,)] [eta: 1:43:23, time (data): 0.697 (0.005)] l_pix: 5.0243e-02 
2025-06-13 09:21:55,799 INFO: [train..][epoch: 37, iter: 992,100, lr:(2.000e-04,)] [eta: 1:42:02, time (data): 0.699 (0.005)] l_pix: 5.0850e-02 
2025-06-13 09:23:05,617 INFO: [train..][epoch: 37, iter: 992,200, lr:(2.000e-04,)] [eta: 1:40:42, time (data): 0.698 (0.005)] l_pix: 5.9465e-02 
2025-06-13 09:24:15,272 INFO: [train..][epoch: 37, iter: 992,300, lr:(2.000e-04,)] [eta: 1:39:22, time (data): 0.697 (0.005)] l_pix: 9.1318e-02 
2025-06-13 09:25:24,963 INFO: [train..][epoch: 37, iter: 992,400, lr:(2.000e-04,)] [eta: 1:38:02, time (data): 0.696 (0.005)] l_pix: 4.2417e-02 
2025-06-13 09:26:35,092 INFO: [train..][epoch: 37, iter: 992,500, lr:(2.000e-04,)] [eta: 1:36:42, time (data): 0.699 (0.005)] l_pix: 4.6018e-02 
2025-06-13 09:27:45,069 INFO: [train..][epoch: 37, iter: 992,600, lr:(2.000e-04,)] [eta: 1:35:22, time (data): 0.700 (0.005)] l_pix: 4.0294e-02 
2025-06-13 09:28:55,014 INFO: [train..][epoch: 37, iter: 992,700, lr:(2.000e-04,)] [eta: 1:34:03, time (data): 0.700 (0.005)] l_pix: 4.5199e-02 
2025-06-13 09:30:05,008 INFO: [train..][epoch: 37, iter: 992,800, lr:(2.000e-04,)] [eta: 1:32:43, time (data): 0.701 (0.005)] l_pix: 4.2079e-02 
2025-06-13 09:31:14,716 INFO: [train..][epoch: 37, iter: 992,900, lr:(2.000e-04,)] [eta: 1:31:23, time (data): 0.699 (0.005)] l_pix: 3.8800e-02 
2025-06-13 09:32:24,660 INFO: [train..][epoch: 37, iter: 993,000, lr:(2.000e-04,)] [eta: 1:30:04, time (data): 0.698 (0.005)] l_pix: 4.0921e-02 
2025-06-13 09:33:34,689 INFO: [train..][epoch: 37, iter: 993,100, lr:(2.000e-04,)] [eta: 1:28:44, time (data): 0.699 (0.005)] l_pix: 3.4084e-02 
2025-06-13 09:34:44,459 INFO: [train..][epoch: 37, iter: 993,200, lr:(2.000e-04,)] [eta: 1:27:25, time (data): 0.698 (0.005)] l_pix: 4.6748e-02 
2025-06-13 09:35:54,339 INFO: [train..][epoch: 37, iter: 993,300, lr:(2.000e-04,)] [eta: 1:26:06, time (data): 0.698 (0.005)] l_pix: 5.4719e-02 
2025-06-13 09:37:03,990 INFO: [train..][epoch: 37, iter: 993,400, lr:(2.000e-04,)] [eta: 1:24:47, time (data): 0.696 (0.005)] l_pix: 4.7437e-02 
2025-06-13 09:38:14,097 INFO: [train..][epoch: 37, iter: 993,500, lr:(2.000e-04,)] [eta: 1:23:28, time (data): 0.699 (0.005)] l_pix: 4.1876e-02 
2025-06-13 09:39:23,746 INFO: [train..][epoch: 37, iter: 993,600, lr:(2.000e-04,)] [eta: 1:22:09, time (data): 0.697 (0.005)] l_pix: 4.9131e-02 
2025-06-13 09:40:33,740 INFO: [train..][epoch: 37, iter: 993,700, lr:(2.000e-04,)] [eta: 1:20:50, time (data): 0.699 (0.005)] l_pix: 4.2729e-02 
2025-06-13 09:41:43,586 INFO: [train..][epoch: 37, iter: 993,800, lr:(2.000e-04,)] [eta: 1:19:31, time (data): 0.699 (0.005)] l_pix: 4.5594e-02 
2025-06-13 09:42:53,197 INFO: [train..][epoch: 37, iter: 993,900, lr:(2.000e-04,)] [eta: 1:18:12, time (data): 0.697 (0.005)] l_pix: 4.7434e-02 
2025-06-13 09:44:03,047 INFO: [train..][epoch: 37, iter: 994,000, lr:(2.000e-04,)] [eta: 1:16:53, time (data): 0.697 (0.005)] l_pix: 4.7363e-02 
2025-06-13 09:45:13,067 INFO: [train..][epoch: 37, iter: 994,100, lr:(2.000e-04,)] [eta: 1:15:35, time (data): 0.699 (0.005)] l_pix: 4.9694e-02 
2025-06-13 09:46:23,071 INFO: [train..][epoch: 37, iter: 994,200, lr:(2.000e-04,)] [eta: 1:14:16, time (data): 0.700 (0.005)] l_pix: 5.0420e-02 
2025-06-13 09:47:33,109 INFO: [train..][epoch: 37, iter: 994,300, lr:(2.000e-04,)] [eta: 1:12:58, time (data): 0.700 (0.005)] l_pix: 6.0487e-02 
2025-06-13 09:48:42,737 INFO: [train..][epoch: 37, iter: 994,400, lr:(2.000e-04,)] [eta: 1:11:39, time (data): 0.699 (0.005)] l_pix: 3.6792e-02 
2025-06-13 09:49:52,742 INFO: [train..][epoch: 37, iter: 994,500, lr:(2.000e-04,)] [eta: 1:10:21, time (data): 0.699 (0.005)] l_pix: 6.9663e-02 
2025-06-13 09:51:02,615 INFO: [train..][epoch: 37, iter: 994,600, lr:(2.000e-04,)] [eta: 1:09:03, time (data): 0.699 (0.005)] l_pix: 5.5088e-02 
2025-06-13 09:52:12,611 INFO: [train..][epoch: 37, iter: 994,700, lr:(2.000e-04,)] [eta: 1:07:44, time (data): 0.699 (0.005)] l_pix: 5.5977e-02 
2025-06-13 09:53:22,728 INFO: [train..][epoch: 37, iter: 994,800, lr:(2.000e-04,)] [eta: 1:06:26, time (data): 0.699 (0.005)] l_pix: 5.0994e-02 
2025-06-13 09:54:32,663 INFO: [train..][epoch: 37, iter: 994,900, lr:(2.000e-04,)] [eta: 1:05:08, time (data): 0.699 (0.005)] l_pix: 3.6409e-02 
2025-06-13 09:56:06,150 INFO: [train..][epoch: 38, iter: 995,000, lr:(2.000e-04,)] [eta: 1:03:55, time (data): 1.009 (0.316)] l_pix: 4.6654e-02 
2025-06-13 09:56:06,150 INFO: Saving models and training states.
2025-06-13 10:02:10,172 INFO: Validation validation
	 # psnr: 27.2801	Best: 27.3437 @ 980000 iter

2025-06-13 10:03:20,030 INFO: [train..][epoch: 38, iter: 995,100, lr:(2.000e-04,)] [eta: 1:03:48, time (data): 0.833 (0.140)] l_pix: 4.2021e-02 
2025-06-13 10:04:29,808 INFO: [train..][epoch: 38, iter: 995,200, lr:(2.000e-04,)] [eta: 1:02:28, time (data): 0.697 (0.005)] l_pix: 4.4362e-02 
2025-06-13 10:05:39,638 INFO: [train..][epoch: 38, iter: 995,300, lr:(2.000e-04,)] [eta: 1:01:09, time (data): 0.698 (0.005)] l_pix: 4.5794e-02 
2025-06-13 10:06:49,487 INFO: [train..][epoch: 38, iter: 995,400, lr:(2.000e-04,)] [eta: 0:59:49, time (data): 0.700 (0.005)] l_pix: 5.3091e-02 
2025-06-13 10:07:59,187 INFO: [train..][epoch: 38, iter: 995,500, lr:(2.000e-04,)] [eta: 0:58:29, time (data): 0.698 (0.005)] l_pix: 3.4953e-02 
2025-06-13 10:09:09,136 INFO: [train..][epoch: 38, iter: 995,600, lr:(2.000e-04,)] [eta: 0:57:10, time (data): 0.698 (0.005)] l_pix: 6.1213e-02 
2025-06-13 10:10:19,247 INFO: [train..][epoch: 38, iter: 995,700, lr:(2.000e-04,)] [eta: 0:55:51, time (data): 0.700 (0.005)] l_pix: 5.3516e-02 
2025-06-13 10:11:29,362 INFO: [train..][epoch: 38, iter: 995,800, lr:(2.000e-04,)] [eta: 0:54:32, time (data): 0.699 (0.005)] l_pix: 5.1032e-02 
2025-06-13 10:12:39,383 INFO: [train..][epoch: 38, iter: 995,900, lr:(2.000e-04,)] [eta: 0:53:12, time (data): 0.700 (0.005)] l_pix: 4.0517e-02 
2025-06-13 10:13:49,485 INFO: [train..][epoch: 38, iter: 996,000, lr:(2.000e-04,)] [eta: 0:51:53, time (data): 0.702 (0.005)] l_pix: 5.5236e-02 
2025-06-13 10:14:59,576 INFO: [train..][epoch: 38, iter: 996,100, lr:(2.000e-04,)] [eta: 0:50:34, time (data): 0.701 (0.005)] l_pix: 4.4698e-02 
2025-06-13 10:16:09,180 INFO: [train..][epoch: 38, iter: 996,200, lr:(2.000e-04,)] [eta: 0:49:15, time (data): 0.696 (0.005)] l_pix: 4.5860e-02 
2025-06-13 10:17:19,194 INFO: [train..][epoch: 38, iter: 996,300, lr:(2.000e-04,)] [eta: 0:47:56, time (data): 0.699 (0.005)] l_pix: 4.8290e-02 
2025-06-13 10:18:29,121 INFO: [train..][epoch: 38, iter: 996,400, lr:(2.000e-04,)] [eta: 0:46:37, time (data): 0.698 (0.005)] l_pix: 4.5846e-02 
2025-06-13 10:19:39,063 INFO: [train..][epoch: 38, iter: 996,500, lr:(2.000e-04,)] [eta: 0:45:19, time (data): 0.699 (0.005)] l_pix: 6.3233e-02 
2025-06-13 10:20:48,840 INFO: [train..][epoch: 38, iter: 996,600, lr:(2.000e-04,)] [eta: 0:44:00, time (data): 0.694 (0.005)] l_pix: 5.2624e-02 
2025-06-13 10:21:58,787 INFO: [train..][epoch: 38, iter: 996,700, lr:(2.000e-04,)] [eta: 0:42:41, time (data): 0.697 (0.005)] l_pix: 5.3443e-02 
2025-06-13 10:23:08,681 INFO: [train..][epoch: 38, iter: 996,800, lr:(2.000e-04,)] [eta: 0:41:23, time (data): 0.699 (0.005)] l_pix: 5.1440e-02 
2025-06-13 10:24:18,405 INFO: [train..][epoch: 38, iter: 996,900, lr:(2.000e-04,)] [eta: 0:40:04, time (data): 0.698 (0.005)] l_pix: 4.9696e-02 
2025-06-13 10:25:28,045 INFO: [train..][epoch: 38, iter: 997,000, lr:(2.000e-04,)] [eta: 0:38:46, time (data): 0.698 (0.005)] l_pix: 3.8444e-02 
2025-06-13 10:26:38,272 INFO: [train..][epoch: 38, iter: 997,100, lr:(2.000e-04,)] [eta: 0:37:27, time (data): 0.701 (0.005)] l_pix: 4.2571e-02 
2025-06-13 10:27:48,405 INFO: [train..][epoch: 38, iter: 997,200, lr:(2.000e-04,)] [eta: 0:36:09, time (data): 0.700 (0.005)] l_pix: 5.1519e-02 
2025-06-13 10:28:58,587 INFO: [train..][epoch: 38, iter: 997,300, lr:(2.000e-04,)] [eta: 0:34:51, time (data): 0.701 (0.005)] l_pix: 4.7795e-02 
2025-06-13 10:30:08,430 INFO: [train..][epoch: 38, iter: 997,400, lr:(2.000e-04,)] [eta: 0:33:33, time (data): 0.696 (0.005)] l_pix: 5.5411e-02 
2025-06-13 10:31:18,181 INFO: [train..][epoch: 38, iter: 997,500, lr:(2.000e-04,)] [eta: 0:32:14, time (data): 0.697 (0.005)] l_pix: 4.6346e-02 
2025-06-13 10:32:28,244 INFO: [train..][epoch: 38, iter: 997,600, lr:(2.000e-04,)] [eta: 0:30:56, time (data): 0.700 (0.006)] l_pix: 4.0224e-02 
2025-06-13 10:33:38,267 INFO: [train..][epoch: 38, iter: 997,700, lr:(2.000e-04,)] [eta: 0:29:38, time (data): 0.700 (0.006)] l_pix: 4.7180e-02 
2025-06-13 10:34:48,162 INFO: [train..][epoch: 38, iter: 997,800, lr:(2.000e-04,)] [eta: 0:28:20, time (data): 0.697 (0.006)] l_pix: 5.0579e-02 
2025-06-13 10:35:57,569 INFO: [train..][epoch: 38, iter: 997,900, lr:(2.000e-04,)] [eta: 0:27:02, time (data): 0.695 (0.006)] l_pix: 4.0303e-02 
2025-06-13 10:37:07,524 INFO: [train..][epoch: 38, iter: 998,000, lr:(2.000e-04,)] [eta: 0:25:45, time (data): 0.703 (0.005)] l_pix: 5.2506e-02 
2025-06-13 10:38:17,468 INFO: [train..][epoch: 38, iter: 998,100, lr:(2.000e-04,)] [eta: 0:24:27, time (data): 0.701 (0.005)] l_pix: 5.5571e-02 
2025-06-13 10:39:27,521 INFO: [train..][epoch: 38, iter: 998,200, lr:(2.000e-04,)] [eta: 0:23:09, time (data): 0.699 (0.005)] l_pix: 4.3088e-02 
2025-06-13 10:40:37,292 INFO: [train..][epoch: 38, iter: 998,300, lr:(2.000e-04,)] [eta: 0:21:51, time (data): 0.698 (0.005)] l_pix: 3.9601e-02 
2025-06-13 10:41:47,329 INFO: [train..][epoch: 38, iter: 998,400, lr:(2.000e-04,)] [eta: 0:20:34, time (data): 0.700 (0.005)] l_pix: 3.2852e-02 
2025-06-13 10:42:57,139 INFO: [train..][epoch: 38, iter: 998,500, lr:(2.000e-04,)] [eta: 0:19:16, time (data): 0.699 (0.005)] l_pix: 3.2745e-02 
2025-06-13 10:44:06,897 INFO: [train..][epoch: 38, iter: 998,600, lr:(2.000e-04,)] [eta: 0:17:59, time (data): 0.697 (0.005)] l_pix: 3.9746e-02 
2025-06-13 10:45:16,660 INFO: [train..][epoch: 38, iter: 998,700, lr:(2.000e-04,)] [eta: 0:16:41, time (data): 0.698 (0.005)] l_pix: 4.4874e-02 
2025-06-13 10:46:26,473 INFO: [train..][epoch: 38, iter: 998,800, lr:(2.000e-04,)] [eta: 0:15:24, time (data): 0.698 (0.005)] l_pix: 5.2678e-02 
2025-06-13 10:47:36,249 INFO: [train..][epoch: 38, iter: 998,900, lr:(2.000e-04,)] [eta: 0:14:06, time (data): 0.698 (0.005)] l_pix: 3.6998e-02 
2025-06-13 10:48:46,129 INFO: [train..][epoch: 38, iter: 999,000, lr:(2.000e-04,)] [eta: 0:12:49, time (data): 0.697 (0.005)] l_pix: 5.0110e-02 
2025-06-13 10:49:56,279 INFO: [train..][epoch: 38, iter: 999,100, lr:(2.000e-04,)] [eta: 0:11:32, time (data): 0.700 (0.005)] l_pix: 3.9227e-02 
2025-06-13 10:51:05,976 INFO: [train..][epoch: 38, iter: 999,200, lr:(2.000e-04,)] [eta: 0:10:15, time (data): 0.696 (0.005)] l_pix: 5.3526e-02 
2025-06-13 10:52:15,846 INFO: [train..][epoch: 38, iter: 999,300, lr:(2.000e-04,)] [eta: 0:08:57, time (data): 0.698 (0.005)] l_pix: 5.0621e-02 
2025-06-13 10:53:25,865 INFO: [train..][epoch: 38, iter: 999,400, lr:(2.000e-04,)] [eta: 0:07:40, time (data): 0.700 (0.005)] l_pix: 4.7790e-02 
2025-06-13 10:54:35,845 INFO: [train..][epoch: 38, iter: 999,500, lr:(2.000e-04,)] [eta: 0:06:23, time (data): 0.700 (0.005)] l_pix: 4.1017e-02 
2025-06-13 10:55:45,693 INFO: [train..][epoch: 38, iter: 999,600, lr:(2.000e-04,)] [eta: 0:05:06, time (data): 0.701 (0.006)] l_pix: 3.0991e-02 
2025-06-13 10:56:55,645 INFO: [train..][epoch: 38, iter: 999,700, lr:(2.000e-04,)] [eta: 0:03:49, time (data): 0.700 (0.005)] l_pix: 4.4553e-02 
2025-06-13 10:58:05,591 INFO: [train..][epoch: 38, iter: 999,800, lr:(2.000e-04,)] [eta: 0:02:32, time (data): 0.700 (0.005)] l_pix: 3.4019e-02 
2025-06-13 10:59:15,511 INFO: [train..][epoch: 38, iter: 999,900, lr:(2.000e-04,)] [eta: 0:01:16, time (data): 0.700 (0.005)] l_pix: 3.4143e-02 
2025-06-13 11:00:25,587 INFO: [train..][epoch: 38, iter:1,000,000, lr:(2.000e-04,)] [eta: 0:00:00, time (data): 0.702 (0.006)] l_pix: 4.6870e-02 
2025-06-13 11:00:25,587 INFO: Saving models and training states.
2025-06-13 11:06:30,132 INFO: Validation validation
	 # psnr: 27.2301	Best: 27.3437 @ 980000 iter

2025-06-13 11:07:39,209 INFO: End of training. Time consumed: 6:30:52
2025-06-13 11:07:39,209 INFO: Save the latest model.
2025-06-13 11:13:42,995 INFO: Validation validation
	 # psnr: 27.2301	Best: 27.3437 @ 980000 iter

