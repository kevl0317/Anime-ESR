2025-05-22 20:10:16,728 INFO: 
                ____                _       _____  ____
               / __ ) ____ _ _____ (_)_____/ ___/ / __ \
              / __  |/ __ `// ___// // ___/\__ \ / /_/ /
             / /_/ // /_/ /(__  )/ // /__ ___/ // _, _/
            /_____/ \__,_//____//_/ \___//____//_/ |_|
     ______                   __   __                 __      __
    / ____/____   ____   ____/ /  / /   __  __ _____ / /__   / /
   / / __ / __ \ / __ \ / __  /  / /   / / / // ___// //_/  / /
  / /_/ // /_/ // /_/ // /_/ /  / /___/ /_/ // /__ / /<    /_/
  \____/ \____/ \____/ \____/  /_____/\____/ \___//_/|_|  (_)
    
Version Information: 
	BasicSR: 1.4.2
	PyTorch: 2.7.0+cu128
	TorchVision: 0.22.0+cu128
2025-05-22 20:10:16,728 INFO: 
  name: train_anime_RealESRNetx4plus_1000k_B12G4
  model_type: RealESRNetModel
  scale: 4
  num_gpu: 1
  manual_seed: 0
  gt_usm: True
  resize_prob: [0.2, 0.7, 0.1]
  resize_range: [0.15, 1.5]
  gaussian_noise_prob: 0.5
  noise_range: [1, 30]
  poisson_scale_range: [0.05, 3]
  gray_noise_prob: 0.4
  jpeg_range: [30, 95]
  second_blur_prob: 0.8
  resize_prob2: [0.3, 0.4, 0.3]
  resize_range2: [0.3, 1.2]
  gaussian_noise_prob2: 0.5
  noise_range2: [1, 25]
  poisson_scale_range2: [0.05, 2.5]
  gray_noise_prob2: 0.4
  jpeg_range2: [30, 95]
  gt_size: 256
  queue_size: 320
  datasets:[
    train:[
      name: Anime
      type: RealESRGANDataset
      dataroot_gt: datasets/anime
      meta_info: datasets/anime/meta_info_train.txt
      io_backend:[
        type: disk
      ]
      blur_kernel_size: 21
      kernel_list: ['iso', 'aniso', 'generalized_iso', 'generalized_aniso', 'plateau_iso', 'plateau_aniso']
      kernel_prob: [0.45, 0.25, 0.12, 0.03, 0.12, 0.03]
      sinc_prob: 0.1
      blur_sigma: [0.2, 3]
      betag_range: [0.5, 4]
      betap_range: [1, 2]
      blur_kernel_size2: 21
      kernel_list2: ['iso', 'aniso', 'generalized_iso', 'generalized_aniso', 'plateau_iso', 'plateau_aniso']
      kernel_prob2: [0.45, 0.25, 0.12, 0.03, 0.12, 0.03]
      sinc_prob2: 0.1
      blur_sigma2: [0.2, 1.5]
      betag_range2: [0.5, 4]
      betap_range2: [1, 2]
      final_sinc_prob: 0.8
      gt_size: 256
      use_hflip: True
      use_rot: False
      use_shuffle: True
      num_worker_per_gpu: 5
      batch_size_per_gpu: 16
      dataset_enlarge_ratio: 1
      prefetch_mode: None
      phase: train
      scale: 4
    ]
    val:[
      name: validation
      type: PairedImageDataset
      dataroot_gt: datasets/anime/galData_val
      dataroot_lq: datasets/anime/galData_val_lr_x4_bicubic
      io_backend:[
        type: disk
      ]
      phase: val
      scale: 4
    ]
  ]
  network_g:[
    type: RRDBNet
    num_in_ch: 3
    num_out_ch: 3
    num_feat: 64
    num_block: 23
    num_grow_ch: 32
  ]
  path:[
    pretrain_network_g: G:\AI\Anime-ESR\experiments\train_anime_RealESRNetx4plus_1000k_B12G4\models\net_g_150000.pth
    param_key_g: params
    strict_load_g: True
    resume_state: experiments\train_anime_RealESRNetx4plus_1000k_B12G4\training_states\150000.state
    experiments_root: G:\AI\Anime-ESR\experiments\train_anime_RealESRNetx4plus_1000k_B12G4
    models: G:\AI\Anime-ESR\experiments\train_anime_RealESRNetx4plus_1000k_B12G4\models
    training_states: G:\AI\Anime-ESR\experiments\train_anime_RealESRNetx4plus_1000k_B12G4\training_states
    log: G:\AI\Anime-ESR\experiments\train_anime_RealESRNetx4plus_1000k_B12G4
    visualization: G:\AI\Anime-ESR\experiments\train_anime_RealESRNetx4plus_1000k_B12G4\visualization
  ]
  train:[
    ema_decay: 0.999
    optim_g:[
      type: Adam
      lr: 0.0002
      weight_decay: 0
      betas: [0.9, 0.99]
    ]
    scheduler:[
      type: MultiStepLR
      milestones: [1000000]
      gamma: 0.5
    ]
    total_iter: 1000000
    warmup_iter: -1
    pixel_opt:[
      type: L1Loss
      loss_weight: 1.0
      reduction: mean
    ]
  ]
  val:[
    val_freq: 5000.0
    save_img: True
    metrics:[
      psnr:[
        type: calculate_psnr
        crop_border: 4
        test_y_channel: False
      ]
    ]
  ]
  logger:[
    print_freq: 100
    save_checkpoint_freq: 5000.0
    use_tb_logger: True
    wandb:[
      project: None
      resume_id: None
    ]
  ]
  dist_params:[
    backend: nccl
    port: 29500
  ]
  dist: False
  rank: 0
  world_size: 1
  auto_resume: True
  is_train: True
  root_path: G:\AI\Anime-ESR

2025-05-22 20:10:17,363 INFO: Dataset [RealESRGANDataset] - Anime is built.
2025-05-22 20:10:17,364 INFO: Training statistics:
	Number of train images: 299263
	Dataset enlarge ratio: 1
	Batch size per gpu: 16
	World size (gpu number): 1
	Require iter number per epoch: 18704
	Total epochs: 54; iters: 1000000.
2025-05-22 20:10:17,385 INFO: Dataset [PairedImageDataset] - validation is built.
2025-05-22 20:10:17,385 INFO: Number of val images/folders in validation: 488
2025-05-22 20:10:17,554 INFO: Network [RRDBNet] is created.
2025-05-22 20:10:17,593 INFO: Network: RRDBNet, with parameters: 16,697,987
2025-05-22 20:10:17,593 INFO: RRDBNet(
  (conv_first): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (body): Sequential(
    (0): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (5): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (6): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (7): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (8): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (9): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (10): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (11): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (12): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (13): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (14): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (15): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (16): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (17): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (18): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (19): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (20): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (21): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (22): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
  (conv_body): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv_up1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv_up2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv_hr): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv_last): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
)
2025-05-22 20:10:17,737 INFO: Loading RRDBNet model from G:\AI\Anime-ESR\experiments\train_anime_RealESRNetx4plus_1000k_B12G4\models\net_g_150000.pth, with param key: [params].
2025-05-22 20:10:17,833 INFO: Use Exponential Moving Average with decay: 0.999
2025-05-22 20:10:17,976 INFO: Network [RRDBNet] is created.
2025-05-22 20:10:18,139 INFO: Loading RRDBNet model from G:\AI\Anime-ESR\experiments\train_anime_RealESRNetx4plus_1000k_B12G4\models\net_g_150000.pth, with param key: [params_ema].
2025-05-22 20:10:18,222 INFO: Loss [L1Loss] is created.
2025-05-22 20:10:18,234 INFO: Model [RealESRNetModel] is created.
2025-05-22 20:10:18,241 INFO: Resuming training from epoch: 7, iter: 150000.
2025-05-22 20:10:33,872 INFO: Start training from epoch: 7, iter: 150000
2025-05-22 20:12:27,472 INFO: [train..][epoch:  7, iter: 150,100, lr:(2.000e-04,)] [eta: 12 days, 14:04:17, time (data): 1.136 (0.167)] l_pix: 4.5717e-02 
2025-05-22 20:13:57,714 INFO: [train..][epoch:  7, iter: 150,200, lr:(2.000e-04,)] [eta: 10 days, 17:45:02, time (data): 1.019 (0.086)] l_pix: 5.4320e-02 
2025-05-22 20:15:28,130 INFO: [train..][epoch:  7, iter: 150,300, lr:(2.000e-04,)] [eta: 10 days, 2:59:52, time (data): 0.904 (0.005)] l_pix: 5.0728e-02 
2025-05-22 20:16:58,339 INFO: [train..][epoch:  7, iter: 150,400, lr:(2.000e-04,)] [eta: 9 days, 19:28:08, time (data): 0.903 (0.005)] l_pix: 5.2812e-02 
2025-05-22 20:18:28,637 INFO: [train..][epoch:  7, iter: 150,500, lr:(2.000e-04,)] [eta: 9 days, 14:58:38, time (data): 0.903 (0.005)] l_pix: 4.1237e-02 
2025-05-22 20:19:58,965 INFO: [train..][epoch:  7, iter: 150,600, lr:(2.000e-04,)] [eta: 9 days, 11:59:03, time (data): 0.903 (0.005)] l_pix: 4.9785e-02 
2025-05-22 20:21:29,729 INFO: [train..][epoch:  7, iter: 150,700, lr:(2.000e-04,)] [eta: 9 days, 9:59:03, time (data): 0.908 (0.005)] l_pix: 4.8143e-02 
2025-05-22 20:22:59,798 INFO: [train..][epoch:  7, iter: 150,800, lr:(2.000e-04,)] [eta: 9 days, 8:16:22, time (data): 0.904 (0.005)] l_pix: 6.1969e-02 
2025-05-22 20:24:29,845 INFO: [train..][epoch:  7, iter: 150,900, lr:(2.000e-04,)] [eta: 9 days, 6:55:48, time (data): 0.901 (0.005)] l_pix: 4.3514e-02 
2025-05-22 20:25:59,733 INFO: [train..][epoch:  7, iter: 151,000, lr:(2.000e-04,)] [eta: 9 days, 5:48:46, time (data): 0.900 (0.005)] l_pix: 4.5890e-02 
2025-05-22 20:27:29,803 INFO: [train..][epoch:  7, iter: 151,100, lr:(2.000e-04,)] [eta: 9 days, 4:56:00, time (data): 0.901 (0.005)] l_pix: 4.8892e-02 
2025-05-22 20:28:59,734 INFO: [train..][epoch:  7, iter: 151,200, lr:(2.000e-04,)] [eta: 9 days, 4:10:08, time (data): 0.900 (0.005)] l_pix: 5.7541e-02 
2025-05-22 20:30:29,645 INFO: [train..][epoch:  7, iter: 151,300, lr:(2.000e-04,)] [eta: 9 days, 3:30:51, time (data): 0.899 (0.005)] l_pix: 4.9279e-02 
2025-05-22 20:31:59,475 INFO: [train..][epoch:  7, iter: 151,400, lr:(2.000e-04,)] [eta: 9 days, 2:56:09, time (data): 0.899 (0.005)] l_pix: 4.3027e-02 
2025-05-22 20:33:29,318 INFO: [train..][epoch:  7, iter: 151,500, lr:(2.000e-04,)] [eta: 9 days, 2:26:00, time (data): 0.898 (0.004)] l_pix: 3.9926e-02 
2025-05-22 20:34:59,399 INFO: [train..][epoch:  7, iter: 151,600, lr:(2.000e-04,)] [eta: 9 days, 2:01:32, time (data): 0.900 (0.004)] l_pix: 4.5242e-02 
2025-05-22 20:36:29,527 INFO: [train..][epoch:  7, iter: 151,700, lr:(2.000e-04,)] [eta: 9 days, 1:40:09, time (data): 0.902 (0.005)] l_pix: 5.0605e-02 
2025-05-22 20:37:59,456 INFO: [train..][epoch:  7, iter: 151,800, lr:(2.000e-04,)] [eta: 9 days, 1:19:25, time (data): 0.900 (0.005)] l_pix: 5.9817e-02 
2025-05-22 20:39:29,415 INFO: [train..][epoch:  7, iter: 151,900, lr:(2.000e-04,)] [eta: 9 days, 1:00:56, time (data): 0.900 (0.005)] l_pix: 4.7146e-02 
2025-05-22 20:40:59,245 INFO: [train..][epoch:  7, iter: 152,000, lr:(2.000e-04,)] [eta: 9 days, 0:43:14, time (data): 0.899 (0.005)] l_pix: 3.8280e-02 
2025-05-22 20:42:29,031 INFO: [train..][epoch:  7, iter: 152,100, lr:(2.000e-04,)] [eta: 9 days, 0:26:47, time (data): 0.898 (0.005)] l_pix: 4.0321e-02 
2025-05-22 20:43:59,111 INFO: [train..][epoch:  7, iter: 152,200, lr:(2.000e-04,)] [eta: 9 days, 0:13:35, time (data): 0.899 (0.005)] l_pix: 5.3894e-02 
2025-05-22 20:45:30,810 INFO: [train..][epoch:  7, iter: 152,300, lr:(2.000e-04,)] [eta: 9 days, 0:11:20, time (data): 0.919 (0.006)] l_pix: 6.1307e-02 
2025-05-22 20:47:03,562 INFO: [train..][epoch:  7, iter: 152,400, lr:(2.000e-04,)] [eta: 9 days, 0:15:20, time (data): 0.923 (0.006)] l_pix: 4.0824e-02 
2025-05-22 20:48:35,228 INFO: [train..][epoch:  7, iter: 152,500, lr:(2.000e-04,)] [eta: 9 days, 0:12:46, time (data): 0.917 (0.006)] l_pix: 5.5606e-02 
2025-05-22 20:50:07,924 INFO: [train..][epoch:  7, iter: 152,600, lr:(2.000e-04,)] [eta: 9 days, 0:15:52, time (data): 0.922 (0.006)] l_pix: 5.4235e-02 
2025-05-22 20:51:40,528 INFO: [train..][epoch:  7, iter: 152,700, lr:(2.000e-04,)] [eta: 9 days, 0:18:09, time (data): 0.927 (0.006)] l_pix: 5.1199e-02 
2025-05-22 20:53:18,094 INFO: [train..][epoch:  7, iter: 152,800, lr:(2.000e-04,)] [eta: 9 days, 0:45:10, time (data): 0.953 (0.006)] l_pix: 5.5084e-02 
2025-05-22 20:55:01,498 INFO: [train..][epoch:  7, iter: 152,900, lr:(2.000e-04,)] [eta: 9 days, 1:38:37, time (data): 1.021 (0.006)] l_pix: 6.1259e-02 
2025-05-22 20:56:35,405 INFO: [train..][epoch:  7, iter: 153,000, lr:(2.000e-04,)] [eta: 9 days, 1:43:43, time (data): 0.977 (0.006)] l_pix: 5.8224e-02 
2025-05-22 20:58:07,581 INFO: [train..][epoch:  7, iter: 153,100, lr:(2.000e-04,)] [eta: 9 days, 1:40:31, time (data): 0.925 (0.006)] l_pix: 5.1723e-02 
2025-05-22 20:59:37,156 INFO: [train..][epoch:  7, iter: 153,200, lr:(2.000e-04,)] [eta: 9 days, 1:25:57, time (data): 0.909 (0.006)] l_pix: 4.7091e-02 
2025-05-22 21:01:06,524 INFO: [train..][epoch:  7, iter: 153,300, lr:(2.000e-04,)] [eta: 9 days, 1:11:17, time (data): 0.893 (0.006)] l_pix: 4.8395e-02 
2025-05-22 21:02:35,502 INFO: [train..][epoch:  7, iter: 153,400, lr:(2.000e-04,)] [eta: 9 days, 0:55:47, time (data): 0.891 (0.006)] l_pix: 4.4387e-02 
2025-05-22 21:04:04,603 INFO: [train..][epoch:  7, iter: 153,500, lr:(2.000e-04,)] [eta: 9 days, 0:41:35, time (data): 0.892 (0.006)] l_pix: 5.3663e-02 
2025-05-22 21:05:33,543 INFO: [train..][epoch:  7, iter: 153,600, lr:(2.000e-04,)] [eta: 9 days, 0:27:26, time (data): 0.891 (0.006)] l_pix: 5.0652e-02 
2025-05-22 21:07:02,715 INFO: [train..][epoch:  7, iter: 153,700, lr:(2.000e-04,)] [eta: 9 days, 0:14:53, time (data): 0.892 (0.006)] l_pix: 4.5484e-02 
2025-05-22 21:08:31,922 INFO: [train..][epoch:  7, iter: 153,800, lr:(2.000e-04,)] [eta: 9 days, 0:03:02, time (data): 0.892 (0.006)] l_pix: 5.6592e-02 
2025-05-22 21:10:00,946 INFO: [train..][epoch:  7, iter: 153,900, lr:(2.000e-04,)] [eta: 8 days, 23:51:03, time (data): 0.890 (0.006)] l_pix: 6.2686e-02 
2025-05-22 21:11:29,652 INFO: [train..][epoch:  7, iter: 154,000, lr:(2.000e-04,)] [eta: 8 days, 23:38:28, time (data): 0.889 (0.006)] l_pix: 4.5918e-02 
2025-05-22 21:12:59,012 INFO: [train..][epoch:  7, iter: 154,100, lr:(2.000e-04,)] [eta: 8 days, 23:28:41, time (data): 0.893 (0.006)] l_pix: 5.4731e-02 
2025-05-22 21:14:27,818 INFO: [train..][epoch:  7, iter: 154,200, lr:(2.000e-04,)] [eta: 8 days, 23:17:26, time (data): 0.890 (0.006)] l_pix: 4.2762e-02 
2025-05-22 21:15:56,596 INFO: [train..][epoch:  7, iter: 154,300, lr:(2.000e-04,)] [eta: 8 days, 23:06:32, time (data): 0.887 (0.006)] l_pix: 4.9068e-02 
2025-05-22 21:17:25,521 INFO: [train..][epoch:  7, iter: 154,400, lr:(2.000e-04,)] [eta: 8 days, 22:56:33, time (data): 0.888 (0.006)] l_pix: 5.2098e-02 
2025-05-22 21:18:54,222 INFO: [train..][epoch:  7, iter: 154,500, lr:(2.000e-04,)] [eta: 8 days, 22:46:14, time (data): 0.886 (0.006)] l_pix: 6.7520e-02 
2025-05-22 21:20:22,967 INFO: [train..][epoch:  7, iter: 154,600, lr:(2.000e-04,)] [eta: 8 days, 22:36:26, time (data): 0.887 (0.006)] l_pix: 4.8198e-02 
2025-05-22 21:21:52,790 INFO: [train..][epoch:  7, iter: 154,700, lr:(2.000e-04,)] [eta: 8 days, 22:30:14, time (data): 0.899 (0.006)] l_pix: 4.8823e-02 
2025-05-22 21:23:22,624 INFO: [train..][epoch:  7, iter: 154,800, lr:(2.000e-04,)] [eta: 8 days, 22:24:15, time (data): 0.899 (0.006)] l_pix: 5.7306e-02 
2025-05-22 21:24:51,532 INFO: [train..][epoch:  7, iter: 154,900, lr:(2.000e-04,)] [eta: 8 days, 22:15:47, time (data): 0.889 (0.006)] l_pix: 3.5875e-02 
2025-05-22 21:26:20,562 INFO: [train..][epoch:  7, iter: 155,000, lr:(2.000e-04,)] [eta: 8 days, 22:07:57, time (data): 0.890 (0.006)] l_pix: 5.3058e-02 
2025-05-22 21:26:20,562 INFO: Saving models and training states.
2025-05-22 21:35:41,747 INFO: Validation validation
	 # psnr: 26.9726	Best: 26.9726 @ 155000 iter

2025-05-22 21:37:10,926 INFO: [train..][epoch:  7, iter: 155,100, lr:(2.000e-04,)] [eta: 9 days, 23:49:57, time (data): 0.889 (0.006)] l_pix: 4.2158e-02 
2025-05-22 21:38:39,454 INFO: [train..][epoch:  7, iter: 155,200, lr:(2.000e-04,)] [eta: 9 days, 23:11:16, time (data): 0.887 (0.006)] l_pix: 4.5143e-02 
2025-05-22 21:40:08,450 INFO: [train..][epoch:  7, iter: 155,300, lr:(2.000e-04,)] [eta: 9 days, 22:35:14, time (data): 0.890 (0.006)] l_pix: 5.3241e-02 
2025-05-22 21:41:37,791 INFO: [train..][epoch:  7, iter: 155,400, lr:(2.000e-04,)] [eta: 9 days, 22:01:22, time (data): 0.892 (0.006)] l_pix: 5.2901e-02 
2025-05-22 21:43:06,975 INFO: [train..][epoch:  7, iter: 155,500, lr:(2.000e-04,)] [eta: 9 days, 21:28:17, time (data): 0.892 (0.006)] l_pix: 6.0196e-02 
2025-05-22 21:44:36,336 INFO: [train..][epoch:  7, iter: 155,600, lr:(2.000e-04,)] [eta: 9 days, 20:56:46, time (data): 0.893 (0.006)] l_pix: 4.6539e-02 
2025-05-22 21:46:05,310 INFO: [train..][epoch:  7, iter: 155,700, lr:(2.000e-04,)] [eta: 9 days, 20:25:21, time (data): 0.890 (0.006)] l_pix: 4.1853e-02 
2025-05-22 21:47:34,566 INFO: [train..][epoch:  7, iter: 155,800, lr:(2.000e-04,)] [eta: 9 days, 19:55:39, time (data): 0.891 (0.006)] l_pix: 4.0380e-02 
2025-05-22 21:49:03,676 INFO: [train..][epoch:  7, iter: 155,900, lr:(2.000e-04,)] [eta: 9 days, 19:26:34, time (data): 0.891 (0.006)] l_pix: 3.7859e-02 
2025-05-22 21:50:32,978 INFO: [train..][epoch:  7, iter: 156,000, lr:(2.000e-04,)] [eta: 9 days, 18:58:51, time (data): 0.892 (0.006)] l_pix: 5.9062e-02 
2025-05-22 21:52:01,812 INFO: [train..][epoch:  7, iter: 156,100, lr:(2.000e-04,)] [eta: 9 days, 18:30:54, time (data): 0.888 (0.006)] l_pix: 5.0987e-02 
2025-05-22 21:53:30,961 INFO: [train..][epoch:  7, iter: 156,200, lr:(2.000e-04,)] [eta: 9 days, 18:04:32, time (data): 0.890 (0.006)] l_pix: 4.5706e-02 
2025-05-22 21:55:00,036 INFO: [train..][epoch:  7, iter: 156,300, lr:(2.000e-04,)] [eta: 9 days, 17:38:47, time (data): 0.891 (0.006)] l_pix: 4.8480e-02 
2025-05-22 21:56:29,061 INFO: [train..][epoch:  7, iter: 156,400, lr:(2.000e-04,)] [eta: 9 days, 17:13:41, time (data): 0.890 (0.006)] l_pix: 5.6838e-02 
2025-05-22 21:57:58,189 INFO: [train..][epoch:  7, iter: 156,500, lr:(2.000e-04,)] [eta: 9 days, 16:49:32, time (data): 0.893 (0.006)] l_pix: 4.7972e-02 
2025-05-22 21:59:27,247 INFO: [train..][epoch:  7, iter: 156,600, lr:(2.000e-04,)] [eta: 9 days, 16:25:55, time (data): 0.891 (0.006)] l_pix: 4.9252e-02 
2025-05-22 22:00:56,170 INFO: [train..][epoch:  7, iter: 156,700, lr:(2.000e-04,)] [eta: 9 days, 16:02:41, time (data): 0.889 (0.006)] l_pix: 4.3282e-02 
2025-05-22 22:02:25,304 INFO: [train..][epoch:  7, iter: 156,800, lr:(2.000e-04,)] [eta: 9 days, 15:40:32, time (data): 0.891 (0.006)] l_pix: 4.3085e-02 
2025-05-22 22:03:54,851 INFO: [train..][epoch:  7, iter: 156,900, lr:(2.000e-04,)] [eta: 9 days, 15:19:49, time (data): 0.895 (0.006)] l_pix: 5.3011e-02 
2025-05-22 22:05:23,872 INFO: [train..][epoch:  7, iter: 157,000, lr:(2.000e-04,)] [eta: 9 days, 14:58:35, time (data): 0.892 (0.006)] l_pix: 5.1804e-02 
2025-05-22 22:06:52,922 INFO: [train..][epoch:  7, iter: 157,100, lr:(2.000e-04,)] [eta: 9 days, 14:37:58, time (data): 0.890 (0.006)] l_pix: 4.0250e-02 
2025-05-22 22:08:22,018 INFO: [train..][epoch:  7, iter: 157,200, lr:(2.000e-04,)] [eta: 9 days, 14:17:59, time (data): 0.891 (0.006)] l_pix: 3.7861e-02 
2025-05-22 22:09:50,971 INFO: [train..][epoch:  7, iter: 157,300, lr:(2.000e-04,)] [eta: 9 days, 13:58:13, time (data): 0.890 (0.006)] l_pix: 5.4222e-02 
2025-05-22 22:11:19,950 INFO: [train..][epoch:  7, iter: 157,400, lr:(2.000e-04,)] [eta: 9 days, 13:39:00, time (data): 0.890 (0.006)] l_pix: 4.4576e-02 
2025-05-22 22:12:49,143 INFO: [train..][epoch:  7, iter: 157,500, lr:(2.000e-04,)] [eta: 9 days, 13:20:40, time (data): 0.893 (0.006)] l_pix: 3.8150e-02 
2025-05-22 22:14:18,162 INFO: [train..][epoch:  7, iter: 157,600, lr:(2.000e-04,)] [eta: 9 days, 13:02:26, time (data): 0.891 (0.006)] l_pix: 4.5252e-02 
2025-05-22 22:15:47,072 INFO: [train..][epoch:  7, iter: 157,700, lr:(2.000e-04,)] [eta: 9 days, 12:44:27, time (data): 0.891 (0.006)] l_pix: 4.6015e-02 
2025-05-22 22:17:16,075 INFO: [train..][epoch:  7, iter: 157,800, lr:(2.000e-04,)] [eta: 9 days, 12:27:04, time (data): 0.890 (0.006)] l_pix: 4.6275e-02 
2025-05-22 22:18:45,125 INFO: [train..][epoch:  7, iter: 157,900, lr:(2.000e-04,)] [eta: 9 days, 12:10:09, time (data): 0.889 (0.006)] l_pix: 5.8908e-02 
2025-05-22 22:20:14,410 INFO: [train..][epoch:  7, iter: 158,000, lr:(2.000e-04,)] [eta: 9 days, 11:54:03, time (data): 0.891 (0.006)] l_pix: 4.5963e-02 
2025-05-22 22:21:43,576 INFO: [train..][epoch:  7, iter: 158,100, lr:(2.000e-04,)] [eta: 9 days, 11:38:05, time (data): 0.892 (0.006)] l_pix: 5.7339e-02 
2025-05-22 22:23:12,685 INFO: [train..][epoch:  7, iter: 158,200, lr:(2.000e-04,)] [eta: 9 days, 11:22:23, time (data): 0.891 (0.006)] l_pix: 5.0501e-02 
2025-05-22 22:24:41,905 INFO: [train..][epoch:  7, iter: 158,300, lr:(2.000e-04,)] [eta: 9 days, 11:07:13, time (data): 0.893 (0.006)] l_pix: 3.6272e-02 
2025-05-22 22:26:11,011 INFO: [train..][epoch:  7, iter: 158,400, lr:(2.000e-04,)] [eta: 9 days, 10:52:11, time (data): 0.892 (0.006)] l_pix: 4.8126e-02 
2025-05-22 22:27:40,204 INFO: [train..][epoch:  7, iter: 158,500, lr:(2.000e-04,)] [eta: 9 days, 10:37:37, time (data): 0.892 (0.006)] l_pix: 5.1787e-02 
2025-05-22 22:29:09,114 INFO: [train..][epoch:  7, iter: 158,600, lr:(2.000e-04,)] [eta: 9 days, 10:22:53, time (data): 0.890 (0.006)] l_pix: 5.7775e-02 
2025-05-22 22:30:38,180 INFO: [train..][epoch:  7, iter: 158,700, lr:(2.000e-04,)] [eta: 9 days, 10:08:43, time (data): 0.891 (0.006)] l_pix: 4.2539e-02 
2025-05-22 22:32:07,515 INFO: [train..][epoch:  7, iter: 158,800, lr:(2.000e-04,)] [eta: 9 days, 9:55:15, time (data): 0.892 (0.006)] l_pix: 6.2914e-02 
2025-05-22 22:33:36,966 INFO: [train..][epoch:  7, iter: 158,900, lr:(2.000e-04,)] [eta: 9 days, 9:42:15, time (data): 0.891 (0.006)] l_pix: 5.4556e-02 
2025-05-22 22:35:06,460 INFO: [train..][epoch:  7, iter: 159,000, lr:(2.000e-04,)] [eta: 9 days, 9:29:34, time (data): 0.894 (0.006)] l_pix: 6.3568e-02 
2025-05-22 22:36:35,439 INFO: [train..][epoch:  7, iter: 159,100, lr:(2.000e-04,)] [eta: 9 days, 9:16:20, time (data): 0.889 (0.006)] l_pix: 4.4213e-02 
2025-05-22 22:38:04,713 INFO: [train..][epoch:  7, iter: 159,200, lr:(2.000e-04,)] [eta: 9 days, 9:03:49, time (data): 0.891 (0.006)] l_pix: 3.9741e-02 
2025-05-22 22:39:33,710 INFO: [train..][epoch:  7, iter: 159,300, lr:(2.000e-04,)] [eta: 9 days, 8:51:07, time (data): 0.892 (0.006)] l_pix: 4.9117e-02 
2025-05-22 22:41:02,930 INFO: [train..][epoch:  7, iter: 159,400, lr:(2.000e-04,)] [eta: 9 days, 8:38:59, time (data): 0.892 (0.006)] l_pix: 6.6556e-02 
2025-05-22 22:42:32,256 INFO: [train..][epoch:  7, iter: 159,500, lr:(2.000e-04,)] [eta: 9 days, 8:27:13, time (data): 0.894 (0.006)] l_pix: 6.7600e-02 
2025-05-22 22:44:01,378 INFO: [train..][epoch:  7, iter: 159,600, lr:(2.000e-04,)] [eta: 9 days, 8:15:23, time (data): 0.892 (0.006)] l_pix: 5.0702e-02 
2025-05-22 22:45:30,606 INFO: [train..][epoch:  7, iter: 159,700, lr:(2.000e-04,)] [eta: 9 days, 8:03:55, time (data): 0.891 (0.006)] l_pix: 6.3939e-02 
2025-05-22 22:46:59,769 INFO: [train..][epoch:  7, iter: 159,800, lr:(2.000e-04,)] [eta: 9 days, 7:52:33, time (data): 0.891 (0.006)] l_pix: 4.8341e-02 
2025-05-22 22:48:28,976 INFO: [train..][epoch:  7, iter: 159,900, lr:(2.000e-04,)] [eta: 9 days, 7:41:28, time (data): 0.894 (0.006)] l_pix: 4.8231e-02 
2025-05-22 22:49:58,270 INFO: [train..][epoch:  7, iter: 160,000, lr:(2.000e-04,)] [eta: 9 days, 7:30:41, time (data): 0.893 (0.006)] l_pix: 4.9326e-02 
2025-05-22 22:49:58,270 INFO: Saving models and training states.
2025-05-22 22:56:17,043 INFO: Validation validation
	 # psnr: 27.0711	Best: 27.0711 @ 160000 iter

2025-05-22 22:57:46,306 INFO: [train..][epoch:  7, iter: 160,100, lr:(2.000e-04,)] [eta: 9 days, 16:04:57, time (data): 0.889 (0.006)] l_pix: 5.2632e-02 
2025-05-22 22:59:15,364 INFO: [train..][epoch:  7, iter: 160,200, lr:(2.000e-04,)] [eta: 9 days, 15:49:00, time (data): 0.890 (0.006)] l_pix: 6.3812e-02 
2025-05-22 23:00:44,566 INFO: [train..][epoch:  7, iter: 160,300, lr:(2.000e-04,)] [eta: 9 days, 15:33:31, time (data): 0.893 (0.006)] l_pix: 6.3261e-02 
2025-05-22 23:02:13,524 INFO: [train..][epoch:  7, iter: 160,400, lr:(2.000e-04,)] [eta: 9 days, 15:17:59, time (data): 0.891 (0.006)] l_pix: 5.0326e-02 
2025-05-22 23:03:42,621 INFO: [train..][epoch:  7, iter: 160,500, lr:(2.000e-04,)] [eta: 9 days, 15:02:54, time (data): 0.891 (0.006)] l_pix: 3.7695e-02 
2025-05-22 23:05:11,552 INFO: [train..][epoch:  7, iter: 160,600, lr:(2.000e-04,)] [eta: 9 days, 14:47:52, time (data): 0.890 (0.006)] l_pix: 4.6818e-02 
2025-05-22 23:06:41,193 INFO: [train..][epoch:  7, iter: 160,700, lr:(2.000e-04,)] [eta: 9 days, 14:34:00, time (data): 0.892 (0.006)] l_pix: 4.1736e-02 
2025-05-22 23:08:10,639 INFO: [train..][epoch:  7, iter: 160,800, lr:(2.000e-04,)] [eta: 9 days, 14:20:07, time (data): 0.894 (0.006)] l_pix: 5.1477e-02 
2025-05-22 23:09:39,617 INFO: [train..][epoch:  7, iter: 160,900, lr:(2.000e-04,)] [eta: 9 days, 14:05:51, time (data): 0.891 (0.006)] l_pix: 4.6123e-02 
2025-05-22 23:11:08,584 INFO: [train..][epoch:  7, iter: 161,000, lr:(2.000e-04,)] [eta: 9 days, 13:51:49, time (data): 0.890 (0.006)] l_pix: 3.9645e-02 
2025-05-22 23:12:37,753 INFO: [train..][epoch:  7, iter: 161,100, lr:(2.000e-04,)] [eta: 9 days, 13:38:15, time (data): 0.890 (0.006)] l_pix: 5.4922e-02 
2025-05-22 23:14:06,994 INFO: [train..][epoch:  7, iter: 161,200, lr:(2.000e-04,)] [eta: 9 days, 13:25:00, time (data): 0.892 (0.006)] l_pix: 3.7254e-02 
2025-05-22 23:15:35,966 INFO: [train..][epoch:  7, iter: 161,300, lr:(2.000e-04,)] [eta: 9 days, 13:11:37, time (data): 0.892 (0.006)] l_pix: 5.0679e-02 
2025-05-22 23:17:05,253 INFO: [train..][epoch:  7, iter: 161,400, lr:(2.000e-04,)] [eta: 9 days, 12:58:50, time (data): 0.892 (0.006)] l_pix: 4.2550e-02 
2025-05-22 23:18:34,347 INFO: [train..][epoch:  7, iter: 161,500, lr:(2.000e-04,)] [eta: 9 days, 12:46:00, time (data): 0.891 (0.006)] l_pix: 4.4974e-02 
2025-05-22 23:20:03,484 INFO: [train..][epoch:  7, iter: 161,600, lr:(2.000e-04,)] [eta: 9 days, 12:33:26, time (data): 0.891 (0.006)] l_pix: 3.8623e-02 
2025-05-22 23:21:32,900 INFO: [train..][epoch:  7, iter: 161,700, lr:(2.000e-04,)] [eta: 9 days, 12:21:23, time (data): 0.895 (0.006)] l_pix: 4.6834e-02 
2025-05-22 23:23:02,627 INFO: [train..][epoch:  7, iter: 161,800, lr:(2.000e-04,)] [eta: 9 days, 12:09:52, time (data): 0.897 (0.006)] l_pix: 4.1426e-02 
2025-05-22 23:24:31,884 INFO: [train..][epoch:  7, iter: 161,900, lr:(2.000e-04,)] [eta: 9 days, 11:57:59, time (data): 0.893 (0.006)] l_pix: 5.3591e-02 
2025-05-22 23:26:00,852 INFO: [train..][epoch:  7, iter: 162,000, lr:(2.000e-04,)] [eta: 9 days, 11:45:56, time (data): 0.891 (0.006)] l_pix: 5.0188e-02 
2025-05-22 23:27:30,201 INFO: [train..][epoch:  7, iter: 162,100, lr:(2.000e-04,)] [eta: 9 days, 11:34:30, time (data): 0.894 (0.006)] l_pix: 3.5086e-02 
2025-05-22 23:28:59,302 INFO: [train..][epoch:  7, iter: 162,200, lr:(2.000e-04,)] [eta: 9 days, 11:22:56, time (data): 0.892 (0.006)] l_pix: 4.6716e-02 
2025-05-22 23:30:28,441 INFO: [train..][epoch:  7, iter: 162,300, lr:(2.000e-04,)] [eta: 9 days, 11:11:35, time (data): 0.889 (0.006)] l_pix: 4.8230e-02 
2025-05-22 23:31:57,819 INFO: [train..][epoch:  7, iter: 162,400, lr:(2.000e-04,)] [eta: 9 days, 11:00:40, time (data): 0.893 (0.006)] l_pix: 4.9950e-02 
2025-05-22 23:33:26,637 INFO: [train..][epoch:  7, iter: 162,500, lr:(2.000e-04,)] [eta: 9 days, 10:49:16, time (data): 0.888 (0.006)] l_pix: 3.8911e-02 
2025-05-22 23:34:55,950 INFO: [train..][epoch:  7, iter: 162,600, lr:(2.000e-04,)] [eta: 9 days, 10:38:34, time (data): 0.892 (0.006)] l_pix: 5.1191e-02 
2025-05-22 23:36:25,071 INFO: [train..][epoch:  7, iter: 162,700, lr:(2.000e-04,)] [eta: 9 days, 10:27:49, time (data): 0.892 (0.006)] l_pix: 5.1131e-02 
2025-05-22 23:37:53,889 INFO: [train..][epoch:  7, iter: 162,800, lr:(2.000e-04,)] [eta: 9 days, 10:16:52, time (data): 0.889 (0.006)] l_pix: 5.5623e-02 
2025-05-22 23:39:22,999 INFO: [train..][epoch:  7, iter: 162,900, lr:(2.000e-04,)] [eta: 9 days, 10:06:23, time (data): 0.892 (0.006)] l_pix: 5.5319e-02 
2025-05-22 23:40:52,111 INFO: [train..][epoch:  7, iter: 163,000, lr:(2.000e-04,)] [eta: 9 days, 9:56:03, time (data): 0.891 (0.006)] l_pix: 5.2170e-02 
2025-05-22 23:42:21,397 INFO: [train..][epoch:  7, iter: 163,100, lr:(2.000e-04,)] [eta: 9 days, 9:46:02, time (data): 0.891 (0.006)] l_pix: 6.2801e-02 
2025-05-22 23:43:50,371 INFO: [train..][epoch:  7, iter: 163,200, lr:(2.000e-04,)] [eta: 9 days, 9:35:48, time (data): 0.890 (0.006)] l_pix: 5.3340e-02 
2025-05-22 23:45:19,495 INFO: [train..][epoch:  7, iter: 163,300, lr:(2.000e-04,)] [eta: 9 days, 9:25:53, time (data): 0.892 (0.006)] l_pix: 4.1732e-02 
2025-05-22 23:46:48,633 INFO: [train..][epoch:  7, iter: 163,400, lr:(2.000e-04,)] [eta: 9 days, 9:16:05, time (data): 0.891 (0.006)] l_pix: 4.5019e-02 
2025-05-22 23:48:17,747 INFO: [train..][epoch:  7, iter: 163,500, lr:(2.000e-04,)] [eta: 9 days, 9:06:23, time (data): 0.888 (0.006)] l_pix: 5.1280e-02 
2025-05-22 23:49:47,032 INFO: [train..][epoch:  7, iter: 163,600, lr:(2.000e-04,)] [eta: 9 days, 8:57:00, time (data): 0.892 (0.006)] l_pix: 4.1663e-02 
2025-05-22 23:51:16,207 INFO: [train..][epoch:  7, iter: 163,700, lr:(2.000e-04,)] [eta: 9 days, 8:47:36, time (data): 0.891 (0.006)] l_pix: 5.1757e-02 
2025-05-22 23:52:45,420 INFO: [train..][epoch:  7, iter: 163,800, lr:(2.000e-04,)] [eta: 9 days, 8:38:22, time (data): 0.892 (0.006)] l_pix: 5.9825e-02 
2025-05-22 23:54:14,646 INFO: [train..][epoch:  7, iter: 163,900, lr:(2.000e-04,)] [eta: 9 days, 8:29:15, time (data): 0.894 (0.006)] l_pix: 4.3561e-02 
2025-05-22 23:55:43,869 INFO: [train..][epoch:  7, iter: 164,000, lr:(2.000e-04,)] [eta: 9 days, 8:20:14, time (data): 0.893 (0.006)] l_pix: 5.5049e-02 
2025-05-22 23:57:13,000 INFO: [train..][epoch:  7, iter: 164,100, lr:(2.000e-04,)] [eta: 9 days, 8:11:14, time (data): 0.889 (0.006)] l_pix: 4.5505e-02 
2025-05-22 23:58:42,027 INFO: [train..][epoch:  7, iter: 164,200, lr:(2.000e-04,)] [eta: 9 days, 8:02:15, time (data): 0.890 (0.006)] l_pix: 4.6299e-02 
2025-05-23 00:00:11,331 INFO: [train..][epoch:  7, iter: 164,300, lr:(2.000e-04,)] [eta: 9 days, 7:53:38, time (data): 0.904 (0.006)] l_pix: 4.5532e-02 
2025-05-23 00:01:40,354 INFO: [train..][epoch:  7, iter: 164,400, lr:(2.000e-04,)] [eta: 9 days, 7:44:51, time (data): 0.893 (0.006)] l_pix: 4.6160e-02 
2025-05-23 00:03:09,496 INFO: [train..][epoch:  7, iter: 164,500, lr:(2.000e-04,)] [eta: 9 days, 7:36:16, time (data): 0.892 (0.006)] l_pix: 4.0996e-02 
2025-05-23 00:04:38,742 INFO: [train..][epoch:  7, iter: 164,600, lr:(2.000e-04,)] [eta: 9 days, 7:27:54, time (data): 0.892 (0.006)] l_pix: 4.4858e-02 
2025-05-23 00:06:07,715 INFO: [train..][epoch:  7, iter: 164,700, lr:(2.000e-04,)] [eta: 9 days, 7:19:21, time (data): 0.889 (0.006)] l_pix: 3.9480e-02 
2025-05-23 00:07:36,988 INFO: [train..][epoch:  7, iter: 164,800, lr:(2.000e-04,)] [eta: 9 days, 7:11:11, time (data): 0.892 (0.006)] l_pix: 5.0840e-02 
2025-05-23 00:09:06,246 INFO: [train..][epoch:  7, iter: 164,900, lr:(2.000e-04,)] [eta: 9 days, 7:03:06, time (data): 0.892 (0.006)] l_pix: 5.3105e-02 
2025-05-23 00:10:33,585 INFO: [train..][epoch:  7, iter: 165,000, lr:(2.000e-04,)] [eta: 9 days, 6:53:19, time (data): 0.877 (0.006)] l_pix: 6.0762e-02 
2025-05-23 00:10:33,585 INFO: Saving models and training states.
2025-05-23 00:16:45,888 INFO: Validation validation
	 # psnr: 27.1720	Best: 27.1720 @ 165000 iter

2025-05-23 00:18:13,126 INFO: [train..][epoch:  7, iter: 165,100, lr:(2.000e-04,)] [eta: 9 days, 12:26:37, time (data): 0.873 (0.006)] l_pix: 4.9726e-02 
2025-05-23 00:19:40,200 INFO: [train..][epoch:  7, iter: 165,200, lr:(2.000e-04,)] [eta: 9 days, 12:14:31, time (data): 0.871 (0.006)] l_pix: 5.6391e-02 
2025-05-23 00:21:07,217 INFO: [train..][epoch:  7, iter: 165,300, lr:(2.000e-04,)] [eta: 9 days, 12:02:30, time (data): 0.870 (0.006)] l_pix: 5.0993e-02 
2025-05-23 00:22:34,331 INFO: [train..][epoch:  7, iter: 165,400, lr:(2.000e-04,)] [eta: 9 days, 11:50:43, time (data): 0.871 (0.006)] l_pix: 5.7537e-02 
2025-05-23 00:24:01,528 INFO: [train..][epoch:  7, iter: 165,500, lr:(2.000e-04,)] [eta: 9 days, 11:39:08, time (data): 0.874 (0.006)] l_pix: 5.0129e-02 
2025-05-23 00:25:28,793 INFO: [train..][epoch:  7, iter: 165,600, lr:(2.000e-04,)] [eta: 9 days, 11:27:44, time (data): 0.873 (0.006)] l_pix: 3.8533e-02 
2025-05-23 00:26:56,019 INFO: [train..][epoch:  7, iter: 165,700, lr:(2.000e-04,)] [eta: 9 days, 11:16:26, time (data): 0.872 (0.006)] l_pix: 4.3293e-02 
2025-05-23 00:28:23,475 INFO: [train..][epoch:  7, iter: 165,800, lr:(2.000e-04,)] [eta: 9 days, 11:05:28, time (data): 0.874 (0.006)] l_pix: 4.9412e-02 
2025-05-23 00:29:50,865 INFO: [train..][epoch:  7, iter: 165,900, lr:(2.000e-04,)] [eta: 9 days, 10:54:33, time (data): 0.877 (0.006)] l_pix: 4.6855e-02 
2025-05-23 00:31:18,258 INFO: [train..][epoch:  7, iter: 166,000, lr:(2.000e-04,)] [eta: 9 days, 10:43:46, time (data): 0.874 (0.006)] l_pix: 4.1290e-02 
2025-05-23 00:32:45,691 INFO: [train..][epoch:  7, iter: 166,100, lr:(2.000e-04,)] [eta: 9 days, 10:33:07, time (data): 0.871 (0.006)] l_pix: 3.9281e-02 
2025-05-23 00:34:13,320 INFO: [train..][epoch:  7, iter: 166,200, lr:(2.000e-04,)] [eta: 9 days, 10:22:46, time (data): 0.875 (0.006)] l_pix: 4.3243e-02 
2025-05-23 00:35:40,645 INFO: [train..][epoch:  7, iter: 166,300, lr:(2.000e-04,)] [eta: 9 days, 10:12:16, time (data): 0.872 (0.006)] l_pix: 5.3891e-02 
2025-05-23 00:37:08,172 INFO: [train..][epoch:  7, iter: 166,400, lr:(2.000e-04,)] [eta: 9 days, 10:02:02, time (data): 0.875 (0.006)] l_pix: 4.3947e-02 
2025-05-23 00:38:36,106 INFO: [train..][epoch:  7, iter: 166,500, lr:(2.000e-04,)] [eta: 9 days, 9:52:15, time (data): 0.875 (0.006)] l_pix: 4.9617e-02 
2025-05-23 00:40:03,666 INFO: [train..][epoch:  7, iter: 166,600, lr:(2.000e-04,)] [eta: 9 days, 9:42:16, time (data): 0.876 (0.006)] l_pix: 5.2298e-02 
2025-05-23 00:41:31,269 INFO: [train..][epoch:  7, iter: 166,700, lr:(2.000e-04,)] [eta: 9 days, 9:32:25, time (data): 0.873 (0.006)] l_pix: 4.8909e-02 
2025-05-23 00:42:58,913 INFO: [train..][epoch:  7, iter: 166,800, lr:(2.000e-04,)] [eta: 9 days, 9:22:42, time (data): 0.876 (0.006)] l_pix: 6.1709e-02 
2025-05-23 00:44:26,720 INFO: [train..][epoch:  7, iter: 166,900, lr:(2.000e-04,)] [eta: 9 days, 9:13:12, time (data): 0.878 (0.006)] l_pix: 4.8505e-02 
2025-05-23 00:45:54,363 INFO: [train..][epoch:  7, iter: 167,000, lr:(2.000e-04,)] [eta: 9 days, 9:03:41, time (data): 0.877 (0.006)] l_pix: 4.9217e-02 
2025-05-23 00:47:22,002 INFO: [train..][epoch:  7, iter: 167,100, lr:(2.000e-04,)] [eta: 9 days, 8:54:15, time (data): 0.878 (0.006)] l_pix: 4.4146e-02 
2025-05-23 00:48:49,663 INFO: [train..][epoch:  7, iter: 167,200, lr:(2.000e-04,)] [eta: 9 days, 8:44:55, time (data): 0.877 (0.006)] l_pix: 4.2766e-02 
2025-05-23 00:50:17,300 INFO: [train..][epoch:  7, iter: 167,300, lr:(2.000e-04,)] [eta: 9 days, 8:35:40, time (data): 0.876 (0.006)] l_pix: 4.8617e-02 
2025-05-23 00:51:44,937 INFO: [train..][epoch:  7, iter: 167,400, lr:(2.000e-04,)] [eta: 9 days, 8:26:30, time (data): 0.876 (0.006)] l_pix: 3.8251e-02 
2025-05-23 00:53:12,700 INFO: [train..][epoch:  7, iter: 167,500, lr:(2.000e-04,)] [eta: 9 days, 8:17:32, time (data): 0.875 (0.006)] l_pix: 4.4538e-02 
2025-05-23 00:54:40,486 INFO: [train..][epoch:  7, iter: 167,600, lr:(2.000e-04,)] [eta: 9 days, 8:08:39, time (data): 0.878 (0.006)] l_pix: 4.3701e-02 
2025-05-23 00:56:08,370 INFO: [train..][epoch:  7, iter: 167,700, lr:(2.000e-04,)] [eta: 9 days, 7:59:57, time (data): 0.876 (0.006)] l_pix: 5.3433e-02 
2025-05-23 00:57:35,922 INFO: [train..][epoch:  7, iter: 167,800, lr:(2.000e-04,)] [eta: 9 days, 7:51:03, time (data): 0.876 (0.006)] l_pix: 4.9403e-02 
2025-05-23 00:59:03,663 INFO: [train..][epoch:  7, iter: 167,900, lr:(2.000e-04,)] [eta: 9 days, 7:42:24, time (data): 0.880 (0.006)] l_pix: 6.5264e-02 
2025-05-23 01:00:31,466 INFO: [train..][epoch:  7, iter: 168,000, lr:(2.000e-04,)] [eta: 9 days, 7:33:52, time (data): 0.878 (0.006)] l_pix: 3.2091e-02 
2025-05-23 01:01:59,272 INFO: [train..][epoch:  7, iter: 168,100, lr:(2.000e-04,)] [eta: 9 days, 7:25:25, time (data): 0.880 (0.006)] l_pix: 5.7440e-02 
2025-05-23 01:03:26,951 INFO: [train..][epoch:  7, iter: 168,200, lr:(2.000e-04,)] [eta: 9 days, 7:16:56, time (data): 0.877 (0.006)] l_pix: 4.4892e-02 
2025-05-23 01:04:54,719 INFO: [train..][epoch:  7, iter: 168,300, lr:(2.000e-04,)] [eta: 9 days, 7:08:37, time (data): 0.875 (0.006)] l_pix: 5.9910e-02 
2025-05-23 01:06:22,415 INFO: [train..][epoch:  7, iter: 168,400, lr:(2.000e-04,)] [eta: 9 days, 7:00:18, time (data): 0.877 (0.006)] l_pix: 5.3789e-02 
2025-05-23 01:07:50,230 INFO: [train..][epoch:  7, iter: 168,500, lr:(2.000e-04,)] [eta: 9 days, 6:52:10, time (data): 0.880 (0.006)] l_pix: 5.6635e-02 
2025-05-23 01:09:17,716 INFO: [train..][epoch:  7, iter: 168,600, lr:(2.000e-04,)] [eta: 9 days, 6:43:51, time (data): 0.875 (0.006)] l_pix: 4.2534e-02 
2025-05-23 01:10:45,351 INFO: [train..][epoch:  7, iter: 168,700, lr:(2.000e-04,)] [eta: 9 days, 6:35:43, time (data): 0.870 (0.004)] l_pix: 5.3833e-02 
2025-05-23 01:12:29,458 INFO: [train..][epoch:  8, iter: 168,800, lr:(2.000e-04,)] [eta: 9 days, 6:39:47, time (data): 1.030 (0.162)] l_pix: 4.8296e-02 
2025-05-23 01:13:57,003 INFO: [train..][epoch:  8, iter: 168,900, lr:(2.000e-04,)] [eta: 9 days, 6:31:40, time (data): 0.884 (0.005)] l_pix: 4.1285e-02 
2025-05-23 01:15:24,708 INFO: [train..][epoch:  8, iter: 169,000, lr:(2.000e-04,)] [eta: 9 days, 6:23:43, time (data): 0.877 (0.005)] l_pix: 4.6718e-02 
2025-05-23 01:16:52,347 INFO: [train..][epoch:  8, iter: 169,100, lr:(2.000e-04,)] [eta: 9 days, 6:15:48, time (data): 0.872 (0.005)] l_pix: 4.0657e-02 
2025-05-23 01:18:19,787 INFO: [train..][epoch:  8, iter: 169,200, lr:(2.000e-04,)] [eta: 9 days, 6:07:49, time (data): 0.874 (0.005)] l_pix: 4.2875e-02 
2025-05-23 01:19:47,360 INFO: [train..][epoch:  8, iter: 169,300, lr:(2.000e-04,)] [eta: 9 days, 5:59:59, time (data): 0.867 (0.005)] l_pix: 4.8647e-02 
2025-05-23 01:21:14,843 INFO: [train..][epoch:  8, iter: 169,400, lr:(2.000e-04,)] [eta: 9 days, 5:52:09, time (data): 0.875 (0.005)] l_pix: 4.1867e-02 
2025-05-23 01:22:42,388 INFO: [train..][epoch:  8, iter: 169,500, lr:(2.000e-04,)] [eta: 9 days, 5:44:26, time (data): 0.887 (0.006)] l_pix: 5.0585e-02 
2025-05-23 01:24:09,862 INFO: [train..][epoch:  8, iter: 169,600, lr:(2.000e-04,)] [eta: 9 days, 5:36:44, time (data): 0.875 (0.005)] l_pix: 4.5044e-02 
2025-05-23 01:25:37,284 INFO: [train..][epoch:  8, iter: 169,700, lr:(2.000e-04,)] [eta: 9 days, 5:29:03, time (data): 0.868 (0.007)] l_pix: 5.1812e-02 
2025-05-23 01:27:05,094 INFO: [train..][epoch:  8, iter: 169,800, lr:(2.000e-04,)] [eta: 9 days, 5:21:42, time (data): 0.878 (0.005)] l_pix: 4.3736e-02 
2025-05-23 01:28:32,790 INFO: [train..][epoch:  8, iter: 169,900, lr:(2.000e-04,)] [eta: 9 days, 5:14:20, time (data): 0.878 (0.006)] l_pix: 4.3764e-02 
2025-05-23 01:30:00,253 INFO: [train..][epoch:  8, iter: 170,000, lr:(2.000e-04,)] [eta: 9 days, 5:06:52, time (data): 0.875 (0.005)] l_pix: 6.9627e-02 
2025-05-23 01:30:00,253 INFO: Saving models and training states.
2025-05-23 01:36:12,670 INFO: Validation validation
	 # psnr: 27.2011	Best: 27.2011 @ 170000 iter

2025-05-23 01:37:40,333 INFO: [train..][epoch:  8, iter: 170,100, lr:(2.000e-04,)] [eta: 9 days, 9:15:52, time (data): 0.876 (0.005)] l_pix: 4.9445e-02 
2025-05-23 01:39:07,896 INFO: [train..][epoch:  8, iter: 170,200, lr:(2.000e-04,)] [eta: 9 days, 9:07:17, time (data): 0.876 (0.005)] l_pix: 4.3576e-02 
2025-05-23 01:40:35,560 INFO: [train..][epoch:  8, iter: 170,300, lr:(2.000e-04,)] [eta: 9 days, 8:58:51, time (data): 0.876 (0.005)] l_pix: 5.0128e-02 
2025-05-23 01:42:03,193 INFO: [train..][epoch:  8, iter: 170,400, lr:(2.000e-04,)] [eta: 9 days, 8:50:27, time (data): 0.876 (0.005)] l_pix: 4.6691e-02 
2025-05-23 01:43:30,951 INFO: [train..][epoch:  8, iter: 170,500, lr:(2.000e-04,)] [eta: 9 days, 8:42:12, time (data): 0.877 (0.005)] l_pix: 5.6645e-02 
2025-05-23 01:44:58,739 INFO: [train..][epoch:  8, iter: 170,600, lr:(2.000e-04,)] [eta: 9 days, 8:34:03, time (data): 0.878 (0.005)] l_pix: 4.5754e-02 
2025-05-23 01:46:26,780 INFO: [train..][epoch:  8, iter: 170,700, lr:(2.000e-04,)] [eta: 9 days, 8:26:08, time (data): 0.879 (0.005)] l_pix: 5.6628e-02 
2025-05-23 01:47:54,420 INFO: [train..][epoch:  8, iter: 170,800, lr:(2.000e-04,)] [eta: 9 days, 8:18:00, time (data): 0.876 (0.005)] l_pix: 5.2710e-02 
2025-05-23 01:49:22,142 INFO: [train..][epoch:  8, iter: 170,900, lr:(2.000e-04,)] [eta: 9 days, 8:10:00, time (data): 0.877 (0.005)] l_pix: 4.8022e-02 
2025-05-23 01:50:49,873 INFO: [train..][epoch:  8, iter: 171,000, lr:(2.000e-04,)] [eta: 9 days, 8:02:03, time (data): 0.877 (0.005)] l_pix: 5.0524e-02 
2025-05-23 01:52:17,623 INFO: [train..][epoch:  8, iter: 171,100, lr:(2.000e-04,)] [eta: 9 days, 7:54:11, time (data): 0.877 (0.005)] l_pix: 5.9968e-02 
2025-05-23 01:53:45,516 INFO: [train..][epoch:  8, iter: 171,200, lr:(2.000e-04,)] [eta: 9 days, 7:46:28, time (data): 0.879 (0.005)] l_pix: 5.2952e-02 
2025-05-23 01:55:13,265 INFO: [train..][epoch:  8, iter: 171,300, lr:(2.000e-04,)] [eta: 9 days, 7:38:43, time (data): 0.878 (0.005)] l_pix: 4.4712e-02 
2025-05-23 01:56:41,079 INFO: [train..][epoch:  8, iter: 171,400, lr:(2.000e-04,)] [eta: 9 days, 7:31:05, time (data): 0.878 (0.005)] l_pix: 4.4960e-02 
2025-05-23 01:58:08,740 INFO: [train..][epoch:  8, iter: 171,500, lr:(2.000e-04,)] [eta: 9 days, 7:23:23, time (data): 0.877 (0.005)] l_pix: 4.3635e-02 
2025-05-23 01:59:36,581 INFO: [train..][epoch:  8, iter: 171,600, lr:(2.000e-04,)] [eta: 9 days, 7:15:52, time (data): 0.878 (0.005)] l_pix: 3.6617e-02 
