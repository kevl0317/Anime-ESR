2025-06-01 12:08:58,971 INFO: 
                ____                _       _____  ____
               / __ ) ____ _ _____ (_)_____/ ___/ / __ \
              / __  |/ __ `// ___// // ___/\__ \ / /_/ /
             / /_/ // /_/ /(__  )/ // /__ ___/ // _, _/
            /_____/ \__,_//____//_/ \___//____//_/ |_|
     ______                   __   __                 __      __
    / ____/____   ____   ____/ /  / /   __  __ _____ / /__   / /
   / / __ / __ \ / __ \ / __  /  / /   / / / // ___// //_/  / /
  / /_/ // /_/ // /_/ // /_/ /  / /___/ /_/ // /__ / /<    /_/
  \____/ \____/ \____/ \____/  /_____/\____/ \___//_/|_|  (_)
    
Version Information: 
	BasicSR: 1.4.2
	PyTorch: 2.7.0+cu128
	TorchVision: 0.22.0+cu128
2025-06-01 12:08:58,971 INFO: 
  name: train_anime_RealESRNetx4plus_1000k_B12G4
  model_type: RealESRNetModel
  scale: 4
  num_gpu: 1
  manual_seed: 0
  gt_usm: True
  resize_prob: [0.2, 0.7, 0.1]
  resize_range: [0.15, 1.5]
  gaussian_noise_prob: 0.5
  noise_range: [1, 30]
  poisson_scale_range: [0.05, 3]
  gray_noise_prob: 0.4
  jpeg_range: [30, 95]
  second_blur_prob: 0.8
  resize_prob2: [0.3, 0.4, 0.3]
  resize_range2: [0.3, 1.2]
  gaussian_noise_prob2: 0.5
  noise_range2: [1, 25]
  poisson_scale_range2: [0.05, 2.5]
  gray_noise_prob2: 0.4
  jpeg_range2: [30, 95]
  gt_size: 256
  queue_size: 320
  datasets:[
    train:[
      name: Anime
      type: RealESRGANDataset
      dataroot_gt: datasets/anime
      meta_info: datasets/anime/meta_info_train.txt
      io_backend:[
        type: disk
      ]
      blur_kernel_size: 21
      kernel_list: ['iso', 'aniso', 'generalized_iso', 'generalized_aniso', 'plateau_iso', 'plateau_aniso']
      kernel_prob: [0.45, 0.25, 0.12, 0.03, 0.12, 0.03]
      sinc_prob: 0.1
      blur_sigma: [0.2, 3]
      betag_range: [0.5, 4]
      betap_range: [1, 2]
      blur_kernel_size2: 21
      kernel_list2: ['iso', 'aniso', 'generalized_iso', 'generalized_aniso', 'plateau_iso', 'plateau_aniso']
      kernel_prob2: [0.45, 0.25, 0.12, 0.03, 0.12, 0.03]
      sinc_prob2: 0.1
      blur_sigma2: [0.2, 1.5]
      betag_range2: [0.5, 4]
      betap_range2: [1, 2]
      final_sinc_prob: 0.8
      gt_size: 256
      use_hflip: True
      use_rot: False
      use_shuffle: True
      num_worker_per_gpu: 5
      batch_size_per_gpu: 16
      dataset_enlarge_ratio: 1
      prefetch_mode: None
      phase: train
      scale: 4
    ]
    val:[
      name: validation
      type: PairedImageDataset
      dataroot_gt: datasets/anime/galData_val
      dataroot_lq: datasets/anime/galData_val_lr_x4_bicubic
      io_backend:[
        type: disk
      ]
      phase: val
      scale: 4
    ]
  ]
  network_g:[
    type: RRDBNet
    num_in_ch: 3
    num_out_ch: 3
    num_feat: 64
    num_block: 23
    num_grow_ch: 32
  ]
  path:[
    pretrain_network_g: /home/kevin/990Pro/AI/Anime-ESR/experiments/train_anime_RealESRNetx4plus_1000k_B12G4/models/net_g_315000.pth
    param_key_g: params
    strict_load_g: True
    resume_state: experiments/train_anime_RealESRNetx4plus_1000k_B12G4/training_states/315000.state
    experiments_root: /home/kevin/990Pro/AI/Anime-ESR/experiments/train_anime_RealESRNetx4plus_1000k_B12G4
    models: /home/kevin/990Pro/AI/Anime-ESR/experiments/train_anime_RealESRNetx4plus_1000k_B12G4/models
    training_states: /home/kevin/990Pro/AI/Anime-ESR/experiments/train_anime_RealESRNetx4plus_1000k_B12G4/training_states
    log: /home/kevin/990Pro/AI/Anime-ESR/experiments/train_anime_RealESRNetx4plus_1000k_B12G4
    visualization: /home/kevin/990Pro/AI/Anime-ESR/experiments/train_anime_RealESRNetx4plus_1000k_B12G4/visualization
  ]
  train:[
    ema_decay: 0.999
    optim_g:[
      type: Adam
      lr: 0.0002
      weight_decay: 0
      betas: [0.9, 0.99]
    ]
    scheduler:[
      type: MultiStepLR
      milestones: [1000000]
      gamma: 0.5
    ]
    total_iter: 1000000
    warmup_iter: -1
    pixel_opt:[
      type: L1Loss
      loss_weight: 1.0
      reduction: mean
    ]
  ]
  val:[
    val_freq: 5000.0
    save_img: True
    metrics:[
      psnr:[
        type: calculate_psnr
        crop_border: 4
        test_y_channel: False
      ]
    ]
  ]
  logger:[
    print_freq: 100
    save_checkpoint_freq: 5000.0
    use_tb_logger: True
    wandb:[
      project: None
      resume_id: None
    ]
  ]
  dist_params:[
    backend: nccl
    port: 29500
  ]
  dist: False
  rank: 0
  world_size: 1
  auto_resume: True
  is_train: True
  root_path: /home/kevin/990Pro/AI/Anime-ESR

2025-06-01 12:08:59,157 INFO: Dataset [RealESRGANDataset] - Anime is built.
2025-06-01 12:08:59,157 INFO: Training statistics:
	Number of train images: 299263
	Dataset enlarge ratio: 1
	Batch size per gpu: 16
	World size (gpu number): 1
	Require iter number per epoch: 18704
	Total epochs: 54; iters: 1000000.
2025-06-01 12:08:59,164 INFO: Dataset [PairedImageDataset] - validation is built.
2025-06-01 12:08:59,167 INFO: Number of val images/folders in validation: 488
2025-06-01 12:08:59,288 INFO: Network [RRDBNet] is created.
2025-06-01 12:08:59,309 INFO: Network: RRDBNet, with parameters: 16,697,987
2025-06-01 12:08:59,309 INFO: RRDBNet(
  (conv_first): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (body): Sequential(
    (0): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (5): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (6): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (7): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (8): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (9): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (10): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (11): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (12): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (13): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (14): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (15): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (16): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (17): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (18): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (19): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (20): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (21): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (22): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
  (conv_body): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv_up1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv_up2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv_hr): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv_last): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
)
2025-06-01 12:08:59,474 INFO: Loading RRDBNet model from /home/kevin/990Pro/AI/Anime-ESR/experiments/train_anime_RealESRNetx4plus_1000k_B12G4/models/net_g_315000.pth, with param key: [params].
2025-06-01 12:08:59,509 INFO: Use Exponential Moving Average with decay: 0.999
2025-06-01 12:08:59,598 INFO: Network [RRDBNet] is created.
2025-06-01 12:08:59,707 INFO: Loading RRDBNet model from /home/kevin/990Pro/AI/Anime-ESR/experiments/train_anime_RealESRNetx4plus_1000k_B12G4/models/net_g_315000.pth, with param key: [params_ema].
2025-06-01 12:08:59,741 INFO: Loss [L1Loss] is created.
2025-06-01 12:08:59,750 INFO: Model [RealESRNetModel] is created.
2025-06-01 12:08:59,754 INFO: Resuming training from epoch: 13, iter: 315000.
2025-06-01 12:08:59,816 INFO: Start training from epoch: 13, iter: 315000
2025-06-01 12:10:30,129 INFO: [train..][epoch: 13, iter: 315,100, lr:(2.000e-04,)] [eta: 7 days, 2:14:09, time (data): 0.903 (0.005)] l_pix: 4.6612e-02 
2025-06-01 12:11:54,709 INFO: [train..][epoch: 13, iter: 315,200, lr:(2.000e-04,)] [eta: 6 days, 21:34:25, time (data): 0.874 (0.004)] l_pix: 4.9664e-02 
2025-06-01 12:13:19,626 INFO: [train..][epoch: 13, iter: 315,300, lr:(2.000e-04,)] [eta: 6 days, 20:12:23, time (data): 0.849 (0.003)] l_pix: 5.9508e-02 
2025-06-01 12:14:44,417 INFO: [train..][epoch: 13, iter: 315,400, lr:(2.000e-04,)] [eta: 6 days, 19:26:59, time (data): 0.848 (0.003)] l_pix: 6.0891e-02 
2025-06-01 12:16:09,214 INFO: [train..][epoch: 13, iter: 315,500, lr:(2.000e-04,)] [eta: 6 days, 18:59:16, time (data): 0.848 (0.003)] l_pix: 4.4266e-02 
2025-06-01 12:17:34,262 INFO: [train..][epoch: 13, iter: 315,600, lr:(2.000e-04,)] [eta: 6 days, 18:45:05, time (data): 0.849 (0.003)] l_pix: 6.2676e-02 
2025-06-01 12:18:59,214 INFO: [train..][epoch: 13, iter: 315,700, lr:(2.000e-04,)] [eta: 6 days, 18:32:58, time (data): 0.849 (0.003)] l_pix: 5.4852e-02 
2025-06-01 12:20:24,152 INFO: [train..][epoch: 13, iter: 315,800, lr:(2.000e-04,)] [eta: 6 days, 18:23:20, time (data): 0.849 (0.003)] l_pix: 5.0476e-02 
2025-06-01 12:21:49,226 INFO: [train..][epoch: 13, iter: 315,900, lr:(2.000e-04,)] [eta: 6 days, 18:17:14, time (data): 0.851 (0.003)] l_pix: 4.7428e-02 
2025-06-01 12:23:14,210 INFO: [train..][epoch: 13, iter: 316,000, lr:(2.000e-04,)] [eta: 6 days, 18:11:03, time (data): 0.850 (0.003)] l_pix: 4.5597e-02 
2025-06-01 12:24:39,294 INFO: [train..][epoch: 13, iter: 316,100, lr:(2.000e-04,)] [eta: 6 days, 18:06:46, time (data): 0.851 (0.003)] l_pix: 3.3681e-02 
2025-06-01 12:26:03,790 INFO: [train..][epoch: 13, iter: 316,200, lr:(2.000e-04,)] [eta: 6 days, 17:57:23, time (data): 0.848 (0.003)] l_pix: 5.6593e-02 
2025-06-01 12:27:28,274 INFO: [train..][epoch: 13, iter: 316,300, lr:(2.000e-04,)] [eta: 6 days, 17:49:07, time (data): 0.845 (0.003)] l_pix: 3.7116e-02 
2025-06-01 12:28:52,673 INFO: [train..][epoch: 13, iter: 316,400, lr:(2.000e-04,)] [eta: 6 days, 17:41:08, time (data): 0.844 (0.003)] l_pix: 6.4538e-02 
2025-06-01 12:30:17,151 INFO: [train..][epoch: 13, iter: 316,500, lr:(2.000e-04,)] [eta: 6 days, 17:34:38, time (data): 0.845 (0.003)] l_pix: 4.9145e-02 
2025-06-01 12:31:41,888 INFO: [train..][epoch: 13, iter: 316,600, lr:(2.000e-04,)] [eta: 6 days, 17:30:37, time (data): 0.846 (0.003)] l_pix: 5.4613e-02 
2025-06-01 12:33:06,518 INFO: [train..][epoch: 13, iter: 316,700, lr:(2.000e-04,)] [eta: 6 days, 17:26:11, time (data): 0.846 (0.003)] l_pix: 4.7060e-02 
2025-06-01 12:34:31,044 INFO: [train..][epoch: 13, iter: 316,800, lr:(2.000e-04,)] [eta: 6 days, 17:21:25, time (data): 0.846 (0.003)] l_pix: 5.5525e-02 
2025-06-01 12:35:55,629 INFO: [train..][epoch: 13, iter: 316,900, lr:(2.000e-04,)] [eta: 6 days, 17:17:23, time (data): 0.846 (0.003)] l_pix: 4.8770e-02 
2025-06-01 12:37:20,066 INFO: [train..][epoch: 13, iter: 317,000, lr:(2.000e-04,)] [eta: 6 days, 17:12:45, time (data): 0.845 (0.003)] l_pix: 5.2040e-02 
2025-06-01 12:38:44,461 INFO: [train..][epoch: 13, iter: 317,100, lr:(2.000e-04,)] [eta: 6 days, 17:08:12, time (data): 0.844 (0.003)] l_pix: 3.7290e-02 
2025-06-01 12:40:09,018 INFO: [train..][epoch: 13, iter: 317,200, lr:(2.000e-04,)] [eta: 6 days, 17:04:47, time (data): 0.845 (0.003)] l_pix: 4.1723e-02 
2025-06-01 12:41:33,632 INFO: [train..][epoch: 13, iter: 317,300, lr:(2.000e-04,)] [eta: 6 days, 17:01:49, time (data): 0.846 (0.003)] l_pix: 3.6877e-02 
2025-06-01 12:42:58,095 INFO: [train..][epoch: 13, iter: 317,400, lr:(2.000e-04,)] [eta: 6 days, 16:58:15, time (data): 0.845 (0.003)] l_pix: 4.7728e-02 
2025-06-01 12:44:22,533 INFO: [train..][epoch: 13, iter: 317,500, lr:(2.000e-04,)] [eta: 6 days, 16:54:46, time (data): 0.844 (0.003)] l_pix: 5.7015e-02 
2025-06-01 12:45:46,981 INFO: [train..][epoch: 13, iter: 317,600, lr:(2.000e-04,)] [eta: 6 days, 16:51:28, time (data): 0.844 (0.003)] l_pix: 4.2579e-02 
2025-06-01 12:47:11,395 INFO: [train..][epoch: 13, iter: 317,700, lr:(2.000e-04,)] [eta: 6 days, 16:48:10, time (data): 0.844 (0.003)] l_pix: 5.5295e-02 
2025-06-01 12:48:35,944 INFO: [train..][epoch: 13, iter: 317,800, lr:(2.000e-04,)] [eta: 6 days, 16:45:34, time (data): 0.845 (0.003)] l_pix: 6.8982e-02 
2025-06-01 12:50:00,612 INFO: [train..][epoch: 13, iter: 317,900, lr:(2.000e-04,)] [eta: 6 days, 16:43:30, time (data): 0.847 (0.003)] l_pix: 5.8746e-02 
2025-06-01 12:51:25,182 INFO: [train..][epoch: 13, iter: 318,000, lr:(2.000e-04,)] [eta: 6 days, 16:41:06, time (data): 0.846 (0.003)] l_pix: 4.2064e-02 
2025-06-01 12:52:49,695 INFO: [train..][epoch: 13, iter: 318,100, lr:(2.000e-04,)] [eta: 6 days, 16:38:34, time (data): 0.845 (0.003)] l_pix: 5.2451e-02 
2025-06-01 12:54:14,239 INFO: [train..][epoch: 13, iter: 318,200, lr:(2.000e-04,)] [eta: 6 days, 16:36:13, time (data): 0.845 (0.003)] l_pix: 4.8699e-02 
2025-06-01 12:55:38,845 INFO: [train..][epoch: 13, iter: 318,300, lr:(2.000e-04,)] [eta: 6 days, 16:34:08, time (data): 0.846 (0.003)] l_pix: 4.6684e-02 
2025-06-01 12:57:03,331 INFO: [train..][epoch: 13, iter: 318,400, lr:(2.000e-04,)] [eta: 6 days, 16:31:41, time (data): 0.845 (0.003)] l_pix: 5.4581e-02 
2025-06-01 12:58:27,835 INFO: [train..][epoch: 13, iter: 318,500, lr:(2.000e-04,)] [eta: 6 days, 16:29:21, time (data): 0.845 (0.003)] l_pix: 4.3922e-02 
2025-06-01 12:59:52,300 INFO: [train..][epoch: 13, iter: 318,600, lr:(2.000e-04,)] [eta: 6 days, 16:26:57, time (data): 0.845 (0.003)] l_pix: 4.2091e-02 
2025-06-01 13:01:17,018 INFO: [train..][epoch: 13, iter: 318,700, lr:(2.000e-04,)] [eta: 6 days, 16:25:23, time (data): 0.847 (0.003)] l_pix: 4.9251e-02 
2025-06-01 13:02:41,828 INFO: [train..][epoch: 13, iter: 318,800, lr:(2.000e-04,)] [eta: 6 days, 16:24:06, time (data): 0.848 (0.003)] l_pix: 5.7604e-02 
2025-06-01 13:04:06,368 INFO: [train..][epoch: 13, iter: 318,900, lr:(2.000e-04,)] [eta: 6 days, 16:22:01, time (data): 0.845 (0.003)] l_pix: 3.8692e-02 
2025-06-01 13:05:30,810 INFO: [train..][epoch: 13, iter: 319,000, lr:(2.000e-04,)] [eta: 6 days, 16:19:42, time (data): 0.845 (0.003)] l_pix: 4.4401e-02 
2025-06-01 13:06:55,461 INFO: [train..][epoch: 13, iter: 319,100, lr:(2.000e-04,)] [eta: 6 days, 16:18:00, time (data): 0.845 (0.003)] l_pix: 4.5461e-02 
2025-06-01 13:08:19,979 INFO: [train..][epoch: 13, iter: 319,200, lr:(2.000e-04,)] [eta: 6 days, 16:15:57, time (data): 0.845 (0.003)] l_pix: 4.1639e-02 
2025-06-01 13:09:44,525 INFO: [train..][epoch: 13, iter: 319,300, lr:(2.000e-04,)] [eta: 6 days, 16:14:00, time (data): 0.844 (0.003)] l_pix: 4.6090e-02 
2025-06-01 13:11:09,170 INFO: [train..][epoch: 13, iter: 319,400, lr:(2.000e-04,)] [eta: 6 days, 16:12:21, time (data): 0.846 (0.003)] l_pix: 3.8374e-02 
2025-06-01 13:12:33,605 INFO: [train..][epoch: 13, iter: 319,500, lr:(2.000e-04,)] [eta: 6 days, 16:10:10, time (data): 0.844 (0.003)] l_pix: 4.1833e-02 
2025-06-01 13:13:58,108 INFO: [train..][epoch: 13, iter: 319,600, lr:(2.000e-04,)] [eta: 6 days, 16:08:11, time (data): 0.844 (0.003)] l_pix: 5.1018e-02 
2025-06-01 13:15:22,780 INFO: [train..][epoch: 13, iter: 319,700, lr:(2.000e-04,)] [eta: 6 days, 16:06:38, time (data): 0.846 (0.003)] l_pix: 5.3884e-02 
2025-06-01 13:16:47,608 INFO: [train..][epoch: 13, iter: 319,800, lr:(2.000e-04,)] [eta: 6 days, 16:05:27, time (data): 0.847 (0.003)] l_pix: 4.4669e-02 
2025-06-01 13:18:12,138 INFO: [train..][epoch: 13, iter: 319,900, lr:(2.000e-04,)] [eta: 6 days, 16:03:35, time (data): 0.845 (0.003)] l_pix: 4.0133e-02 
2025-06-01 13:19:36,767 INFO: [train..][epoch: 13, iter: 320,000, lr:(2.000e-04,)] [eta: 6 days, 16:01:57, time (data): 0.846 (0.003)] l_pix: 4.9992e-02 
2025-06-01 13:19:36,768 INFO: Saving models and training states.
2025-06-01 13:27:36,104 INFO: Validation validation
	 # psnr: 27.2347	Best: 27.2347 @ 320000 iter

2025-06-01 13:29:00,575 INFO: [train..][epoch: 13, iter: 320,100, lr:(2.000e-04,)] [eta: 7 days, 9:44:48, time (data): 0.846 (0.003)] l_pix: 4.6268e-02 
2025-06-01 13:30:24,907 INFO: [train..][epoch: 13, iter: 320,200, lr:(2.000e-04,)] [eta: 7 days, 9:21:56, time (data): 0.845 (0.003)] l_pix: 5.4920e-02 
2025-06-01 13:31:49,602 INFO: [train..][epoch: 13, iter: 320,300, lr:(2.000e-04,)] [eta: 7 days, 9:00:38, time (data): 0.847 (0.003)] l_pix: 5.3451e-02 
2025-06-01 13:33:14,257 INFO: [train..][epoch: 13, iter: 320,400, lr:(2.000e-04,)] [eta: 7 days, 8:39:59, time (data): 0.847 (0.003)] l_pix: 3.4892e-02 
2025-06-01 13:34:38,752 INFO: [train..][epoch: 13, iter: 320,500, lr:(2.000e-04,)] [eta: 7 days, 8:19:43, time (data): 0.845 (0.003)] l_pix: 4.3576e-02 
2025-06-01 13:36:03,201 INFO: [train..][epoch: 13, iter: 320,600, lr:(2.000e-04,)] [eta: 7 days, 8:00:01, time (data): 0.845 (0.003)] l_pix: 3.2570e-02 
2025-06-01 13:37:27,601 INFO: [train..][epoch: 13, iter: 320,700, lr:(2.000e-04,)] [eta: 7 days, 7:40:53, time (data): 0.844 (0.003)] l_pix: 4.5729e-02 
2025-06-01 13:38:52,334 INFO: [train..][epoch: 13, iter: 320,800, lr:(2.000e-04,)] [eta: 7 days, 7:22:59, time (data): 0.846 (0.003)] l_pix: 5.0195e-02 
2025-06-01 13:40:16,846 INFO: [train..][epoch: 13, iter: 320,900, lr:(2.000e-04,)] [eta: 7 days, 7:05:14, time (data): 0.845 (0.003)] l_pix: 4.4556e-02 
2025-06-01 13:41:41,484 INFO: [train..][epoch: 13, iter: 321,000, lr:(2.000e-04,)] [eta: 7 days, 6:48:16, time (data): 0.846 (0.003)] l_pix: 6.8188e-02 
2025-06-01 13:43:05,800 INFO: [train..][epoch: 13, iter: 321,100, lr:(2.000e-04,)] [eta: 7 days, 6:31:13, time (data): 0.843 (0.003)] l_pix: 5.3093e-02 
2025-06-01 13:44:30,420 INFO: [train..][epoch: 13, iter: 321,200, lr:(2.000e-04,)] [eta: 7 days, 6:15:13, time (data): 0.845 (0.003)] l_pix: 4.9991e-02 
2025-06-01 13:45:55,015 INFO: [train..][epoch: 13, iter: 321,300, lr:(2.000e-04,)] [eta: 7 days, 5:59:38, time (data): 0.846 (0.003)] l_pix: 4.1636e-02 
2025-06-01 13:47:19,523 INFO: [train..][epoch: 13, iter: 321,400, lr:(2.000e-04,)] [eta: 7 days, 5:44:21, time (data): 0.845 (0.003)] l_pix: 4.6879e-02 
2025-06-01 13:48:44,130 INFO: [train..][epoch: 13, iter: 321,500, lr:(2.000e-04,)] [eta: 7 days, 5:29:39, time (data): 0.847 (0.003)] l_pix: 4.8695e-02 
2025-06-01 13:50:08,671 INFO: [train..][epoch: 13, iter: 321,600, lr:(2.000e-04,)] [eta: 7 days, 5:15:15, time (data): 0.846 (0.003)] l_pix: 4.3136e-02 
2025-06-01 13:51:33,073 INFO: [train..][epoch: 13, iter: 321,700, lr:(2.000e-04,)] [eta: 7 days, 5:01:00, time (data): 0.844 (0.003)] l_pix: 4.0351e-02 
2025-06-01 13:52:57,662 INFO: [train..][epoch: 13, iter: 321,800, lr:(2.000e-04,)] [eta: 7 days, 4:47:27, time (data): 0.845 (0.003)] l_pix: 4.5838e-02 
2025-06-01 13:54:22,273 INFO: [train..][epoch: 13, iter: 321,900, lr:(2.000e-04,)] [eta: 7 days, 4:34:16, time (data): 0.846 (0.003)] l_pix: 5.3160e-02 
2025-06-01 13:55:46,789 INFO: [train..][epoch: 13, iter: 322,000, lr:(2.000e-04,)] [eta: 7 days, 4:21:17, time (data): 0.846 (0.003)] l_pix: 4.1375e-02 
2025-06-01 13:57:11,308 INFO: [train..][epoch: 13, iter: 322,100, lr:(2.000e-04,)] [eta: 7 days, 4:08:38, time (data): 0.845 (0.003)] l_pix: 3.4115e-02 
2025-06-01 13:58:35,820 INFO: [train..][epoch: 13, iter: 322,200, lr:(2.000e-04,)] [eta: 7 days, 3:56:16, time (data): 0.845 (0.003)] l_pix: 4.8271e-02 
2025-06-01 14:00:00,272 INFO: [train..][epoch: 13, iter: 322,300, lr:(2.000e-04,)] [eta: 7 days, 3:44:07, time (data): 0.845 (0.003)] l_pix: 4.5335e-02 
2025-06-01 14:01:24,710 INFO: [train..][epoch: 13, iter: 322,400, lr:(2.000e-04,)] [eta: 7 days, 3:32:14, time (data): 0.845 (0.003)] l_pix: 5.8924e-02 
2025-06-01 14:02:49,282 INFO: [train..][epoch: 13, iter: 322,500, lr:(2.000e-04,)] [eta: 7 days, 3:20:50, time (data): 0.846 (0.003)] l_pix: 4.4380e-02 
2025-06-01 14:04:13,718 INFO: [train..][epoch: 13, iter: 322,600, lr:(2.000e-04,)] [eta: 7 days, 3:09:30, time (data): 0.845 (0.003)] l_pix: 5.6455e-02 
2025-06-01 14:05:38,103 INFO: [train..][epoch: 13, iter: 322,700, lr:(2.000e-04,)] [eta: 7 days, 2:58:21, time (data): 0.845 (0.003)] l_pix: 3.9601e-02 
2025-06-01 14:07:02,613 INFO: [train..][epoch: 13, iter: 322,800, lr:(2.000e-04,)] [eta: 7 days, 2:47:37, time (data): 0.845 (0.003)] l_pix: 5.4886e-02 
2025-06-01 14:08:27,051 INFO: [train..][epoch: 13, iter: 322,900, lr:(2.000e-04,)] [eta: 7 days, 2:37:02, time (data): 0.843 (0.003)] l_pix: 5.1991e-02 
2025-06-01 14:09:51,655 INFO: [train..][epoch: 13, iter: 323,000, lr:(2.000e-04,)] [eta: 7 days, 2:26:54, time (data): 0.845 (0.003)] l_pix: 5.5773e-02 
2025-06-01 14:11:16,292 INFO: [train..][epoch: 13, iter: 323,100, lr:(2.000e-04,)] [eta: 7 days, 2:17:02, time (data): 0.847 (0.003)] l_pix: 4.5350e-02 
2025-06-01 14:12:40,735 INFO: [train..][epoch: 13, iter: 323,200, lr:(2.000e-04,)] [eta: 7 days, 2:07:06, time (data): 0.845 (0.003)] l_pix: 4.8043e-02 
2025-06-01 14:14:05,213 INFO: [train..][epoch: 13, iter: 323,300, lr:(2.000e-04,)] [eta: 7 days, 1:57:26, time (data): 0.844 (0.003)] l_pix: 4.8495e-02 
2025-06-01 14:15:29,710 INFO: [train..][epoch: 13, iter: 323,400, lr:(2.000e-04,)] [eta: 7 days, 1:47:59, time (data): 0.845 (0.003)] l_pix: 4.6517e-02 
2025-06-01 14:16:54,369 INFO: [train..][epoch: 13, iter: 323,500, lr:(2.000e-04,)] [eta: 7 days, 1:38:56, time (data): 0.846 (0.003)] l_pix: 4.6794e-02 
2025-06-01 14:18:18,710 INFO: [train..][epoch: 13, iter: 323,600, lr:(2.000e-04,)] [eta: 7 days, 1:29:39, time (data): 0.845 (0.003)] l_pix: 4.6522e-02 
2025-06-01 14:19:43,273 INFO: [train..][epoch: 13, iter: 323,700, lr:(2.000e-04,)] [eta: 7 days, 1:20:49, time (data): 0.846 (0.003)] l_pix: 5.5734e-02 
2025-06-01 14:21:07,957 INFO: [train..][epoch: 13, iter: 323,800, lr:(2.000e-04,)] [eta: 7 days, 1:12:20, time (data): 0.846 (0.003)] l_pix: 4.7749e-02 
2025-06-01 14:22:32,516 INFO: [train..][epoch: 13, iter: 323,900, lr:(2.000e-04,)] [eta: 7 days, 1:03:50, time (data): 0.845 (0.003)] l_pix: 6.0073e-02 
2025-06-01 14:23:57,430 INFO: [train..][epoch: 13, iter: 324,000, lr:(2.000e-04,)] [eta: 7 days, 0:55:56, time (data): 0.848 (0.003)] l_pix: 4.0759e-02 
2025-06-01 14:25:21,846 INFO: [train..][epoch: 13, iter: 324,100, lr:(2.000e-04,)] [eta: 7 days, 0:47:34, time (data): 0.843 (0.003)] l_pix: 5.1879e-02 
2025-06-01 14:26:46,531 INFO: [train..][epoch: 13, iter: 324,200, lr:(2.000e-04,)] [eta: 7 days, 0:39:41, time (data): 0.845 (0.003)] l_pix: 4.9871e-02 
2025-06-01 14:28:11,001 INFO: [train..][epoch: 13, iter: 324,300, lr:(2.000e-04,)] [eta: 7 days, 0:31:41, time (data): 0.846 (0.003)] l_pix: 3.9163e-02 
2025-06-01 14:29:35,630 INFO: [train..][epoch: 13, iter: 324,400, lr:(2.000e-04,)] [eta: 7 days, 0:24:00, time (data): 0.846 (0.003)] l_pix: 4.2566e-02 
2025-06-01 14:31:00,172 INFO: [train..][epoch: 13, iter: 324,500, lr:(2.000e-04,)] [eta: 7 days, 0:16:21, time (data): 0.844 (0.003)] l_pix: 5.5948e-02 
2025-06-01 14:32:24,737 INFO: [train..][epoch: 13, iter: 324,600, lr:(2.000e-04,)] [eta: 7 days, 0:08:52, time (data): 0.845 (0.003)] l_pix: 4.8325e-02 
2025-06-01 14:33:49,306 INFO: [train..][epoch: 13, iter: 324,700, lr:(2.000e-04,)] [eta: 7 days, 0:01:30, time (data): 0.845 (0.003)] l_pix: 4.5027e-02 
2025-06-01 14:35:13,834 INFO: [train..][epoch: 13, iter: 324,800, lr:(2.000e-04,)] [eta: 6 days, 23:54:13, time (data): 0.845 (0.003)] l_pix: 5.7144e-02 
2025-06-01 14:36:38,391 INFO: [train..][epoch: 13, iter: 324,900, lr:(2.000e-04,)] [eta: 6 days, 23:47:05, time (data): 0.847 (0.003)] l_pix: 5.4539e-02 
2025-06-01 14:38:02,961 INFO: [train..][epoch: 13, iter: 325,000, lr:(2.000e-04,)] [eta: 6 days, 23:40:05, time (data): 0.846 (0.003)] l_pix: 4.2005e-02 
2025-06-01 14:38:02,962 INFO: Saving models and training states.
2025-06-01 14:43:23,013 INFO: Validation validation
	 # psnr: 27.0903	Best: 27.2347 @ 320000 iter

2025-06-01 14:44:47,464 INFO: [train..][epoch: 13, iter: 325,100, lr:(2.000e-04,)] [eta: 7 days, 5:29:27, time (data): 0.844 (0.003)] l_pix: 4.7590e-02 
2025-06-01 14:46:12,045 INFO: [train..][epoch: 13, iter: 325,200, lr:(2.000e-04,)] [eta: 7 days, 5:19:08, time (data): 0.845 (0.003)] l_pix: 4.5940e-02 
2025-06-01 14:47:36,709 INFO: [train..][epoch: 13, iter: 325,300, lr:(2.000e-04,)] [eta: 7 days, 5:09:05, time (data): 0.847 (0.003)] l_pix: 5.6880e-02 
2025-06-01 14:49:01,151 INFO: [train..][epoch: 13, iter: 325,400, lr:(2.000e-04,)] [eta: 7 days, 4:58:57, time (data): 0.845 (0.003)] l_pix: 4.7210e-02 
2025-06-01 14:50:25,659 INFO: [train..][epoch: 13, iter: 325,500, lr:(2.000e-04,)] [eta: 7 days, 4:49:03, time (data): 0.845 (0.003)] l_pix: 4.9782e-02 
2025-06-01 14:51:50,088 INFO: [train..][epoch: 13, iter: 325,600, lr:(2.000e-04,)] [eta: 7 days, 4:39:14, time (data): 0.844 (0.003)] l_pix: 5.0923e-02 
2025-06-01 14:53:14,596 INFO: [train..][epoch: 13, iter: 325,700, lr:(2.000e-04,)] [eta: 7 days, 4:29:40, time (data): 0.847 (0.003)] l_pix: 5.2066e-02 
2025-06-01 14:54:39,220 INFO: [train..][epoch: 13, iter: 325,800, lr:(2.000e-04,)] [eta: 7 days, 4:20:21, time (data): 0.847 (0.003)] l_pix: 5.5692e-02 
2025-06-01 14:56:03,651 INFO: [train..][epoch: 13, iter: 325,900, lr:(2.000e-04,)] [eta: 7 days, 4:11:00, time (data): 0.845 (0.003)] l_pix: 5.0938e-02 
2025-06-01 14:57:28,094 INFO: [train..][epoch: 13, iter: 326,000, lr:(2.000e-04,)] [eta: 7 days, 4:01:48, time (data): 0.845 (0.003)] l_pix: 4.9159e-02 
2025-06-01 14:58:52,753 INFO: [train..][epoch: 13, iter: 326,100, lr:(2.000e-04,)] [eta: 7 days, 3:52:57, time (data): 0.845 (0.003)] l_pix: 4.3815e-02 
2025-06-01 15:00:17,476 INFO: [train..][epoch: 13, iter: 326,200, lr:(2.000e-04,)] [eta: 7 days, 3:44:19, time (data): 0.847 (0.003)] l_pix: 4.3665e-02 
2025-06-01 15:01:41,946 INFO: [train..][epoch: 13, iter: 326,300, lr:(2.000e-04,)] [eta: 7 days, 3:35:32, time (data): 0.846 (0.003)] l_pix: 5.0437e-02 
2025-06-01 15:03:06,642 INFO: [train..][epoch: 13, iter: 326,400, lr:(2.000e-04,)] [eta: 7 days, 3:27:07, time (data): 0.847 (0.003)] l_pix: 5.2352e-02 
2025-06-01 15:04:31,156 INFO: [train..][epoch: 13, iter: 326,500, lr:(2.000e-04,)] [eta: 7 days, 3:18:39, time (data): 0.845 (0.003)] l_pix: 4.6614e-02 
2025-06-01 15:05:55,622 INFO: [train..][epoch: 13, iter: 326,600, lr:(2.000e-04,)] [eta: 7 days, 3:10:15, time (data): 0.845 (0.003)] l_pix: 4.1407e-02 
2025-06-01 15:07:20,378 INFO: [train..][epoch: 13, iter: 326,700, lr:(2.000e-04,)] [eta: 7 days, 3:02:15, time (data): 0.848 (0.003)] l_pix: 5.2517e-02 
2025-06-01 15:08:45,281 INFO: [train..][epoch: 13, iter: 326,800, lr:(2.000e-04,)] [eta: 7 days, 2:54:30, time (data): 0.849 (0.003)] l_pix: 6.4130e-02 
2025-06-01 15:10:09,979 INFO: [train..][epoch: 13, iter: 326,900, lr:(2.000e-04,)] [eta: 7 days, 2:46:40, time (data): 0.847 (0.003)] l_pix: 4.1308e-02 
2025-06-01 15:11:34,412 INFO: [train..][epoch: 13, iter: 327,000, lr:(2.000e-04,)] [eta: 7 days, 2:38:41, time (data): 0.845 (0.003)] l_pix: 4.5209e-02 
2025-06-01 15:12:59,196 INFO: [train..][epoch: 13, iter: 327,100, lr:(2.000e-04,)] [eta: 7 days, 2:31:09, time (data): 0.848 (0.003)] l_pix: 4.3800e-02 
2025-06-01 15:14:23,748 INFO: [train..][epoch: 13, iter: 327,200, lr:(2.000e-04,)] [eta: 7 days, 2:23:29, time (data): 0.846 (0.003)] l_pix: 4.4009e-02 
2025-06-01 15:15:48,366 INFO: [train..][epoch: 13, iter: 327,300, lr:(2.000e-04,)] [eta: 7 days, 2:16:00, time (data): 0.844 (0.003)] l_pix: 5.2065e-02 
2025-06-01 15:17:12,948 INFO: [train..][epoch: 13, iter: 327,400, lr:(2.000e-04,)] [eta: 7 days, 2:08:34, time (data): 0.845 (0.003)] l_pix: 5.0531e-02 
2025-06-01 15:18:37,332 INFO: [train..][epoch: 13, iter: 327,500, lr:(2.000e-04,)] [eta: 7 days, 2:01:03, time (data): 0.844 (0.003)] l_pix: 4.5105e-02 
2025-06-01 15:20:02,129 INFO: [train..][epoch: 13, iter: 327,600, lr:(2.000e-04,)] [eta: 7 days, 1:54:01, time (data): 0.847 (0.003)] l_pix: 5.0198e-02 
2025-06-01 15:21:26,661 INFO: [train..][epoch: 13, iter: 327,700, lr:(2.000e-04,)] [eta: 7 days, 1:46:49, time (data): 0.846 (0.003)] l_pix: 4.6204e-02 
2025-06-01 15:22:51,049 INFO: [train..][epoch: 13, iter: 327,800, lr:(2.000e-04,)] [eta: 7 days, 1:39:36, time (data): 0.844 (0.003)] l_pix: 7.0831e-02 
2025-06-01 15:24:15,614 INFO: [train..][epoch: 13, iter: 327,900, lr:(2.000e-04,)] [eta: 7 days, 1:32:37, time (data): 0.846 (0.003)] l_pix: 5.1554e-02 
2025-06-01 15:25:40,152 INFO: [train..][epoch: 13, iter: 328,000, lr:(2.000e-04,)] [eta: 7 days, 1:25:41, time (data): 0.846 (0.003)] l_pix: 4.0839e-02 
2025-06-01 15:27:04,784 INFO: [train..][epoch: 13, iter: 328,100, lr:(2.000e-04,)] [eta: 7 days, 1:18:56, time (data): 0.845 (0.003)] l_pix: 4.0354e-02 
2025-06-01 15:28:29,173 INFO: [train..][epoch: 13, iter: 328,200, lr:(2.000e-04,)] [eta: 7 days, 1:12:03, time (data): 0.844 (0.003)] l_pix: 5.1674e-02 
2025-06-01 15:29:53,747 INFO: [train..][epoch: 13, iter: 328,300, lr:(2.000e-04,)] [eta: 7 days, 1:05:25, time (data): 0.846 (0.003)] l_pix: 5.4610e-02 
2025-06-01 15:31:18,386 INFO: [train..][epoch: 13, iter: 328,400, lr:(2.000e-04,)] [eta: 7 days, 0:58:54, time (data): 0.846 (0.003)] l_pix: 4.0778e-02 
2025-06-01 15:32:42,928 INFO: [train..][epoch: 13, iter: 328,500, lr:(2.000e-04,)] [eta: 7 days, 0:52:23, time (data): 0.843 (0.003)] l_pix: 5.2042e-02 
2025-06-01 15:34:07,620 INFO: [train..][epoch: 13, iter: 328,600, lr:(2.000e-04,)] [eta: 7 days, 0:46:04, time (data): 0.846 (0.003)] l_pix: 5.5466e-02 
2025-06-01 15:35:32,199 INFO: [train..][epoch: 13, iter: 328,700, lr:(2.000e-04,)] [eta: 7 days, 0:39:44, time (data): 0.844 (0.003)] l_pix: 3.5144e-02 
2025-06-01 15:36:56,800 INFO: [train..][epoch: 13, iter: 328,800, lr:(2.000e-04,)] [eta: 7 days, 0:33:29, time (data): 0.846 (0.003)] l_pix: 4.0375e-02 
2025-06-01 15:38:21,444 INFO: [train..][epoch: 13, iter: 328,900, lr:(2.000e-04,)] [eta: 7 days, 0:27:21, time (data): 0.848 (0.003)] l_pix: 4.8736e-02 
2025-06-01 15:39:45,997 INFO: [train..][epoch: 13, iter: 329,000, lr:(2.000e-04,)] [eta: 7 days, 0:21:12, time (data): 0.846 (0.003)] l_pix: 4.7994e-02 
2025-06-01 15:41:10,508 INFO: [train..][epoch: 13, iter: 329,100, lr:(2.000e-04,)] [eta: 7 days, 0:15:05, time (data): 0.844 (0.003)] l_pix: 4.4802e-02 
2025-06-01 15:42:35,074 INFO: [train..][epoch: 13, iter: 329,200, lr:(2.000e-04,)] [eta: 7 days, 0:09:04, time (data): 0.845 (0.003)] l_pix: 5.6853e-02 
2025-06-01 15:43:59,562 INFO: [train..][epoch: 13, iter: 329,300, lr:(2.000e-04,)] [eta: 7 days, 0:03:04, time (data): 0.847 (0.003)] l_pix: 6.1308e-02 
2025-06-01 15:45:24,028 INFO: [train..][epoch: 13, iter: 329,400, lr:(2.000e-04,)] [eta: 6 days, 23:57:07, time (data): 0.845 (0.003)] l_pix: 4.4504e-02 
2025-06-01 15:46:48,554 INFO: [train..][epoch: 13, iter: 329,500, lr:(2.000e-04,)] [eta: 6 days, 23:51:16, time (data): 0.844 (0.003)] l_pix: 4.9198e-02 
2025-06-01 15:48:13,046 INFO: [train..][epoch: 13, iter: 329,600, lr:(2.000e-04,)] [eta: 6 days, 23:45:28, time (data): 0.845 (0.003)] l_pix: 3.8152e-02 
2025-06-01 15:49:37,401 INFO: [train..][epoch: 13, iter: 329,700, lr:(2.000e-04,)] [eta: 6 days, 23:39:36, time (data): 0.842 (0.003)] l_pix: 4.9666e-02 
2025-06-01 15:51:02,106 INFO: [train..][epoch: 13, iter: 329,800, lr:(2.000e-04,)] [eta: 6 days, 23:34:04, time (data): 0.846 (0.003)] l_pix: 4.4550e-02 
2025-06-01 15:52:26,683 INFO: [train..][epoch: 13, iter: 329,900, lr:(2.000e-04,)] [eta: 6 days, 23:28:30, time (data): 0.853 (0.003)] l_pix: 3.5208e-02 
2025-06-01 15:53:52,848 INFO: [train..][epoch: 13, iter: 330,000, lr:(2.000e-04,)] [eta: 6 days, 23:24:10, time (data): 0.860 (0.003)] l_pix: 4.6253e-02 
2025-06-01 15:53:52,849 INFO: Saving models and training states.
2025-06-01 15:59:21,984 INFO: Validation validation
	 # psnr: 27.1824	Best: 27.2347 @ 320000 iter

2025-06-01 16:00:49,922 INFO: [train..][epoch: 13, iter: 330,100, lr:(2.000e-04,)] [eta: 7 days, 3:24:32, time (data): 0.934 (0.003)] l_pix: 5.8680e-02 
