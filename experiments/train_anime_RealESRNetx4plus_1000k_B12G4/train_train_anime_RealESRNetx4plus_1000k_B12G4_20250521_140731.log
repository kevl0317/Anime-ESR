2025-05-21 14:07:31,646 INFO: 
                ____                _       _____  ____
               / __ ) ____ _ _____ (_)_____/ ___/ / __ \
              / __  |/ __ `// ___// // ___/\__ \ / /_/ /
             / /_/ // /_/ /(__  )/ // /__ ___/ // _, _/
            /_____/ \__,_//____//_/ \___//____//_/ |_|
     ______                   __   __                 __      __
    / ____/____   ____   ____/ /  / /   __  __ _____ / /__   / /
   / / __ / __ \ / __ \ / __  /  / /   / / / // ___// //_/  / /
  / /_/ // /_/ // /_/ // /_/ /  / /___/ /_/ // /__ / /<    /_/
  \____/ \____/ \____/ \____/  /_____/\____/ \___//_/|_|  (_)
    
Version Information: 
	BasicSR: 1.4.2
	PyTorch: 2.7.0+cu128
	TorchVision: 0.22.0+cu128
2025-05-21 14:07:31,646 INFO: 
  name: train_anime_RealESRNetx4plus_1000k_B12G4
  model_type: RealESRNetModel
  scale: 4
  num_gpu: 1
  manual_seed: 0
  gt_usm: True
  resize_prob: [0.2, 0.7, 0.1]
  resize_range: [0.15, 1.5]
  gaussian_noise_prob: 0.5
  noise_range: [1, 30]
  poisson_scale_range: [0.05, 3]
  gray_noise_prob: 0.4
  jpeg_range: [30, 95]
  second_blur_prob: 0.8
  resize_prob2: [0.3, 0.4, 0.3]
  resize_range2: [0.3, 1.2]
  gaussian_noise_prob2: 0.5
  noise_range2: [1, 25]
  poisson_scale_range2: [0.05, 2.5]
  gray_noise_prob2: 0.4
  jpeg_range2: [30, 95]
  gt_size: 256
  queue_size: 320
  datasets:[
    train:[
      name: Anime
      type: RealESRGANDataset
      dataroot_gt: datasets/anime
      meta_info: datasets/anime/meta_info_train.txt
      io_backend:[
        type: disk
      ]
      blur_kernel_size: 21
      kernel_list: ['iso', 'aniso', 'generalized_iso', 'generalized_aniso', 'plateau_iso', 'plateau_aniso']
      kernel_prob: [0.45, 0.25, 0.12, 0.03, 0.12, 0.03]
      sinc_prob: 0.1
      blur_sigma: [0.2, 3]
      betag_range: [0.5, 4]
      betap_range: [1, 2]
      blur_kernel_size2: 21
      kernel_list2: ['iso', 'aniso', 'generalized_iso', 'generalized_aniso', 'plateau_iso', 'plateau_aniso']
      kernel_prob2: [0.45, 0.25, 0.12, 0.03, 0.12, 0.03]
      sinc_prob2: 0.1
      blur_sigma2: [0.2, 1.5]
      betag_range2: [0.5, 4]
      betap_range2: [1, 2]
      final_sinc_prob: 0.8
      gt_size: 256
      use_hflip: True
      use_rot: False
      use_shuffle: True
      num_worker_per_gpu: 5
      batch_size_per_gpu: 16
      dataset_enlarge_ratio: 1
      prefetch_mode: None
      phase: train
      scale: 4
    ]
    val:[
      name: validation
      type: PairedImageDataset
      dataroot_gt: datasets/anime/galData_val
      dataroot_lq: datasets/anime/galData_val_lr_x4_bicubic
      io_backend:[
        type: disk
      ]
      phase: val
      scale: 4
    ]
  ]
  network_g:[
    type: RRDBNet
    num_in_ch: 3
    num_out_ch: 3
    num_feat: 64
    num_block: 23
    num_grow_ch: 32
  ]
  path:[
    pretrain_network_g: G:\AI\Anime-ESR\experiments\train_anime_RealESRNetx4plus_1000k_B12G4\models\net_g_50000.pth
    param_key_g: params
    strict_load_g: True
    resume_state: experiments\train_anime_RealESRNetx4plus_1000k_B12G4\training_states\50000.state
    experiments_root: G:\AI\Anime-ESR\experiments\train_anime_RealESRNetx4plus_1000k_B12G4
    models: G:\AI\Anime-ESR\experiments\train_anime_RealESRNetx4plus_1000k_B12G4\models
    training_states: G:\AI\Anime-ESR\experiments\train_anime_RealESRNetx4plus_1000k_B12G4\training_states
    log: G:\AI\Anime-ESR\experiments\train_anime_RealESRNetx4plus_1000k_B12G4
    visualization: G:\AI\Anime-ESR\experiments\train_anime_RealESRNetx4plus_1000k_B12G4\visualization
  ]
  train:[
    ema_decay: 0.999
    optim_g:[
      type: Adam
      lr: 0.0002
      weight_decay: 0
      betas: [0.9, 0.99]
    ]
    scheduler:[
      type: MultiStepLR
      milestones: [1000000]
      gamma: 0.5
    ]
    total_iter: 1000000
    warmup_iter: -1
    pixel_opt:[
      type: L1Loss
      loss_weight: 1.0
      reduction: mean
    ]
  ]
  val:[
    val_freq: 5000.0
    save_img: True
    metrics:[
      psnr:[
        type: calculate_psnr
        crop_border: 4
        test_y_channel: False
      ]
    ]
  ]
  logger:[
    print_freq: 100
    save_checkpoint_freq: 5000.0
    use_tb_logger: True
    wandb:[
      project: None
      resume_id: None
    ]
  ]
  dist_params:[
    backend: nccl
    port: 29500
  ]
  dist: False
  rank: 0
  world_size: 1
  auto_resume: True
  is_train: True
  root_path: G:\AI\Anime-ESR

2025-05-21 14:07:32,317 INFO: Dataset [RealESRGANDataset] - Anime is built.
2025-05-21 14:07:32,317 INFO: Training statistics:
	Number of train images: 299263
	Dataset enlarge ratio: 1
	Batch size per gpu: 16
	World size (gpu number): 1
	Require iter number per epoch: 18704
	Total epochs: 54; iters: 1000000.
2025-05-21 14:07:32,337 INFO: Dataset [PairedImageDataset] - validation is built.
2025-05-21 14:07:32,339 INFO: Number of val images/folders in validation: 488
2025-05-21 14:07:32,492 INFO: Network [RRDBNet] is created.
2025-05-21 14:07:32,530 INFO: Network: RRDBNet, with parameters: 16,697,987
2025-05-21 14:07:32,530 INFO: RRDBNet(
  (conv_first): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (body): Sequential(
    (0): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (5): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (6): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (7): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (8): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (9): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (10): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (11): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (12): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (13): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (14): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (15): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (16): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (17): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (18): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (19): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (20): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (21): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (22): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
  (conv_body): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv_up1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv_up2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv_hr): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv_last): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
)
2025-05-21 14:07:32,672 INFO: Loading RRDBNet model from G:\AI\Anime-ESR\experiments\train_anime_RealESRNetx4plus_1000k_B12G4\models\net_g_50000.pth, with param key: [params].
2025-05-21 14:07:32,755 INFO: Use Exponential Moving Average with decay: 0.999
2025-05-21 14:07:32,894 INFO: Network [RRDBNet] is created.
2025-05-21 14:07:33,049 INFO: Loading RRDBNet model from G:\AI\Anime-ESR\experiments\train_anime_RealESRNetx4plus_1000k_B12G4\models\net_g_50000.pth, with param key: [params_ema].
2025-05-21 14:07:33,133 INFO: Loss [L1Loss] is created.
2025-05-21 14:07:33,146 INFO: Model [RealESRNetModel] is created.
2025-05-21 14:07:33,153 INFO: Resuming training from epoch: 2, iter: 50000.
2025-05-21 14:07:48,440 INFO: Start training from epoch: 2, iter: 50000
2025-05-21 14:09:46,520 INFO: [train..][epoch:  2, iter:  50,100, lr:(2.000e-04,)] [eta: 14 days, 12:25:06, time (data): 1.181 (0.161)] l_pix: 5.1011e-02 
2025-05-21 14:11:21,971 INFO: [train..][epoch:  2, iter:  50,200, lr:(2.000e-04,)] [eta: 12 days, 12:20:46, time (data): 1.068 (0.083)] l_pix: 5.1044e-02 
2025-05-21 14:13:01,011 INFO: [train..][epoch:  2, iter:  50,300, lr:(2.000e-04,)] [eta: 11 days, 23:20:40, time (data): 0.991 (0.006)] l_pix: 5.3320e-02 
2025-05-21 14:14:32,579 INFO: [train..][epoch:  2, iter:  50,400, lr:(2.000e-04,)] [eta: 11 days, 11:53:53, time (data): 0.953 (0.005)] l_pix: 5.9298e-02 
2025-05-21 14:16:07,729 INFO: [train..][epoch:  2, iter:  50,500, lr:(2.000e-04,)] [eta: 11 days, 6:53:47, time (data): 0.953 (0.006)] l_pix: 4.9839e-02 
2025-05-21 14:17:36,303 INFO: [train..][epoch:  2, iter:  50,600, lr:(2.000e-04,)] [eta: 11 days, 0:39:54, time (data): 0.919 (0.006)] l_pix: 4.0368e-02 
2025-05-21 14:19:04,676 INFO: [train..][epoch:  2, iter:  50,700, lr:(2.000e-04,)] [eta: 10 days, 20:07:45, time (data): 0.883 (0.006)] l_pix: 6.4411e-02 
2025-05-21 14:20:33,076 INFO: [train..][epoch:  2, iter:  50,800, lr:(2.000e-04,)] [eta: 10 days, 16:43:42, time (data): 0.884 (0.006)] l_pix: 6.0683e-02 
2025-05-21 14:22:01,579 INFO: [train..][epoch:  2, iter:  50,900, lr:(2.000e-04,)] [eta: 10 days, 14:06:25, time (data): 0.885 (0.006)] l_pix: 4.7632e-02 
2025-05-21 14:23:29,929 INFO: [train..][epoch:  2, iter:  51,000, lr:(2.000e-04,)] [eta: 10 days, 11:57:52, time (data): 0.884 (0.006)] l_pix: 5.2759e-02 
2025-05-21 14:24:58,779 INFO: [train..][epoch:  2, iter:  51,100, lr:(2.000e-04,)] [eta: 10 days, 10:19:34, time (data): 0.889 (0.006)] l_pix: 4.2681e-02 
2025-05-21 14:26:27,358 INFO: [train..][epoch:  2, iter:  51,200, lr:(2.000e-04,)] [eta: 10 days, 8:53:50, time (data): 0.887 (0.006)] l_pix: 4.5159e-02 
2025-05-21 14:27:55,891 INFO: [train..][epoch:  2, iter:  51,300, lr:(2.000e-04,)] [eta: 10 days, 7:40:29, time (data): 0.885 (0.006)] l_pix: 4.7960e-02 
2025-05-21 14:29:24,326 INFO: [train..][epoch:  2, iter:  51,400, lr:(2.000e-04,)] [eta: 10 days, 6:36:18, time (data): 0.885 (0.006)] l_pix: 5.1692e-02 
2025-05-21 14:30:52,594 INFO: [train..][epoch:  2, iter:  51,500, lr:(2.000e-04,)] [eta: 10 days, 5:38:42, time (data): 0.882 (0.006)] l_pix: 5.9162e-02 
2025-05-21 14:32:21,214 INFO: [train..][epoch:  2, iter:  51,600, lr:(2.000e-04,)] [eta: 10 days, 4:51:36, time (data): 0.884 (0.006)] l_pix: 3.9854e-02 
2025-05-21 14:33:49,497 INFO: [train..][epoch:  2, iter:  51,700, lr:(2.000e-04,)] [eta: 10 days, 4:06:44, time (data): 0.883 (0.006)] l_pix: 3.8611e-02 
2025-05-21 14:35:17,803 INFO: [train..][epoch:  2, iter:  51,800, lr:(2.000e-04,)] [eta: 10 days, 3:26:52, time (data): 0.883 (0.006)] l_pix: 5.6845e-02 
2025-05-21 14:36:46,200 INFO: [train..][epoch:  2, iter:  51,900, lr:(2.000e-04,)] [eta: 10 days, 2:51:49, time (data): 0.884 (0.006)] l_pix: 5.9563e-02 
2025-05-21 14:38:14,479 INFO: [train..][epoch:  2, iter:  52,000, lr:(2.000e-04,)] [eta: 10 days, 2:19:11, time (data): 0.884 (0.006)] l_pix: 4.8591e-02 
2025-05-21 14:39:42,583 INFO: [train..][epoch:  2, iter:  52,100, lr:(2.000e-04,)] [eta: 10 days, 1:48:12, time (data): 0.881 (0.006)] l_pix: 4.7140e-02 
2025-05-21 14:41:11,132 INFO: [train..][epoch:  2, iter:  52,200, lr:(2.000e-04,)] [eta: 10 days, 1:23:06, time (data): 0.883 (0.006)] l_pix: 3.5774e-02 
2025-05-21 14:42:39,594 INFO: [train..][epoch:  2, iter:  52,300, lr:(2.000e-04,)] [eta: 10 days, 0:59:27, time (data): 0.885 (0.006)] l_pix: 4.4663e-02 
2025-05-21 14:44:08,219 INFO: [train..][epoch:  2, iter:  52,400, lr:(2.000e-04,)] [eta: 10 days, 0:38:42, time (data): 0.886 (0.006)] l_pix: 5.9271e-02 
2025-05-21 14:45:36,509 INFO: [train..][epoch:  2, iter:  52,500, lr:(2.000e-04,)] [eta: 10 days, 0:17:24, time (data): 0.883 (0.006)] l_pix: 6.5562e-02 
2025-05-21 14:47:04,804 INFO: [train..][epoch:  2, iter:  52,600, lr:(2.000e-04,)] [eta: 9 days, 23:57:39, time (data): 0.883 (0.006)] l_pix: 4.2900e-02 
2025-05-21 14:48:32,964 INFO: [train..][epoch:  2, iter:  52,700, lr:(2.000e-04,)] [eta: 9 days, 23:38:28, time (data): 0.882 (0.006)] l_pix: 6.7718e-02 
2025-05-21 14:50:01,731 INFO: [train..][epoch:  2, iter:  52,800, lr:(2.000e-04,)] [eta: 9 days, 23:23:58, time (data): 0.885 (0.006)] l_pix: 5.3883e-02 
2025-05-21 14:51:30,351 INFO: [train..][epoch:  2, iter:  52,900, lr:(2.000e-04,)] [eta: 9 days, 23:09:34, time (data): 0.887 (0.006)] l_pix: 4.8841e-02 
2025-05-21 14:52:58,830 INFO: [train..][epoch:  2, iter:  53,000, lr:(2.000e-04,)] [eta: 9 days, 22:55:17, time (data): 0.886 (0.006)] l_pix: 6.0262e-02 
2025-05-21 14:54:27,194 INFO: [train..][epoch:  2, iter:  53,100, lr:(2.000e-04,)] [eta: 9 days, 22:41:15, time (data): 0.884 (0.006)] l_pix: 7.2903e-02 
2025-05-21 14:55:55,632 INFO: [train..][epoch:  2, iter:  53,200, lr:(2.000e-04,)] [eta: 9 days, 22:28:21, time (data): 0.884 (0.006)] l_pix: 5.9336e-02 
2025-05-21 14:57:24,047 INFO: [train..][epoch:  2, iter:  53,300, lr:(2.000e-04,)] [eta: 9 days, 22:16:03, time (data): 0.884 (0.006)] l_pix: 5.2618e-02 
2025-05-21 14:58:52,445 INFO: [train..][epoch:  2, iter:  53,400, lr:(2.000e-04,)] [eta: 9 days, 22:04:18, time (data): 0.884 (0.006)] l_pix: 5.0309e-02 
2025-05-21 15:00:20,817 INFO: [train..][epoch:  2, iter:  53,500, lr:(2.000e-04,)] [eta: 9 days, 21:53:01, time (data): 0.884 (0.006)] l_pix: 5.8034e-02 
2025-05-21 15:01:49,164 INFO: [train..][epoch:  2, iter:  53,600, lr:(2.000e-04,)] [eta: 9 days, 21:42:10, time (data): 0.884 (0.006)] l_pix: 3.7010e-02 
2025-05-21 15:03:17,657 INFO: [train..][epoch:  2, iter:  53,700, lr:(2.000e-04,)] [eta: 9 days, 21:32:27, time (data): 0.885 (0.006)] l_pix: 5.1521e-02 
2025-05-21 15:04:46,299 INFO: [train..][epoch:  2, iter:  53,800, lr:(2.000e-04,)] [eta: 9 days, 21:23:47, time (data): 0.886 (0.006)] l_pix: 5.8895e-02 
2025-05-21 15:06:14,884 INFO: [train..][epoch:  2, iter:  53,900, lr:(2.000e-04,)] [eta: 9 days, 21:15:15, time (data): 0.886 (0.006)] l_pix: 5.0184e-02 
2025-05-21 15:07:43,095 INFO: [train..][epoch:  2, iter:  54,000, lr:(2.000e-04,)] [eta: 9 days, 21:05:36, time (data): 0.884 (0.006)] l_pix: 5.4744e-02 
2025-05-21 15:09:14,938 INFO: [train..][epoch:  2, iter:  54,100, lr:(2.000e-04,)] [eta: 9 days, 21:10:19, time (data): 0.926 (0.006)] l_pix: 4.2952e-02 
2025-05-21 15:10:51,401 INFO: [train..][epoch:  2, iter:  54,200, lr:(2.000e-04,)] [eta: 9 days, 21:32:04, time (data): 0.947 (0.006)] l_pix: 6.1620e-02 
2025-05-21 15:12:27,301 INFO: [train..][epoch:  2, iter:  54,300, lr:(2.000e-04,)] [eta: 9 days, 21:50:40, time (data): 0.968 (0.006)] l_pix: 4.4278e-02 
2025-05-21 15:14:07,122 INFO: [train..][epoch:  2, iter:  54,400, lr:(2.000e-04,)] [eta: 9 days, 22:22:24, time (data): 0.985 (0.006)] l_pix: 5.4329e-02 
2025-05-21 15:15:42,389 INFO: [train..][epoch:  2, iter:  54,500, lr:(2.000e-04,)] [eta: 9 days, 22:36:42, time (data): 0.952 (0.006)] l_pix: 5.0789e-02 
2025-05-21 15:17:18,618 INFO: [train..][epoch:  2, iter:  54,600, lr:(2.000e-04,)] [eta: 9 days, 22:53:36, time (data): 0.958 (0.006)] l_pix: 5.4235e-02 
2025-05-21 15:18:54,249 INFO: [train..][epoch:  2, iter:  54,700, lr:(2.000e-04,)] [eta: 9 days, 23:07:42, time (data): 0.954 (0.006)] l_pix: 4.8321e-02 
2025-05-21 15:20:29,859 INFO: [train..][epoch:  2, iter:  54,800, lr:(2.000e-04,)] [eta: 9 days, 23:21:05, time (data): 0.955 (0.006)] l_pix: 5.5230e-02 
2025-05-21 15:22:05,093 INFO: [train..][epoch:  2, iter:  54,900, lr:(2.000e-04,)] [eta: 9 days, 23:32:39, time (data): 0.952 (0.006)] l_pix: 5.1758e-02 
2025-05-21 15:23:40,509 INFO: [train..][epoch:  2, iter:  55,000, lr:(2.000e-04,)] [eta: 9 days, 23:44:16, time (data): 0.953 (0.006)] l_pix: 4.2672e-02 
2025-05-21 15:23:40,509 INFO: Saving models and training states.
2025-05-21 15:33:23,833 INFO: Validation validation
	 # psnr: 26.7250	Best: 26.7250 @ 55000 iter

2025-05-21 15:34:52,633 INFO: [train..][epoch:  2, iter:  55,100, lr:(2.000e-04,)] [eta: 11 days, 5:35:50, time (data): 0.886 (0.006)] l_pix: 4.0308e-02 
2025-05-21 15:36:20,919 INFO: [train..][epoch:  2, iter:  55,200, lr:(2.000e-04,)] [eta: 11 days, 4:50:26, time (data): 0.884 (0.006)] l_pix: 4.5578e-02 
2025-05-21 15:37:49,650 INFO: [train..][epoch:  2, iter:  55,300, lr:(2.000e-04,)] [eta: 11 days, 4:08:01, time (data): 0.887 (0.006)] l_pix: 4.2922e-02 
2025-05-21 15:39:18,642 INFO: [train..][epoch:  2, iter:  55,400, lr:(2.000e-04,)] [eta: 11 days, 3:27:53, time (data): 0.889 (0.006)] l_pix: 5.2659e-02 
2025-05-21 15:40:47,200 INFO: [train..][epoch:  2, iter:  55,500, lr:(2.000e-04,)] [eta: 11 days, 2:47:54, time (data): 0.886 (0.006)] l_pix: 6.1533e-02 
2025-05-21 15:42:15,627 INFO: [train..][epoch:  2, iter:  55,600, lr:(2.000e-04,)] [eta: 11 days, 2:08:56, time (data): 0.885 (0.006)] l_pix: 4.9510e-02 
2025-05-21 15:43:44,188 INFO: [train..][epoch:  2, iter:  55,700, lr:(2.000e-04,)] [eta: 11 days, 1:31:39, time (data): 0.884 (0.006)] l_pix: 5.1693e-02 
2025-05-21 15:45:12,989 INFO: [train..][epoch:  2, iter:  55,800, lr:(2.000e-04,)] [eta: 11 days, 0:56:15, time (data): 0.886 (0.006)] l_pix: 4.2909e-02 
2025-05-21 15:46:41,673 INFO: [train..][epoch:  2, iter:  55,900, lr:(2.000e-04,)] [eta: 11 days, 0:21:41, time (data): 0.887 (0.006)] l_pix: 5.5182e-02 
2025-05-21 15:48:10,316 INFO: [train..][epoch:  2, iter:  56,000, lr:(2.000e-04,)] [eta: 10 days, 23:48:07, time (data): 0.887 (0.006)] l_pix: 6.1307e-02 
2025-05-21 15:49:38,609 INFO: [train..][epoch:  2, iter:  56,100, lr:(2.000e-04,)] [eta: 10 days, 23:14:42, time (data): 0.883 (0.006)] l_pix: 6.4756e-02 
2025-05-21 15:51:07,288 INFO: [train..][epoch:  2, iter:  56,200, lr:(2.000e-04,)] [eta: 10 days, 22:43:18, time (data): 0.885 (0.006)] l_pix: 5.1510e-02 
2025-05-21 15:52:35,922 INFO: [train..][epoch:  2, iter:  56,300, lr:(2.000e-04,)] [eta: 10 days, 22:12:43, time (data): 0.886 (0.006)] l_pix: 4.2278e-02 
2025-05-21 15:54:04,387 INFO: [train..][epoch:  2, iter:  56,400, lr:(2.000e-04,)] [eta: 10 days, 21:42:39, time (data): 0.885 (0.006)] l_pix: 4.3336e-02 
2025-05-21 15:55:33,023 INFO: [train..][epoch:  2, iter:  56,500, lr:(2.000e-04,)] [eta: 10 days, 21:13:52, time (data): 0.887 (0.006)] l_pix: 4.2293e-02 
2025-05-21 15:57:01,591 INFO: [train..][epoch:  2, iter:  56,600, lr:(2.000e-04,)] [eta: 10 days, 20:45:45, time (data): 0.886 (0.006)] l_pix: 5.4795e-02 
2025-05-21 15:58:29,991 INFO: [train..][epoch:  2, iter:  56,700, lr:(2.000e-04,)] [eta: 10 days, 20:18:02, time (data): 0.884 (0.006)] l_pix: 4.5172e-02 
2025-05-21 15:59:58,535 INFO: [train..][epoch:  2, iter:  56,800, lr:(2.000e-04,)] [eta: 10 days, 19:51:25, time (data): 0.885 (0.006)] l_pix: 4.8556e-02 
2025-05-21 16:01:27,160 INFO: [train..][epoch:  2, iter:  56,900, lr:(2.000e-04,)] [eta: 10 days, 19:25:43, time (data): 0.887 (0.006)] l_pix: 5.3577e-02 
2025-05-21 16:02:55,801 INFO: [train..][epoch:  2, iter:  57,000, lr:(2.000e-04,)] [eta: 10 days, 19:00:45, time (data): 0.887 (0.006)] l_pix: 4.3909e-02 
2025-05-21 16:04:24,342 INFO: [train..][epoch:  2, iter:  57,100, lr:(2.000e-04,)] [eta: 10 days, 18:36:13, time (data): 0.885 (0.006)] l_pix: 5.8109e-02 
2025-05-21 16:05:53,196 INFO: [train..][epoch:  2, iter:  57,200, lr:(2.000e-04,)] [eta: 10 days, 18:13:01, time (data): 0.887 (0.006)] l_pix: 4.8986e-02 
2025-05-21 16:07:21,694 INFO: [train..][epoch:  2, iter:  57,300, lr:(2.000e-04,)] [eta: 10 days, 17:49:38, time (data): 0.885 (0.006)] l_pix: 4.6184e-02 
2025-05-21 16:08:50,209 INFO: [train..][epoch:  2, iter:  57,400, lr:(2.000e-04,)] [eta: 10 days, 17:26:53, time (data): 0.885 (0.006)] l_pix: 4.7641e-02 
2025-05-21 16:10:18,823 INFO: [train..][epoch:  2, iter:  57,500, lr:(2.000e-04,)] [eta: 10 days, 17:04:54, time (data): 0.887 (0.006)] l_pix: 5.9198e-02 
2025-05-21 16:11:47,296 INFO: [train..][epoch:  2, iter:  57,600, lr:(2.000e-04,)] [eta: 10 days, 16:43:11, time (data): 0.886 (0.006)] l_pix: 3.8239e-02 
2025-05-21 16:13:15,694 INFO: [train..][epoch:  2, iter:  57,700, lr:(2.000e-04,)] [eta: 10 days, 16:21:49, time (data): 0.886 (0.006)] l_pix: 4.7952e-02 
2025-05-21 16:14:44,198 INFO: [train..][epoch:  2, iter:  57,800, lr:(2.000e-04,)] [eta: 10 days, 16:01:11, time (data): 0.885 (0.006)] l_pix: 5.8065e-02 
2025-05-21 16:16:12,703 INFO: [train..][epoch:  2, iter:  57,900, lr:(2.000e-04,)] [eta: 10 days, 15:41:03, time (data): 0.883 (0.006)] l_pix: 6.1808e-02 
2025-05-21 16:17:41,359 INFO: [train..][epoch:  2, iter:  58,000, lr:(2.000e-04,)] [eta: 10 days, 15:21:40, time (data): 0.885 (0.006)] l_pix: 5.5044e-02 
2025-05-21 16:19:09,870 INFO: [train..][epoch:  2, iter:  58,100, lr:(2.000e-04,)] [eta: 10 days, 15:02:27, time (data): 0.885 (0.006)] l_pix: 4.1313e-02 
2025-05-21 16:20:38,273 INFO: [train..][epoch:  2, iter:  58,200, lr:(2.000e-04,)] [eta: 10 days, 14:43:27, time (data): 0.884 (0.006)] l_pix: 5.2258e-02 
2025-05-21 16:22:06,717 INFO: [train..][epoch:  2, iter:  58,300, lr:(2.000e-04,)] [eta: 10 days, 14:24:57, time (data): 0.884 (0.006)] l_pix: 4.9265e-02 
2025-05-21 16:23:35,244 INFO: [train..][epoch:  2, iter:  58,400, lr:(2.000e-04,)] [eta: 10 days, 14:07:01, time (data): 0.885 (0.006)] l_pix: 4.0379e-02 
2025-05-21 16:25:04,018 INFO: [train..][epoch:  2, iter:  58,500, lr:(2.000e-04,)] [eta: 10 days, 13:49:56, time (data): 0.889 (0.006)] l_pix: 4.6196e-02 
2025-05-21 16:26:32,323 INFO: [train..][epoch:  2, iter:  58,600, lr:(2.000e-04,)] [eta: 10 days, 13:32:21, time (data): 0.885 (0.006)] l_pix: 5.6077e-02 
2025-05-21 16:28:00,849 INFO: [train..][epoch:  2, iter:  58,700, lr:(2.000e-04,)] [eta: 10 days, 13:15:32, time (data): 0.885 (0.006)] l_pix: 4.9537e-02 
2025-05-21 16:29:29,571 INFO: [train..][epoch:  2, iter:  58,800, lr:(2.000e-04,)] [eta: 10 days, 12:59:25, time (data): 0.886 (0.006)] l_pix: 5.9598e-02 
2025-05-21 16:30:58,156 INFO: [train..][epoch:  2, iter:  58,900, lr:(2.000e-04,)] [eta: 10 days, 12:43:23, time (data): 0.885 (0.006)] l_pix: 5.4955e-02 
2025-05-21 16:32:27,071 INFO: [train..][epoch:  2, iter:  59,000, lr:(2.000e-04,)] [eta: 10 days, 12:28:15, time (data): 0.888 (0.006)] l_pix: 5.0055e-02 
2025-05-21 16:33:55,411 INFO: [train..][epoch:  2, iter:  59,100, lr:(2.000e-04,)] [eta: 10 days, 12:12:26, time (data): 0.883 (0.006)] l_pix: 4.2096e-02 
2025-05-21 16:35:24,391 INFO: [train..][epoch:  2, iter:  59,200, lr:(2.000e-04,)] [eta: 10 days, 11:58:00, time (data): 0.887 (0.006)] l_pix: 5.0002e-02 
2025-05-21 16:36:52,837 INFO: [train..][epoch:  2, iter:  59,300, lr:(2.000e-04,)] [eta: 10 days, 11:42:58, time (data): 0.886 (0.006)] l_pix: 4.6469e-02 
2025-05-21 16:38:21,452 INFO: [train..][epoch:  2, iter:  59,400, lr:(2.000e-04,)] [eta: 10 days, 11:28:30, time (data): 0.886 (0.006)] l_pix: 5.6364e-02 
2025-05-21 16:39:49,974 INFO: [train..][epoch:  2, iter:  59,500, lr:(2.000e-04,)] [eta: 10 days, 11:14:09, time (data): 0.883 (0.006)] l_pix: 4.5191e-02 
2025-05-21 16:41:18,567 INFO: [train..][epoch:  2, iter:  59,600, lr:(2.000e-04,)] [eta: 10 days, 11:00:11, time (data): 0.885 (0.006)] l_pix: 4.4500e-02 
2025-05-21 16:42:47,149 INFO: [train..][epoch:  2, iter:  59,700, lr:(2.000e-04,)] [eta: 10 days, 10:46:27, time (data): 0.885 (0.006)] l_pix: 4.0589e-02 
2025-05-21 16:44:15,713 INFO: [train..][epoch:  2, iter:  59,800, lr:(2.000e-04,)] [eta: 10 days, 10:32:56, time (data): 0.885 (0.006)] l_pix: 3.7078e-02 
2025-05-21 16:45:44,331 INFO: [train..][epoch:  2, iter:  59,900, lr:(2.000e-04,)] [eta: 10 days, 10:19:46, time (data): 0.887 (0.006)] l_pix: 5.3329e-02 
2025-05-21 16:47:12,925 INFO: [train..][epoch:  2, iter:  60,000, lr:(2.000e-04,)] [eta: 10 days, 10:06:47, time (data): 0.886 (0.006)] l_pix: 5.6806e-02 
2025-05-21 16:47:12,926 INFO: Saving models and training states.
2025-05-21 16:53:30,993 INFO: Validation validation
	 # psnr: 26.7819	Best: 26.7819 @ 60000 iter

2025-05-21 16:54:59,794 INFO: [train..][epoch:  2, iter:  60,100, lr:(2.000e-04,)] [eta: 10 days, 19:40:40, time (data): 0.884 (0.006)] l_pix: 5.3911e-02 
2025-05-21 16:56:28,469 INFO: [train..][epoch:  2, iter:  60,200, lr:(2.000e-04,)] [eta: 10 days, 19:22:27, time (data): 0.886 (0.006)] l_pix: 5.2106e-02 
2025-05-21 16:57:57,138 INFO: [train..][epoch:  2, iter:  60,300, lr:(2.000e-04,)] [eta: 10 days, 19:04:33, time (data): 0.887 (0.006)] l_pix: 5.6538e-02 
2025-05-21 16:59:25,563 INFO: [train..][epoch:  2, iter:  60,400, lr:(2.000e-04,)] [eta: 10 days, 18:46:36, time (data): 0.885 (0.006)] l_pix: 5.6194e-02 
2025-05-21 17:00:54,082 INFO: [train..][epoch:  2, iter:  60,500, lr:(2.000e-04,)] [eta: 10 days, 18:29:05, time (data): 0.884 (0.006)] l_pix: 4.9329e-02 
2025-05-21 17:02:22,589 INFO: [train..][epoch:  2, iter:  60,600, lr:(2.000e-04,)] [eta: 10 days, 18:11:52, time (data): 0.885 (0.006)] l_pix: 4.2291e-02 
2025-05-21 17:03:51,362 INFO: [train..][epoch:  2, iter:  60,700, lr:(2.000e-04,)] [eta: 10 days, 17:55:20, time (data): 0.893 (0.006)] l_pix: 4.6802e-02 
2025-05-21 17:05:19,973 INFO: [train..][epoch:  2, iter:  60,800, lr:(2.000e-04,)] [eta: 10 days, 17:38:51, time (data): 0.888 (0.006)] l_pix: 4.4869e-02 
2025-05-21 17:06:48,434 INFO: [train..][epoch:  2, iter:  60,900, lr:(2.000e-04,)] [eta: 10 days, 17:22:25, time (data): 0.886 (0.006)] l_pix: 4.8169e-02 
2025-05-21 17:08:16,839 INFO: [train..][epoch:  2, iter:  61,000, lr:(2.000e-04,)] [eta: 10 days, 17:06:11, time (data): 0.885 (0.006)] l_pix: 5.0029e-02 
2025-05-21 17:09:45,495 INFO: [train..][epoch:  2, iter:  61,100, lr:(2.000e-04,)] [eta: 10 days, 16:50:34, time (data): 0.886 (0.006)] l_pix: 4.9425e-02 
2025-05-21 17:11:14,161 INFO: [train..][epoch:  2, iter:  61,200, lr:(2.000e-04,)] [eta: 10 days, 16:35:13, time (data): 0.886 (0.006)] l_pix: 4.6326e-02 
2025-05-21 17:12:42,890 INFO: [train..][epoch:  2, iter:  61,300, lr:(2.000e-04,)] [eta: 10 days, 16:20:12, time (data): 0.892 (0.006)] l_pix: 5.3009e-02 
2025-05-21 17:14:11,641 INFO: [train..][epoch:  2, iter:  61,400, lr:(2.000e-04,)] [eta: 10 days, 16:05:26, time (data): 0.889 (0.006)] l_pix: 5.1510e-02 
2025-05-21 17:15:40,116 INFO: [train..][epoch:  2, iter:  61,500, lr:(2.000e-04,)] [eta: 10 days, 15:50:33, time (data): 0.884 (0.006)] l_pix: 5.1379e-02 
2025-05-21 17:17:08,647 INFO: [train..][epoch:  2, iter:  61,600, lr:(2.000e-04,)] [eta: 10 days, 15:35:57, time (data): 0.885 (0.006)] l_pix: 5.0943e-02 
2025-05-21 17:18:37,427 INFO: [train..][epoch:  2, iter:  61,700, lr:(2.000e-04,)] [eta: 10 days, 15:21:56, time (data): 0.889 (0.006)] l_pix: 4.6814e-02 
2025-05-21 17:20:06,321 INFO: [train..][epoch:  2, iter:  61,800, lr:(2.000e-04,)] [eta: 10 days, 15:08:15, time (data): 0.889 (0.006)] l_pix: 7.8509e-02 
2025-05-21 17:21:35,013 INFO: [train..][epoch:  2, iter:  61,900, lr:(2.000e-04,)] [eta: 10 days, 14:54:32, time (data): 0.887 (0.006)] l_pix: 4.2945e-02 
2025-05-21 17:23:03,822 INFO: [train..][epoch:  2, iter:  62,000, lr:(2.000e-04,)] [eta: 10 days, 14:41:09, time (data): 0.888 (0.006)] l_pix: 4.7425e-02 
2025-05-21 17:24:32,685 INFO: [train..][epoch:  2, iter:  62,100, lr:(2.000e-04,)] [eta: 10 days, 14:28:03, time (data): 0.889 (0.006)] l_pix: 5.4220e-02 
2025-05-21 17:26:01,342 INFO: [train..][epoch:  2, iter:  62,200, lr:(2.000e-04,)] [eta: 10 days, 14:14:52, time (data): 0.887 (0.006)] l_pix: 5.7872e-02 
2025-05-21 17:27:30,059 INFO: [train..][epoch:  2, iter:  62,300, lr:(2.000e-04,)] [eta: 10 days, 14:01:58, time (data): 0.886 (0.006)] l_pix: 5.7897e-02 
2025-05-21 17:28:58,674 INFO: [train..][epoch:  2, iter:  62,400, lr:(2.000e-04,)] [eta: 10 days, 13:49:06, time (data): 0.886 (0.006)] l_pix: 5.8704e-02 
2025-05-21 17:30:27,093 INFO: [train..][epoch:  2, iter:  62,500, lr:(2.000e-04,)] [eta: 10 days, 13:36:11, time (data): 0.884 (0.006)] l_pix: 5.7023e-02 
2025-05-21 17:31:56,300 INFO: [train..][epoch:  2, iter:  62,600, lr:(2.000e-04,)] [eta: 10 days, 13:24:25, time (data): 0.890 (0.006)] l_pix: 6.8848e-02 
2025-05-21 17:33:24,937 INFO: [train..][epoch:  2, iter:  62,700, lr:(2.000e-04,)] [eta: 10 days, 13:12:07, time (data): 0.887 (0.006)] l_pix: 3.9468e-02 
2025-05-21 17:34:53,296 INFO: [train..][epoch:  2, iter:  62,800, lr:(2.000e-04,)] [eta: 10 days, 12:59:39, time (data): 0.884 (0.006)] l_pix: 4.4355e-02 
2025-05-21 17:36:21,935 INFO: [train..][epoch:  2, iter:  62,900, lr:(2.000e-04,)] [eta: 10 days, 12:47:41, time (data): 0.887 (0.006)] l_pix: 5.1451e-02 
2025-05-21 17:37:50,478 INFO: [train..][epoch:  2, iter:  63,000, lr:(2.000e-04,)] [eta: 10 days, 12:35:47, time (data): 0.886 (0.006)] l_pix: 4.3976e-02 
2025-05-21 17:39:19,177 INFO: [train..][epoch:  2, iter:  63,100, lr:(2.000e-04,)] [eta: 10 days, 12:24:12, time (data): 0.885 (0.006)] l_pix: 5.4549e-02 
2025-05-21 17:40:47,604 INFO: [train..][epoch:  2, iter:  63,200, lr:(2.000e-04,)] [eta: 10 days, 12:12:28, time (data): 0.885 (0.006)] l_pix: 4.3065e-02 
2025-05-21 17:42:16,209 INFO: [train..][epoch:  2, iter:  63,300, lr:(2.000e-04,)] [eta: 10 days, 12:01:06, time (data): 0.886 (0.006)] l_pix: 4.4469e-02 
2025-05-21 17:43:44,858 INFO: [train..][epoch:  2, iter:  63,400, lr:(2.000e-04,)] [eta: 10 days, 11:49:55, time (data): 0.886 (0.006)] l_pix: 4.6462e-02 
2025-05-21 17:45:13,431 INFO: [train..][epoch:  2, iter:  63,500, lr:(2.000e-04,)] [eta: 10 days, 11:38:48, time (data): 0.883 (0.006)] l_pix: 4.8823e-02 
2025-05-21 17:46:42,232 INFO: [train..][epoch:  2, iter:  63,600, lr:(2.000e-04,)] [eta: 10 days, 11:28:05, time (data): 0.887 (0.006)] l_pix: 3.9061e-02 
2025-05-21 17:48:10,934 INFO: [train..][epoch:  2, iter:  63,700, lr:(2.000e-04,)] [eta: 10 days, 11:17:23, time (data): 0.885 (0.006)] l_pix: 4.7334e-02 
2025-05-21 17:49:39,550 INFO: [train..][epoch:  2, iter:  63,800, lr:(2.000e-04,)] [eta: 10 days, 11:06:44, time (data): 0.886 (0.006)] l_pix: 4.8200e-02 
2025-05-21 17:51:08,311 INFO: [train..][epoch:  2, iter:  63,900, lr:(2.000e-04,)] [eta: 10 days, 10:56:22, time (data): 0.889 (0.006)] l_pix: 6.2000e-02 
2025-05-21 17:52:36,967 INFO: [train..][epoch:  2, iter:  64,000, lr:(2.000e-04,)] [eta: 10 days, 10:46:01, time (data): 0.887 (0.006)] l_pix: 4.1668e-02 
2025-05-21 17:54:05,531 INFO: [train..][epoch:  2, iter:  64,100, lr:(2.000e-04,)] [eta: 10 days, 10:35:41, time (data): 0.884 (0.006)] l_pix: 4.3269e-02 
2025-05-21 17:55:34,127 INFO: [train..][epoch:  2, iter:  64,200, lr:(2.000e-04,)] [eta: 10 days, 10:25:31, time (data): 0.885 (0.006)] l_pix: 5.3459e-02 
2025-05-21 17:57:02,653 INFO: [train..][epoch:  2, iter:  64,300, lr:(2.000e-04,)] [eta: 10 days, 10:15:23, time (data): 0.888 (0.006)] l_pix: 5.9202e-02 
2025-05-21 17:58:31,086 INFO: [train..][epoch:  2, iter:  64,400, lr:(2.000e-04,)] [eta: 10 days, 10:05:17, time (data): 0.885 (0.006)] l_pix: 4.8864e-02 
2025-05-21 18:00:03,696 INFO: [train..][epoch:  2, iter:  64,500, lr:(2.000e-04,)] [eta: 10 days, 9:59:47, time (data): 0.901 (0.006)] l_pix: 5.5056e-02 
2025-05-21 18:01:33,973 INFO: [train..][epoch:  2, iter:  64,600, lr:(2.000e-04,)] [eta: 10 days, 9:51:51, time (data): 0.902 (0.006)] l_pix: 4.0329e-02 
2025-05-21 18:03:03,895 INFO: [train..][epoch:  2, iter:  64,700, lr:(2.000e-04,)] [eta: 10 days, 9:43:38, time (data): 0.896 (0.006)] l_pix: 4.0844e-02 
2025-05-21 18:04:34,369 INFO: [train..][epoch:  2, iter:  64,800, lr:(2.000e-04,)] [eta: 10 days, 9:36:05, time (data): 0.903 (0.006)] l_pix: 4.7012e-02 
2025-05-21 18:06:04,425 INFO: [train..][epoch:  2, iter:  64,900, lr:(2.000e-04,)] [eta: 10 days, 9:28:11, time (data): 0.903 (0.006)] l_pix: 5.3957e-02 
2025-05-21 18:07:37,216 INFO: [train..][epoch:  2, iter:  65,000, lr:(2.000e-04,)] [eta: 10 days, 9:23:12, time (data): 0.923 (0.006)] l_pix: 5.7355e-02 
2025-05-21 18:07:37,216 INFO: Saving models and training states.
2025-05-21 18:14:02,987 INFO: Validation validation
	 # psnr: 26.8174	Best: 26.8174 @ 65000 iter

2025-05-21 18:15:33,833 INFO: [train..][epoch:  2, iter:  65,100, lr:(2.000e-04,)] [eta: 10 days, 15:54:19, time (data): 0.908 (0.006)] l_pix: 5.6687e-02 
2025-05-21 18:17:05,135 INFO: [train..][epoch:  2, iter:  65,200, lr:(2.000e-04,)] [eta: 10 days, 15:45:15, time (data): 0.912 (0.006)] l_pix: 4.7950e-02 
2025-05-21 18:18:35,267 INFO: [train..][epoch:  2, iter:  65,300, lr:(2.000e-04,)] [eta: 10 days, 15:35:06, time (data): 0.901 (0.006)] l_pix: 4.2499e-02 
2025-05-21 18:20:05,539 INFO: [train..][epoch:  2, iter:  65,400, lr:(2.000e-04,)] [eta: 10 days, 15:25:12, time (data): 0.902 (0.006)] l_pix: 5.2917e-02 
2025-05-21 18:21:35,893 INFO: [train..][epoch:  2, iter:  65,500, lr:(2.000e-04,)] [eta: 10 days, 15:15:29, time (data): 0.905 (0.006)] l_pix: 5.5901e-02 
2025-05-21 18:23:06,268 INFO: [train..][epoch:  2, iter:  65,600, lr:(2.000e-04,)] [eta: 10 days, 15:05:54, time (data): 0.904 (0.006)] l_pix: 3.6868e-02 
2025-05-21 18:24:36,515 INFO: [train..][epoch:  2, iter:  65,700, lr:(2.000e-04,)] [eta: 10 days, 14:56:17, time (data): 0.902 (0.006)] l_pix: 5.9908e-02 
2025-05-21 18:26:06,823 INFO: [train..][epoch:  2, iter:  65,800, lr:(2.000e-04,)] [eta: 10 days, 14:46:51, time (data): 0.903 (0.006)] l_pix: 5.2845e-02 
2025-05-21 18:27:37,200 INFO: [train..][epoch:  2, iter:  65,900, lr:(2.000e-04,)] [eta: 10 days, 14:37:34, time (data): 0.904 (0.006)] l_pix: 5.3877e-02 
2025-05-21 18:29:07,686 INFO: [train..][epoch:  2, iter:  66,000, lr:(2.000e-04,)] [eta: 10 days, 14:28:30, time (data): 0.905 (0.006)] l_pix: 4.7778e-02 
2025-05-21 18:30:38,058 INFO: [train..][epoch:  2, iter:  66,100, lr:(2.000e-04,)] [eta: 10 days, 14:19:24, time (data): 0.900 (0.006)] l_pix: 5.6053e-02 
2025-05-21 18:32:08,754 INFO: [train..][epoch:  2, iter:  66,200, lr:(2.000e-04,)] [eta: 10 days, 14:10:43, time (data): 0.906 (0.006)] l_pix: 4.5966e-02 
2025-05-21 18:33:39,116 INFO: [train..][epoch:  2, iter:  66,300, lr:(2.000e-04,)] [eta: 10 days, 14:01:48, time (data): 0.901 (0.006)] l_pix: 5.2597e-02 
2025-05-21 18:35:09,495 INFO: [train..][epoch:  2, iter:  66,400, lr:(2.000e-04,)] [eta: 10 days, 13:52:59, time (data): 0.903 (0.006)] l_pix: 5.4931e-02 
2025-05-21 18:36:39,957 INFO: [train..][epoch:  2, iter:  66,500, lr:(2.000e-04,)] [eta: 10 days, 13:44:21, time (data): 0.902 (0.006)] l_pix: 4.6906e-02 
2025-05-21 18:38:10,261 INFO: [train..][epoch:  2, iter:  66,600, lr:(2.000e-04,)] [eta: 10 days, 13:35:39, time (data): 0.903 (0.006)] l_pix: 4.7738e-02 
2025-05-21 18:39:40,549 INFO: [train..][epoch:  2, iter:  66,700, lr:(2.000e-04,)] [eta: 10 days, 13:27:00, time (data): 0.900 (0.006)] l_pix: 3.9463e-02 
2025-05-21 18:41:10,943 INFO: [train..][epoch:  2, iter:  66,800, lr:(2.000e-04,)] [eta: 10 days, 13:18:33, time (data): 0.903 (0.006)] l_pix: 5.3080e-02 
2025-05-21 18:42:41,432 INFO: [train..][epoch:  2, iter:  66,900, lr:(2.000e-04,)] [eta: 10 days, 13:10:16, time (data): 0.904 (0.006)] l_pix: 3.2294e-02 
2025-05-21 18:44:11,760 INFO: [train..][epoch:  2, iter:  67,000, lr:(2.000e-04,)] [eta: 10 days, 13:01:56, time (data): 0.903 (0.006)] l_pix: 4.5456e-02 
2025-05-21 18:45:42,076 INFO: [train..][epoch:  2, iter:  67,100, lr:(2.000e-04,)] [eta: 10 days, 12:53:39, time (data): 0.905 (0.006)] l_pix: 5.6835e-02 
2025-05-21 18:47:12,258 INFO: [train..][epoch:  2, iter:  67,200, lr:(2.000e-04,)] [eta: 10 days, 12:45:19, time (data): 0.902 (0.006)] l_pix: 4.2576e-02 
2025-05-21 18:48:42,877 INFO: [train..][epoch:  2, iter:  67,300, lr:(2.000e-04,)] [eta: 10 days, 12:37:28, time (data): 0.903 (0.006)] l_pix: 3.7711e-02 
2025-05-21 18:50:13,136 INFO: [train..][epoch:  2, iter:  67,400, lr:(2.000e-04,)] [eta: 10 days, 12:29:22, time (data): 0.903 (0.006)] l_pix: 5.0758e-02 
2025-05-21 18:51:43,612 INFO: [train..][epoch:  2, iter:  67,500, lr:(2.000e-04,)] [eta: 10 days, 12:21:33, time (data): 0.904 (0.006)] l_pix: 4.1838e-02 
2025-05-21 18:53:14,254 INFO: [train..][epoch:  2, iter:  67,600, lr:(2.000e-04,)] [eta: 10 days, 12:13:56, time (data): 0.906 (0.006)] l_pix: 4.2900e-02 
2025-05-21 18:54:44,688 INFO: [train..][epoch:  2, iter:  67,700, lr:(2.000e-04,)] [eta: 10 days, 12:06:12, time (data): 0.903 (0.006)] l_pix: 4.4873e-02 
2025-05-21 18:56:15,005 INFO: [train..][epoch:  2, iter:  67,800, lr:(2.000e-04,)] [eta: 10 days, 11:58:27, time (data): 0.903 (0.006)] l_pix: 4.9671e-02 
2025-05-21 18:57:45,477 INFO: [train..][epoch:  2, iter:  67,900, lr:(2.000e-04,)] [eta: 10 days, 11:50:53, time (data): 0.907 (0.006)] l_pix: 7.1790e-02 
2025-05-21 18:59:16,006 INFO: [train..][epoch:  2, iter:  68,000, lr:(2.000e-04,)] [eta: 10 days, 11:43:27, time (data): 0.905 (0.006)] l_pix: 4.6647e-02 
2025-05-21 19:00:46,548 INFO: [train..][epoch:  2, iter:  68,100, lr:(2.000e-04,)] [eta: 10 days, 11:36:05, time (data): 0.906 (0.006)] l_pix: 4.0147e-02 
2025-05-21 19:02:16,904 INFO: [train..][epoch:  2, iter:  68,200, lr:(2.000e-04,)] [eta: 10 days, 11:28:38, time (data): 0.904 (0.006)] l_pix: 5.5047e-02 
2025-05-21 19:03:47,517 INFO: [train..][epoch:  2, iter:  68,300, lr:(2.000e-04,)] [eta: 10 days, 11:21:28, time (data): 0.902 (0.006)] l_pix: 5.2313e-02 
2025-05-21 19:05:17,690 INFO: [train..][epoch:  2, iter:  68,400, lr:(2.000e-04,)] [eta: 10 days, 11:13:59, time (data): 0.902 (0.006)] l_pix: 5.6506e-02 
2025-05-21 19:06:48,252 INFO: [train..][epoch:  2, iter:  68,500, lr:(2.000e-04,)] [eta: 10 days, 11:06:53, time (data): 0.907 (0.006)] l_pix: 5.3070e-02 
2025-05-21 19:08:18,468 INFO: [train..][epoch:  2, iter:  68,600, lr:(2.000e-04,)] [eta: 10 days, 10:59:34, time (data): 0.903 (0.006)] l_pix: 6.7638e-02 
2025-05-21 19:09:48,963 INFO: [train..][epoch:  2, iter:  68,700, lr:(2.000e-04,)] [eta: 10 days, 10:52:32, time (data): 0.896 (0.005)] l_pix: 5.5820e-02 
2025-05-21 19:11:36,798 INFO: [train..][epoch:  3, iter:  68,800, lr:(2.000e-04,)] [eta: 10 days, 10:59:53, time (data): 1.066 (0.168)] l_pix: 4.3945e-02 
2025-05-21 19:13:07,731 INFO: [train..][epoch:  3, iter:  68,900, lr:(2.000e-04,)] [eta: 10 days, 10:53:15, time (data): 0.913 (0.006)] l_pix: 2.9551e-02 
2025-05-21 19:14:38,385 INFO: [train..][epoch:  3, iter:  69,000, lr:(2.000e-04,)] [eta: 10 days, 10:46:27, time (data): 0.907 (0.006)] l_pix: 5.6389e-02 
2025-05-21 19:16:08,737 INFO: [train..][epoch:  3, iter:  69,100, lr:(2.000e-04,)] [eta: 10 days, 10:39:28, time (data): 0.900 (0.006)] l_pix: 5.7620e-02 
2025-05-21 19:17:38,930 INFO: [train..][epoch:  3, iter:  69,200, lr:(2.000e-04,)] [eta: 10 days, 10:32:24, time (data): 0.902 (0.006)] l_pix: 4.7062e-02 
2025-05-21 19:19:09,319 INFO: [train..][epoch:  3, iter:  69,300, lr:(2.000e-04,)] [eta: 10 days, 10:25:33, time (data): 0.896 (0.006)] l_pix: 4.3554e-02 
2025-05-21 19:20:39,541 INFO: [train..][epoch:  3, iter:  69,400, lr:(2.000e-04,)] [eta: 10 days, 10:18:38, time (data): 0.902 (0.006)] l_pix: 6.7779e-02 
2025-05-21 19:22:09,977 INFO: [train..][epoch:  3, iter:  69,500, lr:(2.000e-04,)] [eta: 10 days, 10:11:56, time (data): 0.940 (0.006)] l_pix: 6.6457e-02 
2025-05-21 19:23:40,632 INFO: [train..][epoch:  3, iter:  69,600, lr:(2.000e-04,)] [eta: 10 days, 10:05:27, time (data): 0.908 (0.006)] l_pix: 4.1463e-02 
2025-05-21 19:25:10,872 INFO: [train..][epoch:  3, iter:  69,700, lr:(2.000e-04,)] [eta: 10 days, 9:58:42, time (data): 0.892 (0.006)] l_pix: 4.0522e-02 
2025-05-21 19:26:41,390 INFO: [train..][epoch:  3, iter:  69,800, lr:(2.000e-04,)] [eta: 10 days, 9:52:13, time (data): 0.905 (0.006)] l_pix: 5.2534e-02 
2025-05-21 19:28:16,898 INFO: [train..][epoch:  3, iter:  69,900, lr:(2.000e-04,)] [eta: 10 days, 9:49:41, time (data): 0.913 (0.007)] l_pix: 4.5272e-02 
2025-05-21 19:29:48,378 INFO: [train..][epoch:  3, iter:  70,000, lr:(2.000e-04,)] [eta: 10 days, 9:44:02, time (data): 0.915 (0.006)] l_pix: 5.0580e-02 
2025-05-21 19:29:48,378 INFO: Saving models and training states.
2025-05-21 19:36:23,336 INFO: Validation validation
	 # psnr: 26.8435	Best: 26.8435 @ 70000 iter

2025-05-21 19:37:54,878 INFO: [train..][epoch:  3, iter:  70,100, lr:(2.000e-04,)] [eta: 10 days, 14:42:59, time (data): 0.915 (0.006)] l_pix: 5.8899e-02 
2025-05-21 19:39:25,376 INFO: [train..][epoch:  3, iter:  70,200, lr:(2.000e-04,)] [eta: 10 days, 14:35:07, time (data): 0.905 (0.006)] l_pix: 4.9444e-02 
2025-05-21 19:40:55,759 INFO: [train..][epoch:  3, iter:  70,300, lr:(2.000e-04,)] [eta: 10 days, 14:27:13, time (data): 0.904 (0.006)] l_pix: 4.1791e-02 
2025-05-21 19:42:26,119 INFO: [train..][epoch:  3, iter:  70,400, lr:(2.000e-04,)] [eta: 10 days, 14:19:23, time (data): 0.904 (0.006)] l_pix: 4.5735e-02 
2025-05-21 19:43:56,620 INFO: [train..][epoch:  3, iter:  70,500, lr:(2.000e-04,)] [eta: 10 days, 14:11:42, time (data): 0.904 (0.006)] l_pix: 4.8092e-02 
2025-05-21 19:45:27,228 INFO: [train..][epoch:  3, iter:  70,600, lr:(2.000e-04,)] [eta: 10 days, 14:04:10, time (data): 0.906 (0.006)] l_pix: 4.7336e-02 
2025-05-21 19:46:57,755 INFO: [train..][epoch:  3, iter:  70,700, lr:(2.000e-04,)] [eta: 10 days, 13:56:37, time (data): 0.906 (0.006)] l_pix: 5.0584e-02 
2025-05-21 19:48:27,958 INFO: [train..][epoch:  3, iter:  70,800, lr:(2.000e-04,)] [eta: 10 days, 13:48:54, time (data): 0.902 (0.006)] l_pix: 5.3354e-02 
2025-05-21 19:49:58,253 INFO: [train..][epoch:  3, iter:  70,900, lr:(2.000e-04,)] [eta: 10 days, 13:41:18, time (data): 0.903 (0.006)] l_pix: 5.1196e-02 
2025-05-21 19:51:30,943 INFO: [train..][epoch:  3, iter:  71,000, lr:(2.000e-04,)] [eta: 10 days, 13:35:32, time (data): 0.928 (0.006)] l_pix: 5.5502e-02 
2025-05-21 19:53:04,216 INFO: [train..][epoch:  3, iter:  71,100, lr:(2.000e-04,)] [eta: 10 days, 13:30:13, time (data): 0.930 (0.006)] l_pix: 5.0747e-02 
2025-05-21 19:54:35,487 INFO: [train..][epoch:  3, iter:  71,200, lr:(2.000e-04,)] [eta: 10 days, 13:23:29, time (data): 0.912 (0.006)] l_pix: 4.2303e-02 
2025-05-21 19:56:06,487 INFO: [train..][epoch:  3, iter:  71,300, lr:(2.000e-04,)] [eta: 10 days, 13:16:37, time (data): 0.911 (0.006)] l_pix: 4.4403e-02 
2025-05-21 19:57:41,293 INFO: [train..][epoch:  3, iter:  71,400, lr:(2.000e-04,)] [eta: 10 days, 13:12:32, time (data): 0.945 (0.006)] l_pix: 4.3831e-02 
2025-05-21 19:59:16,500 INFO: [train..][epoch:  3, iter:  71,500, lr:(2.000e-04,)] [eta: 10 days, 13:08:46, time (data): 0.948 (0.006)] l_pix: 3.5879e-02 
2025-05-21 20:00:50,338 INFO: [train..][epoch:  3, iter:  71,600, lr:(2.000e-04,)] [eta: 10 days, 13:04:03, time (data): 0.938 (0.006)] l_pix: 4.3579e-02 
2025-05-21 20:02:25,358 INFO: [train..][epoch:  3, iter:  71,700, lr:(2.000e-04,)] [eta: 10 days, 13:00:12, time (data): 0.944 (0.006)] l_pix: 6.9242e-02 
2025-05-21 20:03:58,355 INFO: [train..][epoch:  3, iter:  71,800, lr:(2.000e-04,)] [eta: 10 days, 12:54:55, time (data): 0.928 (0.006)] l_pix: 4.1818e-02 
2025-05-21 20:05:32,501 INFO: [train..][epoch:  3, iter:  71,900, lr:(2.000e-04,)] [eta: 10 days, 12:50:30, time (data): 0.935 (0.006)] l_pix: 4.9377e-02 
2025-05-21 20:07:06,654 INFO: [train..][epoch:  3, iter:  72,000, lr:(2.000e-04,)] [eta: 10 days, 12:46:07, time (data): 0.944 (0.006)] l_pix: 4.2286e-02 
2025-05-21 20:08:39,177 INFO: [train..][epoch:  3, iter:  72,100, lr:(2.000e-04,)] [eta: 10 days, 12:40:36, time (data): 0.934 (0.006)] l_pix: 5.2594e-02 
2025-05-21 20:10:12,808 INFO: [train..][epoch:  3, iter:  72,200, lr:(2.000e-04,)] [eta: 10 days, 12:35:54, time (data): 0.937 (0.006)] l_pix: 4.8617e-02 
2025-05-21 20:11:46,607 INFO: [train..][epoch:  3, iter:  72,300, lr:(2.000e-04,)] [eta: 10 days, 12:31:21, time (data): 0.937 (0.006)] l_pix: 5.8410e-02 
2025-05-21 20:13:20,406 INFO: [train..][epoch:  3, iter:  72,400, lr:(2.000e-04,)] [eta: 10 days, 12:26:49, time (data): 0.936 (0.006)] l_pix: 4.4170e-02 
2025-05-21 20:14:53,047 INFO: [train..][epoch:  3, iter:  72,500, lr:(2.000e-04,)] [eta: 10 days, 12:21:32, time (data): 0.931 (0.006)] l_pix: 4.4122e-02 
2025-05-21 20:16:27,496 INFO: [train..][epoch:  3, iter:  72,600, lr:(2.000e-04,)] [eta: 10 days, 12:17:30, time (data): 0.939 (0.006)] l_pix: 4.5467e-02 
2025-05-21 20:18:01,500 INFO: [train..][epoch:  3, iter:  72,700, lr:(2.000e-04,)] [eta: 10 days, 12:13:11, time (data): 0.940 (0.006)] l_pix: 4.0969e-02 
2025-05-21 20:19:35,474 INFO: [train..][epoch:  3, iter:  72,800, lr:(2.000e-04,)] [eta: 10 days, 12:08:53, time (data): 0.941 (0.006)] l_pix: 4.1086e-02 
2025-05-21 20:21:08,740 INFO: [train..][epoch:  3, iter:  72,900, lr:(2.000e-04,)] [eta: 10 days, 12:04:08, time (data): 0.936 (0.006)] l_pix: 4.4385e-02 
2025-05-21 20:22:43,389 INFO: [train..][epoch:  3, iter:  73,000, lr:(2.000e-04,)] [eta: 10 days, 12:00:19, time (data): 0.945 (0.006)] l_pix: 5.8761e-02 
2025-05-21 20:24:17,753 INFO: [train..][epoch:  3, iter:  73,100, lr:(2.000e-04,)] [eta: 10 days, 11:56:21, time (data): 0.944 (0.006)] l_pix: 4.4114e-02 
2025-05-21 20:25:51,146 INFO: [train..][epoch:  3, iter:  73,200, lr:(2.000e-04,)] [eta: 10 days, 11:51:45, time (data): 0.933 (0.006)] l_pix: 4.5208e-02 
2025-05-21 20:27:22,718 INFO: [train..][epoch:  3, iter:  73,300, lr:(2.000e-04,)] [eta: 10 days, 11:45:58, time (data): 0.924 (0.006)] l_pix: 4.1690e-02 
2025-05-21 20:28:55,388 INFO: [train..][epoch:  3, iter:  73,400, lr:(2.000e-04,)] [eta: 10 days, 11:40:57, time (data): 0.929 (0.006)] l_pix: 5.3094e-02 
2025-05-21 20:30:28,666 INFO: [train..][epoch:  3, iter:  73,500, lr:(2.000e-04,)] [eta: 10 days, 11:36:22, time (data): 0.931 (0.006)] l_pix: 6.1089e-02 
2025-05-21 20:32:02,991 INFO: [train..][epoch:  3, iter:  73,600, lr:(2.000e-04,)] [eta: 10 days, 11:32:29, time (data): 0.948 (0.006)] l_pix: 4.1741e-02 
2025-05-21 20:33:35,210 INFO: [train..][epoch:  3, iter:  73,700, lr:(2.000e-04,)] [eta: 10 days, 11:27:15, time (data): 0.934 (0.006)] l_pix: 4.5062e-02 
2025-05-21 20:35:09,525 INFO: [train..][epoch:  3, iter:  73,800, lr:(2.000e-04,)] [eta: 10 days, 11:23:25, time (data): 0.941 (0.006)] l_pix: 4.9365e-02 
2025-05-21 20:36:43,242 INFO: [train..][epoch:  3, iter:  73,900, lr:(2.000e-04,)] [eta: 10 days, 11:19:12, time (data): 0.939 (0.006)] l_pix: 4.9680e-02 
2025-05-21 20:38:16,508 INFO: [train..][epoch:  3, iter:  74,000, lr:(2.000e-04,)] [eta: 10 days, 11:14:44, time (data): 0.928 (0.006)] l_pix: 5.2926e-02 
2025-05-21 20:39:47,953 INFO: [train..][epoch:  3, iter:  74,100, lr:(2.000e-04,)] [eta: 10 days, 11:09:07, time (data): 0.920 (0.006)] l_pix: 5.6181e-02 
2025-05-21 20:41:20,547 INFO: [train..][epoch:  3, iter:  74,200, lr:(2.000e-04,)] [eta: 10 days, 11:04:15, time (data): 0.923 (0.006)] l_pix: 3.7594e-02 
2025-05-21 20:42:53,567 INFO: [train..][epoch:  3, iter:  74,300, lr:(2.000e-04,)] [eta: 10 days, 10:59:42, time (data): 0.927 (0.006)] l_pix: 5.8848e-02 
2025-05-21 20:44:26,273 INFO: [train..][epoch:  3, iter:  74,400, lr:(2.000e-04,)] [eta: 10 days, 10:54:59, time (data): 0.929 (0.006)] l_pix: 4.4367e-02 
2025-05-21 20:45:59,922 INFO: [train..][epoch:  3, iter:  74,500, lr:(2.000e-04,)] [eta: 10 days, 10:50:52, time (data): 0.933 (0.006)] l_pix: 4.2785e-02 
2025-05-21 20:47:32,954 INFO: [train..][epoch:  3, iter:  74,600, lr:(2.000e-04,)] [eta: 10 days, 10:46:24, time (data): 0.933 (0.006)] l_pix: 5.6372e-02 
2025-05-21 20:49:07,100 INFO: [train..][epoch:  3, iter:  74,700, lr:(2.000e-04,)] [eta: 10 days, 10:42:38, time (data): 0.938 (0.006)] l_pix: 5.8855e-02 
2025-05-21 20:50:39,208 INFO: [train..][epoch:  3, iter:  74,800, lr:(2.000e-04,)] [eta: 10 days, 10:37:38, time (data): 0.916 (0.006)] l_pix: 5.4305e-02 
2025-05-21 20:52:11,213 INFO: [train..][epoch:  3, iter:  74,900, lr:(2.000e-04,)] [eta: 10 days, 10:32:36, time (data): 0.918 (0.006)] l_pix: 4.4420e-02 
2025-05-21 20:53:42,974 INFO: [train..][epoch:  3, iter:  75,000, lr:(2.000e-04,)] [eta: 10 days, 10:27:26, time (data): 0.918 (0.006)] l_pix: 5.8511e-02 
2025-05-21 20:53:42,974 INFO: Saving models and training states.
2025-05-21 21:00:11,873 INFO: Validation validation
	 # psnr: 26.9038	Best: 26.9038 @ 75000 iter

2025-05-21 21:01:44,504 INFO: [train..][epoch:  3, iter:  75,100, lr:(2.000e-04,)] [eta: 10 days, 14:21:40, time (data): 0.923 (0.006)] l_pix: 4.3904e-02 
2025-05-21 21:03:16,716 INFO: [train..][epoch:  3, iter:  75,200, lr:(2.000e-04,)] [eta: 10 days, 14:15:51, time (data): 0.924 (0.006)] l_pix: 4.4111e-02 
2025-05-21 21:04:49,596 INFO: [train..][epoch:  3, iter:  75,300, lr:(2.000e-04,)] [eta: 10 days, 14:10:29, time (data): 0.927 (0.006)] l_pix: 4.7120e-02 
2025-05-21 21:06:21,850 INFO: [train..][epoch:  3, iter:  75,400, lr:(2.000e-04,)] [eta: 10 days, 14:04:47, time (data): 0.924 (0.006)] l_pix: 4.6379e-02 
2025-05-21 21:07:53,186 INFO: [train..][epoch:  3, iter:  75,500, lr:(2.000e-04,)] [eta: 10 days, 13:58:32, time (data): 0.918 (0.006)] l_pix: 4.6412e-02 
2025-05-21 21:09:25,983 INFO: [train..][epoch:  3, iter:  75,600, lr:(2.000e-04,)] [eta: 10 days, 13:53:13, time (data): 0.926 (0.006)] l_pix: 4.1432e-02 
2025-05-21 21:11:00,016 INFO: [train..][epoch:  3, iter:  75,700, lr:(2.000e-04,)] [eta: 10 days, 13:48:40, time (data): 0.934 (0.006)] l_pix: 4.4289e-02 
2025-05-21 21:12:33,727 INFO: [train..][epoch:  3, iter:  75,800, lr:(2.000e-04,)] [eta: 10 days, 13:43:57, time (data): 0.938 (0.006)] l_pix: 6.2338e-02 
2025-05-21 21:14:06,253 INFO: [train..][epoch:  3, iter:  75,900, lr:(2.000e-04,)] [eta: 10 days, 13:38:33, time (data): 0.931 (0.006)] l_pix: 5.9326e-02 
2025-05-21 21:15:38,644 INFO: [train..][epoch:  3, iter:  76,000, lr:(2.000e-04,)] [eta: 10 days, 13:33:06, time (data): 0.926 (0.006)] l_pix: 4.7125e-02 
2025-05-21 21:17:10,915 INFO: [train..][epoch:  3, iter:  76,100, lr:(2.000e-04,)] [eta: 10 days, 13:27:37, time (data): 0.924 (0.006)] l_pix: 4.9355e-02 
2025-05-21 21:18:43,685 INFO: [train..][epoch:  3, iter:  76,200, lr:(2.000e-04,)] [eta: 10 days, 13:22:27, time (data): 0.928 (0.006)] l_pix: 4.8849e-02 
2025-05-21 21:20:16,273 INFO: [train..][epoch:  3, iter:  76,300, lr:(2.000e-04,)] [eta: 10 days, 13:17:12, time (data): 0.927 (0.006)] l_pix: 4.5391e-02 
2025-05-21 21:21:48,500 INFO: [train..][epoch:  3, iter:  76,400, lr:(2.000e-04,)] [eta: 10 days, 13:11:46, time (data): 0.922 (0.006)] l_pix: 3.5682e-02 
2025-05-21 21:23:21,188 INFO: [train..][epoch:  3, iter:  76,500, lr:(2.000e-04,)] [eta: 10 days, 13:06:38, time (data): 0.925 (0.006)] l_pix: 5.3008e-02 
