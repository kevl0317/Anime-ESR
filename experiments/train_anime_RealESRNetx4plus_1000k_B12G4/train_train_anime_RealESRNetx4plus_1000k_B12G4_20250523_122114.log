2025-05-23 12:21:14,833 INFO: 
                ____                _       _____  ____
               / __ ) ____ _ _____ (_)_____/ ___/ / __ \
              / __  |/ __ `// ___// // ___/\__ \ / /_/ /
             / /_/ // /_/ /(__  )/ // /__ ___/ // _, _/
            /_____/ \__,_//____//_/ \___//____//_/ |_|
     ______                   __   __                 __      __
    / ____/____   ____   ____/ /  / /   __  __ _____ / /__   / /
   / / __ / __ \ / __ \ / __  /  / /   / / / // ___// //_/  / /
  / /_/ // /_/ // /_/ // /_/ /  / /___/ /_/ // /__ / /<    /_/
  \____/ \____/ \____/ \____/  /_____/\____/ \___//_/|_|  (_)
    
Version Information: 
	BasicSR: 1.4.2
	PyTorch: 2.7.0+cu128
	TorchVision: 0.22.0+cu128
2025-05-23 12:21:14,833 INFO: 
  name: train_anime_RealESRNetx4plus_1000k_B12G4
  model_type: RealESRNetModel
  scale: 4
  num_gpu: 1
  manual_seed: 0
  gt_usm: True
  resize_prob: [0.2, 0.7, 0.1]
  resize_range: [0.15, 1.5]
  gaussian_noise_prob: 0.5
  noise_range: [1, 30]
  poisson_scale_range: [0.05, 3]
  gray_noise_prob: 0.4
  jpeg_range: [30, 95]
  second_blur_prob: 0.8
  resize_prob2: [0.3, 0.4, 0.3]
  resize_range2: [0.3, 1.2]
  gaussian_noise_prob2: 0.5
  noise_range2: [1, 25]
  poisson_scale_range2: [0.05, 2.5]
  gray_noise_prob2: 0.4
  jpeg_range2: [30, 95]
  gt_size: 256
  queue_size: 320
  datasets:[
    train:[
      name: Anime
      type: RealESRGANDataset
      dataroot_gt: datasets/anime
      meta_info: datasets/anime/meta_info_train.txt
      io_backend:[
        type: disk
      ]
      blur_kernel_size: 21
      kernel_list: ['iso', 'aniso', 'generalized_iso', 'generalized_aniso', 'plateau_iso', 'plateau_aniso']
      kernel_prob: [0.45, 0.25, 0.12, 0.03, 0.12, 0.03]
      sinc_prob: 0.1
      blur_sigma: [0.2, 3]
      betag_range: [0.5, 4]
      betap_range: [1, 2]
      blur_kernel_size2: 21
      kernel_list2: ['iso', 'aniso', 'generalized_iso', 'generalized_aniso', 'plateau_iso', 'plateau_aniso']
      kernel_prob2: [0.45, 0.25, 0.12, 0.03, 0.12, 0.03]
      sinc_prob2: 0.1
      blur_sigma2: [0.2, 1.5]
      betag_range2: [0.5, 4]
      betap_range2: [1, 2]
      final_sinc_prob: 0.8
      gt_size: 256
      use_hflip: True
      use_rot: False
      use_shuffle: True
      num_worker_per_gpu: 5
      batch_size_per_gpu: 16
      dataset_enlarge_ratio: 1
      prefetch_mode: None
      phase: train
      scale: 4
    ]
    val:[
      name: validation
      type: PairedImageDataset
      dataroot_gt: datasets/anime/galData_val
      dataroot_lq: datasets/anime/galData_val_lr_x4_bicubic
      io_backend:[
        type: disk
      ]
      phase: val
      scale: 4
    ]
  ]
  network_g:[
    type: RRDBNet
    num_in_ch: 3
    num_out_ch: 3
    num_feat: 64
    num_block: 23
    num_grow_ch: 32
  ]
  path:[
    pretrain_network_g: G:\AI\Anime-ESR\experiments\train_anime_RealESRNetx4plus_1000k_B12G4\models\net_g_170000.pth
    param_key_g: params
    strict_load_g: True
    resume_state: experiments\train_anime_RealESRNetx4plus_1000k_B12G4\training_states\170000.state
    experiments_root: G:\AI\Anime-ESR\experiments\train_anime_RealESRNetx4plus_1000k_B12G4
    models: G:\AI\Anime-ESR\experiments\train_anime_RealESRNetx4plus_1000k_B12G4\models
    training_states: G:\AI\Anime-ESR\experiments\train_anime_RealESRNetx4plus_1000k_B12G4\training_states
    log: G:\AI\Anime-ESR\experiments\train_anime_RealESRNetx4plus_1000k_B12G4
    visualization: G:\AI\Anime-ESR\experiments\train_anime_RealESRNetx4plus_1000k_B12G4\visualization
  ]
  train:[
    ema_decay: 0.999
    optim_g:[
      type: Adam
      lr: 0.0002
      weight_decay: 0
      betas: [0.9, 0.99]
    ]
    scheduler:[
      type: MultiStepLR
      milestones: [1000000]
      gamma: 0.5
    ]
    total_iter: 1000000
    warmup_iter: -1
    pixel_opt:[
      type: L1Loss
      loss_weight: 1.0
      reduction: mean
    ]
  ]
  val:[
    val_freq: 5000.0
    save_img: True
    metrics:[
      psnr:[
        type: calculate_psnr
        crop_border: 4
        test_y_channel: False
      ]
    ]
  ]
  logger:[
    print_freq: 100
    save_checkpoint_freq: 5000.0
    use_tb_logger: True
    wandb:[
      project: None
      resume_id: None
    ]
  ]
  dist_params:[
    backend: nccl
    port: 29500
  ]
  dist: False
  rank: 0
  world_size: 1
  auto_resume: True
  is_train: True
  root_path: G:\AI\Anime-ESR

2025-05-23 12:21:15,518 INFO: Dataset [RealESRGANDataset] - Anime is built.
2025-05-23 12:21:15,518 INFO: Training statistics:
	Number of train images: 299263
	Dataset enlarge ratio: 1
	Batch size per gpu: 16
	World size (gpu number): 1
	Require iter number per epoch: 18704
	Total epochs: 54; iters: 1000000.
2025-05-23 12:21:15,574 INFO: Dataset [PairedImageDataset] - validation is built.
2025-05-23 12:21:15,574 INFO: Number of val images/folders in validation: 488
2025-05-23 12:21:15,730 INFO: Network [RRDBNet] is created.
2025-05-23 12:21:15,769 INFO: Network: RRDBNet, with parameters: 16,697,987
2025-05-23 12:21:15,769 INFO: RRDBNet(
  (conv_first): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (body): Sequential(
    (0): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (5): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (6): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (7): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (8): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (9): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (10): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (11): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (12): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (13): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (14): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (15): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (16): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (17): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (18): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (19): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (20): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (21): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (22): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
  (conv_body): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv_up1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv_up2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv_hr): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv_last): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
)
2025-05-23 12:21:15,909 INFO: Loading RRDBNet model from G:\AI\Anime-ESR\experiments\train_anime_RealESRNetx4plus_1000k_B12G4\models\net_g_170000.pth, with param key: [params].
2025-05-23 12:21:15,988 INFO: Use Exponential Moving Average with decay: 0.999
2025-05-23 12:21:16,123 INFO: Network [RRDBNet] is created.
2025-05-23 12:21:16,272 INFO: Loading RRDBNet model from G:\AI\Anime-ESR\experiments\train_anime_RealESRNetx4plus_1000k_B12G4\models\net_g_170000.pth, with param key: [params_ema].
2025-05-23 12:21:16,346 INFO: Loss [L1Loss] is created.
2025-05-23 12:21:16,363 INFO: Model [RealESRNetModel] is created.
2025-05-23 12:21:16,369 INFO: Resuming training from epoch: 8, iter: 170000.
2025-05-23 12:21:31,565 INFO: Start training from epoch: 8, iter: 170000
2025-05-23 12:23:24,365 INFO: [train..][epoch:  8, iter: 170,100, lr:(2.000e-04,)] [eta: 12 days, 4:08:34, time (data): 1.128 (0.161)] l_pix: 4.2570e-02 
2025-05-23 12:24:52,298 INFO: [train..][epoch:  8, iter: 170,200, lr:(2.000e-04,)] [eta: 10 days, 7:37:08, time (data): 1.004 (0.083)] l_pix: 4.4386e-02 
2025-05-23 12:26:20,655 INFO: [train..][epoch:  8, iter: 170,300, lr:(2.000e-04,)] [eta: 9 days, 16:59:13, time (data): 0.883 (0.006)] l_pix: 4.2659e-02 
2025-05-23 12:27:49,155 INFO: [train..][epoch:  8, iter: 170,400, lr:(2.000e-04,)] [eta: 9 days, 9:43:23, time (data): 0.884 (0.006)] l_pix: 5.1548e-02 
2025-05-23 12:29:19,062 INFO: [train..][epoch:  8, iter: 170,500, lr:(2.000e-04,)] [eta: 9 days, 5:59:47, time (data): 0.900 (0.005)] l_pix: 4.0659e-02 
2025-05-23 12:30:49,967 INFO: [train..][epoch:  8, iter: 170,600, lr:(2.000e-04,)] [eta: 9 days, 3:53:01, time (data): 0.904 (0.005)] l_pix: 5.9189e-02 
2025-05-23 12:32:19,447 INFO: [train..][epoch:  8, iter: 170,700, lr:(2.000e-04,)] [eta: 9 days, 1:53:55, time (data): 0.894 (0.005)] l_pix: 4.4837e-02 
2025-05-23 12:33:51,310 INFO: [train..][epoch:  8, iter: 170,800, lr:(2.000e-04,)] [eta: 9 days, 1:05:18, time (data): 0.907 (0.005)] l_pix: 5.5338e-02 
2025-05-23 12:35:23,597 INFO: [train..][epoch:  8, iter: 170,900, lr:(2.000e-04,)] [eta: 9 days, 0:33:37, time (data): 0.923 (0.005)] l_pix: 6.0505e-02 
2025-05-23 12:36:55,590 INFO: [train..][epoch:  8, iter: 171,000, lr:(2.000e-04,)] [eta: 9 days, 0:03:55, time (data): 0.921 (0.005)] l_pix: 3.6110e-02 
2025-05-23 12:38:26,779 INFO: [train..][epoch:  8, iter: 171,100, lr:(2.000e-04,)] [eta: 8 days, 23:29:13, time (data): 0.912 (0.005)] l_pix: 5.0696e-02 
2025-05-23 12:39:56,200 INFO: [train..][epoch:  8, iter: 171,200, lr:(2.000e-04,)] [eta: 8 days, 22:39:43, time (data): 0.903 (0.005)] l_pix: 4.8188e-02 
2025-05-23 12:41:23,740 INFO: [train..][epoch:  8, iter: 171,300, lr:(2.000e-04,)] [eta: 8 days, 21:37:39, time (data): 0.876 (0.005)] l_pix: 4.4816e-02 
2025-05-23 12:42:51,011 INFO: [train..][epoch:  8, iter: 171,400, lr:(2.000e-04,)] [eta: 8 days, 20:41:34, time (data): 0.874 (0.005)] l_pix: 6.7030e-02 
2025-05-23 12:44:18,300 INFO: [train..][epoch:  8, iter: 171,500, lr:(2.000e-04,)] [eta: 8 days, 19:52:56, time (data): 0.873 (0.005)] l_pix: 5.3947e-02 
2025-05-23 12:45:45,785 INFO: [train..][epoch:  8, iter: 171,600, lr:(2.000e-04,)] [eta: 8 days, 19:11:53, time (data): 0.874 (0.005)] l_pix: 5.0684e-02 
2025-05-23 12:47:13,416 INFO: [train..][epoch:  8, iter: 171,700, lr:(2.000e-04,)] [eta: 8 days, 18:36:40, time (data): 0.876 (0.005)] l_pix: 6.3983e-02 
2025-05-23 12:48:41,031 INFO: [train..][epoch:  8, iter: 171,800, lr:(2.000e-04,)] [eta: 8 days, 18:05:05, time (data): 0.876 (0.005)] l_pix: 5.0017e-02 
2025-05-23 12:50:09,131 INFO: [train..][epoch:  8, iter: 171,900, lr:(2.000e-04,)] [eta: 8 days, 17:40:12, time (data): 0.881 (0.005)] l_pix: 5.6933e-02 
2025-05-23 12:51:36,777 INFO: [train..][epoch:  8, iter: 172,000, lr:(2.000e-04,)] [eta: 8 days, 17:14:30, time (data): 0.879 (0.005)] l_pix: 4.1533e-02 
2025-05-23 12:53:04,168 INFO: [train..][epoch:  8, iter: 172,100, lr:(2.000e-04,)] [eta: 8 days, 16:49:27, time (data): 0.874 (0.005)] l_pix: 5.2170e-02 
2025-05-23 12:54:31,644 INFO: [train..][epoch:  8, iter: 172,200, lr:(2.000e-04,)] [eta: 8 days, 16:27:05, time (data): 0.874 (0.005)] l_pix: 5.2259e-02 
2025-05-23 12:55:59,222 INFO: [train..][epoch:  8, iter: 172,300, lr:(2.000e-04,)] [eta: 8 days, 16:07:08, time (data): 0.876 (0.005)] l_pix: 5.4936e-02 
2025-05-23 12:57:26,538 INFO: [train..][epoch:  8, iter: 172,400, lr:(2.000e-04,)] [eta: 8 days, 15:47:13, time (data): 0.875 (0.005)] l_pix: 5.2185e-02 
2025-05-23 12:58:54,065 INFO: [train..][epoch:  8, iter: 172,500, lr:(2.000e-04,)] [eta: 8 days, 15:29:57, time (data): 0.876 (0.005)] l_pix: 5.9798e-02 
2025-05-23 13:00:21,355 INFO: [train..][epoch:  8, iter: 172,600, lr:(2.000e-04,)] [eta: 8 days, 15:12:38, time (data): 0.874 (0.005)] l_pix: 4.1972e-02 
2025-05-23 13:01:48,575 INFO: [train..][epoch:  8, iter: 172,700, lr:(2.000e-04,)] [eta: 8 days, 14:56:08, time (data): 0.872 (0.005)] l_pix: 4.3490e-02 
2025-05-23 13:03:16,020 INFO: [train..][epoch:  8, iter: 172,800, lr:(2.000e-04,)] [eta: 8 days, 14:41:50, time (data): 0.873 (0.005)] l_pix: 3.9908e-02 
2025-05-23 13:04:43,714 INFO: [train..][epoch:  8, iter: 172,900, lr:(2.000e-04,)] [eta: 8 days, 14:29:35, time (data): 0.877 (0.005)] l_pix: 5.7127e-02 
2025-05-23 13:06:11,334 INFO: [train..][epoch:  8, iter: 173,000, lr:(2.000e-04,)] [eta: 8 days, 14:17:43, time (data): 0.876 (0.005)] l_pix: 5.4653e-02 
2025-05-23 13:07:38,805 INFO: [train..][epoch:  8, iter: 173,100, lr:(2.000e-04,)] [eta: 8 days, 14:05:51, time (data): 0.875 (0.005)] l_pix: 6.2499e-02 
2025-05-23 13:09:06,354 INFO: [train..][epoch:  8, iter: 173,200, lr:(2.000e-04,)] [eta: 8 days, 13:54:59, time (data): 0.875 (0.005)] l_pix: 5.2419e-02 
2025-05-23 13:10:33,756 INFO: [train..][epoch:  8, iter: 173,300, lr:(2.000e-04,)] [eta: 8 days, 13:44:04, time (data): 0.874 (0.005)] l_pix: 4.3664e-02 
2025-05-23 13:12:01,281 INFO: [train..][epoch:  8, iter: 173,400, lr:(2.000e-04,)] [eta: 8 days, 13:34:13, time (data): 0.874 (0.005)] l_pix: 4.2330e-02 
2025-05-23 13:13:28,564 INFO: [train..][epoch:  8, iter: 173,500, lr:(2.000e-04,)] [eta: 8 days, 13:23:53, time (data): 0.874 (0.005)] l_pix: 5.5043e-02 
2025-05-23 13:14:55,772 INFO: [train..][epoch:  8, iter: 173,600, lr:(2.000e-04,)] [eta: 8 days, 13:13:45, time (data): 0.873 (0.005)] l_pix: 4.6326e-02 
2025-05-23 13:16:23,355 INFO: [train..][epoch:  8, iter: 173,700, lr:(2.000e-04,)] [eta: 8 days, 13:05:29, time (data): 0.876 (0.005)] l_pix: 3.9551e-02 
2025-05-23 13:17:51,045 INFO: [train..][epoch:  8, iter: 173,800, lr:(2.000e-04,)] [eta: 8 days, 12:57:58, time (data): 0.876 (0.005)] l_pix: 5.5504e-02 
2025-05-23 13:19:18,530 INFO: [train..][epoch:  8, iter: 173,900, lr:(2.000e-04,)] [eta: 8 days, 12:50:02, time (data): 0.875 (0.006)] l_pix: 4.3716e-02 
2025-05-23 13:20:45,801 INFO: [train..][epoch:  8, iter: 174,000, lr:(2.000e-04,)] [eta: 8 days, 12:41:42, time (data): 0.874 (0.005)] l_pix: 5.8191e-02 
2025-05-23 13:22:13,247 INFO: [train..][epoch:  8, iter: 174,100, lr:(2.000e-04,)] [eta: 8 days, 12:34:17, time (data): 0.874 (0.005)] l_pix: 5.7956e-02 
2025-05-23 13:23:40,571 INFO: [train..][epoch:  8, iter: 174,200, lr:(2.000e-04,)] [eta: 8 days, 12:26:45, time (data): 0.873 (0.005)] l_pix: 4.8472e-02 
2025-05-23 13:25:07,968 INFO: [train..][epoch:  8, iter: 174,300, lr:(2.000e-04,)] [eta: 8 days, 12:19:43, time (data): 0.873 (0.006)] l_pix: 4.6951e-02 
2025-05-23 13:26:35,455 INFO: [train..][epoch:  8, iter: 174,400, lr:(2.000e-04,)] [eta: 8 days, 12:13:14, time (data): 0.874 (0.005)] l_pix: 4.5135e-02 
2025-05-23 13:28:02,661 INFO: [train..][epoch:  8, iter: 174,500, lr:(2.000e-04,)] [eta: 8 days, 12:06:07, time (data): 0.871 (0.005)] l_pix: 5.6505e-02 
2025-05-23 13:29:29,931 INFO: [train..][epoch:  8, iter: 174,600, lr:(2.000e-04,)] [eta: 8 days, 11:59:26, time (data): 0.872 (0.005)] l_pix: 5.8527e-02 
2025-05-23 13:30:57,424 INFO: [train..][epoch:  8, iter: 174,700, lr:(2.000e-04,)] [eta: 8 days, 11:53:38, time (data): 0.875 (0.006)] l_pix: 6.1719e-02 
2025-05-23 13:32:25,100 INFO: [train..][epoch:  8, iter: 174,800, lr:(2.000e-04,)] [eta: 8 days, 11:48:32, time (data): 0.876 (0.005)] l_pix: 3.8520e-02 
2025-05-23 13:33:52,583 INFO: [train..][epoch:  8, iter: 174,900, lr:(2.000e-04,)] [eta: 8 days, 11:43:02, time (data): 0.875 (0.005)] l_pix: 4.7230e-02 
2025-05-23 13:35:20,053 INFO: [train..][epoch:  8, iter: 175,000, lr:(2.000e-04,)] [eta: 8 days, 11:37:40, time (data): 0.875 (0.005)] l_pix: 4.9411e-02 
2025-05-23 13:35:20,053 INFO: Saving models and training states.
2025-05-23 13:44:20,155 INFO: Validation validation
	 # psnr: 27.1110	Best: 27.1110 @ 175000 iter

2025-05-23 13:45:47,637 INFO: [train..][epoch:  8, iter: 175,100, lr:(2.000e-04,)] [eta: 9 days, 11:48:10, time (data): 0.873 (0.005)] l_pix: 4.3061e-02 
2025-05-23 13:47:14,620 INFO: [train..][epoch:  8, iter: 175,200, lr:(2.000e-04,)] [eta: 9 days, 11:13:39, time (data): 0.871 (0.005)] l_pix: 4.1330e-02 
2025-05-23 13:48:42,229 INFO: [train..][epoch:  8, iter: 175,300, lr:(2.000e-04,)] [eta: 9 days, 10:42:00, time (data): 0.876 (0.005)] l_pix: 5.2900e-02 
2025-05-23 13:50:09,825 INFO: [train..][epoch:  8, iter: 175,400, lr:(2.000e-04,)] [eta: 9 days, 10:11:26, time (data): 0.876 (0.005)] l_pix: 3.9457e-02 
2025-05-23 13:51:37,348 INFO: [train..][epoch:  8, iter: 175,500, lr:(2.000e-04,)] [eta: 9 days, 9:41:45, time (data): 0.876 (0.005)] l_pix: 5.9146e-02 
2025-05-23 13:53:04,751 INFO: [train..][epoch:  8, iter: 175,600, lr:(2.000e-04,)] [eta: 9 days, 9:12:46, time (data): 0.875 (0.005)] l_pix: 4.3634e-02 
2025-05-23 13:54:32,087 INFO: [train..][epoch:  8, iter: 175,700, lr:(2.000e-04,)] [eta: 9 days, 8:44:36, time (data): 0.873 (0.005)] l_pix: 4.6570e-02 
2025-05-23 13:55:59,879 INFO: [train..][epoch:  8, iter: 175,800, lr:(2.000e-04,)] [eta: 9 days, 8:18:26, time (data): 0.876 (0.005)] l_pix: 3.7800e-02 
2025-05-23 13:57:27,255 INFO: [train..][epoch:  8, iter: 175,900, lr:(2.000e-04,)] [eta: 9 days, 7:52:07, time (data): 0.873 (0.005)] l_pix: 4.1261e-02 
2025-05-23 13:58:54,763 INFO: [train..][epoch:  8, iter: 176,000, lr:(2.000e-04,)] [eta: 9 days, 7:26:57, time (data): 0.874 (0.005)] l_pix: 4.6417e-02 
2025-05-23 14:00:21,977 INFO: [train..][epoch:  8, iter: 176,100, lr:(2.000e-04,)] [eta: 9 days, 7:01:54, time (data): 0.872 (0.005)] l_pix: 4.6719e-02 
2025-05-23 14:01:49,536 INFO: [train..][epoch:  8, iter: 176,200, lr:(2.000e-04,)] [eta: 9 days, 6:38:22, time (data): 0.874 (0.005)] l_pix: 4.9433e-02 
2025-05-23 14:03:16,952 INFO: [train..][epoch:  8, iter: 176,300, lr:(2.000e-04,)] [eta: 9 days, 6:15:13, time (data): 0.874 (0.005)] l_pix: 4.3116e-02 
2025-05-23 14:04:44,323 INFO: [train..][epoch:  8, iter: 176,400, lr:(2.000e-04,)] [eta: 9 days, 5:52:40, time (data): 0.874 (0.005)] l_pix: 3.9515e-02 
2025-05-23 14:06:11,903 INFO: [train..][epoch:  8, iter: 176,500, lr:(2.000e-04,)] [eta: 9 days, 5:31:12, time (data): 0.876 (0.006)] l_pix: 5.2764e-02 
2025-05-23 14:07:39,428 INFO: [train..][epoch:  8, iter: 176,600, lr:(2.000e-04,)] [eta: 9 days, 5:10:13, time (data): 0.875 (0.006)] l_pix: 3.7505e-02 
2025-05-23 14:09:06,742 INFO: [train..][epoch:  8, iter: 176,700, lr:(2.000e-04,)] [eta: 9 days, 4:49:23, time (data): 0.873 (0.005)] l_pix: 3.7843e-02 
2025-05-23 14:10:34,282 INFO: [train..][epoch:  8, iter: 176,800, lr:(2.000e-04,)] [eta: 9 days, 4:29:35, time (data): 0.874 (0.006)] l_pix: 5.4214e-02 
2025-05-23 14:12:01,846 INFO: [train..][epoch:  8, iter: 176,900, lr:(2.000e-04,)] [eta: 9 days, 4:10:21, time (data): 0.877 (0.005)] l_pix: 5.5738e-02 
2025-05-23 14:13:29,327 INFO: [train..][epoch:  8, iter: 177,000, lr:(2.000e-04,)] [eta: 9 days, 3:51:29, time (data): 0.876 (0.005)] l_pix: 5.4908e-02 
2025-05-23 14:14:56,511 INFO: [train..][epoch:  8, iter: 177,100, lr:(2.000e-04,)] [eta: 9 days, 3:32:31, time (data): 0.872 (0.006)] l_pix: 4.9317e-02 
2025-05-23 14:16:23,822 INFO: [train..][epoch:  8, iter: 177,200, lr:(2.000e-04,)] [eta: 9 days, 3:14:17, time (data): 0.873 (0.006)] l_pix: 4.9015e-02 
2025-05-23 14:17:51,021 INFO: [train..][epoch:  8, iter: 177,300, lr:(2.000e-04,)] [eta: 9 days, 2:56:18, time (data): 0.872 (0.005)] l_pix: 5.5499e-02 
2025-05-23 14:19:18,277 INFO: [train..][epoch:  8, iter: 177,400, lr:(2.000e-04,)] [eta: 9 days, 2:38:52, time (data): 0.872 (0.005)] l_pix: 5.0900e-02 
2025-05-23 14:20:45,674 INFO: [train..][epoch:  8, iter: 177,500, lr:(2.000e-04,)] [eta: 9 days, 2:22:07, time (data): 0.874 (0.005)] l_pix: 5.1108e-02 
2025-05-23 14:22:12,913 INFO: [train..][epoch:  8, iter: 177,600, lr:(2.000e-04,)] [eta: 9 days, 2:05:30, time (data): 0.873 (0.005)] l_pix: 5.3859e-02 
2025-05-23 14:23:40,147 INFO: [train..][epoch:  8, iter: 177,700, lr:(2.000e-04,)] [eta: 9 days, 1:49:15, time (data): 0.874 (0.005)] l_pix: 5.3385e-02 
2025-05-23 14:25:07,507 INFO: [train..][epoch:  8, iter: 177,800, lr:(2.000e-04,)] [eta: 9 days, 1:33:36, time (data): 0.874 (0.005)] l_pix: 4.5676e-02 
2025-05-23 14:26:34,837 INFO: [train..][epoch:  8, iter: 177,900, lr:(2.000e-04,)] [eta: 9 days, 1:18:16, time (data): 0.872 (0.005)] l_pix: 6.5882e-02 
2025-05-23 14:28:02,416 INFO: [train..][epoch:  8, iter: 178,000, lr:(2.000e-04,)] [eta: 9 days, 1:03:42, time (data): 0.874 (0.005)] l_pix: 5.0512e-02 
2025-05-23 14:29:29,775 INFO: [train..][epoch:  8, iter: 178,100, lr:(2.000e-04,)] [eta: 9 days, 0:49:05, time (data): 0.874 (0.005)] l_pix: 5.7046e-02 
2025-05-23 14:30:57,139 INFO: [train..][epoch:  8, iter: 178,200, lr:(2.000e-04,)] [eta: 9 days, 0:34:48, time (data): 0.874 (0.006)] l_pix: 5.5142e-02 
2025-05-23 14:32:24,537 INFO: [train..][epoch:  8, iter: 178,300, lr:(2.000e-04,)] [eta: 9 days, 0:20:53, time (data): 0.874 (0.006)] l_pix: 5.0152e-02 
2025-05-23 14:33:51,965 INFO: [train..][epoch:  8, iter: 178,400, lr:(2.000e-04,)] [eta: 9 days, 0:07:19, time (data): 0.874 (0.006)] l_pix: 5.1561e-02 
2025-05-23 14:35:19,576 INFO: [train..][epoch:  8, iter: 178,500, lr:(2.000e-04,)] [eta: 8 days, 23:54:19, time (data): 0.877 (0.006)] l_pix: 5.3694e-02 
2025-05-23 14:36:46,886 INFO: [train..][epoch:  8, iter: 178,600, lr:(2.000e-04,)] [eta: 8 days, 23:41:07, time (data): 0.874 (0.006)] l_pix: 3.9906e-02 
2025-05-23 14:38:14,496 INFO: [train..][epoch:  8, iter: 178,700, lr:(2.000e-04,)] [eta: 8 days, 23:28:39, time (data): 0.876 (0.006)] l_pix: 4.1783e-02 
2025-05-23 14:39:42,284 INFO: [train..][epoch:  8, iter: 178,800, lr:(2.000e-04,)] [eta: 8 days, 23:16:43, time (data): 0.877 (0.006)] l_pix: 5.6807e-02 
2025-05-23 14:41:09,854 INFO: [train..][epoch:  8, iter: 178,900, lr:(2.000e-04,)] [eta: 8 days, 23:04:41, time (data): 0.876 (0.006)] l_pix: 3.3374e-02 
2025-05-23 14:42:37,801 INFO: [train..][epoch:  8, iter: 179,000, lr:(2.000e-04,)] [eta: 8 days, 22:53:28, time (data): 0.878 (0.006)] l_pix: 4.9669e-02 
2025-05-23 14:44:05,314 INFO: [train..][epoch:  8, iter: 179,100, lr:(2.000e-04,)] [eta: 8 days, 22:41:48, time (data): 0.875 (0.006)] l_pix: 5.7217e-02 
2025-05-23 14:45:32,930 INFO: [train..][epoch:  8, iter: 179,200, lr:(2.000e-04,)] [eta: 8 days, 22:30:30, time (data): 0.876 (0.006)] l_pix: 4.5754e-02 
2025-05-23 14:47:00,219 INFO: [train..][epoch:  8, iter: 179,300, lr:(2.000e-04,)] [eta: 8 days, 22:18:57, time (data): 0.874 (0.006)] l_pix: 6.1395e-02 
2025-05-23 14:48:27,790 INFO: [train..][epoch:  8, iter: 179,400, lr:(2.000e-04,)] [eta: 8 days, 22:08:01, time (data): 0.875 (0.006)] l_pix: 4.8658e-02 
2025-05-23 14:49:55,224 INFO: [train..][epoch:  8, iter: 179,500, lr:(2.000e-04,)] [eta: 8 days, 21:57:05, time (data): 0.873 (0.006)] l_pix: 6.6529e-02 
2025-05-23 14:51:22,700 INFO: [train..][epoch:  8, iter: 179,600, lr:(2.000e-04,)] [eta: 8 days, 21:46:24, time (data): 0.874 (0.006)] l_pix: 5.4417e-02 
2025-05-23 14:52:50,182 INFO: [train..][epoch:  8, iter: 179,700, lr:(2.000e-04,)] [eta: 8 days, 21:35:56, time (data): 0.874 (0.006)] l_pix: 5.2051e-02 
2025-05-23 14:54:17,833 INFO: [train..][epoch:  8, iter: 179,800, lr:(2.000e-04,)] [eta: 8 days, 21:25:52, time (data): 0.876 (0.006)] l_pix: 4.5363e-02 
2025-05-23 14:55:45,337 INFO: [train..][epoch:  8, iter: 179,900, lr:(2.000e-04,)] [eta: 8 days, 21:15:47, time (data): 0.878 (0.006)] l_pix: 3.9215e-02 
2025-05-23 14:57:12,863 INFO: [train..][epoch:  8, iter: 180,000, lr:(2.000e-04,)] [eta: 8 days, 21:05:54, time (data): 0.876 (0.006)] l_pix: 5.4950e-02 
2025-05-23 14:57:12,864 INFO: Saving models and training states.
2025-05-23 15:03:16,117 INFO: Validation validation
	 # psnr: 27.0944	Best: 27.1110 @ 175000 iter

2025-05-23 15:04:43,397 INFO: [train..][epoch:  8, iter: 180,100, lr:(2.000e-04,)] [eta: 9 days, 5:07:17, time (data): 0.872 (0.006)] l_pix: 5.5446e-02 
2025-05-23 15:06:10,686 INFO: [train..][epoch:  8, iter: 180,200, lr:(2.000e-04,)] [eta: 9 days, 4:52:32, time (data): 0.872 (0.006)] l_pix: 4.7428e-02 
2025-05-23 15:07:38,123 INFO: [train..][epoch:  8, iter: 180,300, lr:(2.000e-04,)] [eta: 9 days, 4:38:15, time (data): 0.875 (0.006)] l_pix: 4.6294e-02 
2025-05-23 15:09:05,449 INFO: [train..][epoch:  8, iter: 180,400, lr:(2.000e-04,)] [eta: 9 days, 4:24:03, time (data): 0.874 (0.006)] l_pix: 5.5780e-02 
2025-05-23 15:10:32,941 INFO: [train..][epoch:  8, iter: 180,500, lr:(2.000e-04,)] [eta: 9 days, 4:10:19, time (data): 0.874 (0.006)] l_pix: 5.0192e-02 
2025-05-23 15:12:01,789 INFO: [train..][epoch:  8, iter: 180,600, lr:(2.000e-04,)] [eta: 9 days, 3:58:34, time (data): 0.884 (0.006)] l_pix: 5.7651e-02 
2025-05-23 15:13:30,277 INFO: [train..][epoch:  8, iter: 180,700, lr:(2.000e-04,)] [eta: 9 days, 3:46:33, time (data): 0.881 (0.006)] l_pix: 5.7006e-02 
2025-05-23 15:14:57,952 INFO: [train..][epoch:  8, iter: 180,800, lr:(2.000e-04,)] [eta: 9 days, 3:33:42, time (data): 0.878 (0.006)] l_pix: 4.8445e-02 
2025-05-23 15:16:25,458 INFO: [train..][epoch:  8, iter: 180,900, lr:(2.000e-04,)] [eta: 9 days, 3:20:50, time (data): 0.874 (0.006)] l_pix: 4.5347e-02 
2025-05-23 15:17:52,875 INFO: [train..][epoch:  8, iter: 181,000, lr:(2.000e-04,)] [eta: 9 days, 3:08:05, time (data): 0.874 (0.006)] l_pix: 3.3137e-02 
2025-05-23 15:19:20,646 INFO: [train..][epoch:  8, iter: 181,100, lr:(2.000e-04,)] [eta: 9 days, 2:55:58, time (data): 0.876 (0.006)] l_pix: 3.7843e-02 
2025-05-23 15:20:48,696 INFO: [train..][epoch:  8, iter: 181,200, lr:(2.000e-04,)] [eta: 9 days, 2:44:22, time (data): 0.879 (0.006)] l_pix: 3.8585e-02 
2025-05-23 15:22:16,326 INFO: [train..][epoch:  8, iter: 181,300, lr:(2.000e-04,)] [eta: 9 days, 2:32:27, time (data): 0.876 (0.006)] l_pix: 5.8534e-02 
2025-05-23 15:23:44,081 INFO: [train..][epoch:  8, iter: 181,400, lr:(2.000e-04,)] [eta: 9 days, 2:20:52, time (data): 0.877 (0.006)] l_pix: 4.3720e-02 
2025-05-23 15:25:11,247 INFO: [train..][epoch:  8, iter: 181,500, lr:(2.000e-04,)] [eta: 9 days, 2:08:46, time (data): 0.870 (0.006)] l_pix: 4.7463e-02 
2025-05-23 15:26:38,609 INFO: [train..][epoch:  8, iter: 181,600, lr:(2.000e-04,)] [eta: 9 days, 1:57:04, time (data): 0.873 (0.006)] l_pix: 3.7709e-02 
2025-05-23 15:28:06,257 INFO: [train..][epoch:  8, iter: 181,700, lr:(2.000e-04,)] [eta: 9 days, 1:45:53, time (data): 0.879 (0.006)] l_pix: 5.7759e-02 
2025-05-23 15:29:33,771 INFO: [train..][epoch:  8, iter: 181,800, lr:(2.000e-04,)] [eta: 9 days, 1:34:42, time (data): 0.876 (0.006)] l_pix: 4.7317e-02 
2025-05-23 15:31:01,180 INFO: [train..][epoch:  8, iter: 181,900, lr:(2.000e-04,)] [eta: 9 days, 1:23:35, time (data): 0.874 (0.006)] l_pix: 5.2371e-02 
2025-05-23 15:32:28,620 INFO: [train..][epoch:  8, iter: 182,000, lr:(2.000e-04,)] [eta: 9 days, 1:12:38, time (data): 0.874 (0.006)] l_pix: 3.7899e-02 
2025-05-23 15:33:56,147 INFO: [train..][epoch:  8, iter: 182,100, lr:(2.000e-04,)] [eta: 9 days, 1:01:58, time (data): 0.875 (0.006)] l_pix: 4.2537e-02 
2025-05-23 15:35:23,289 INFO: [train..][epoch:  8, iter: 182,200, lr:(2.000e-04,)] [eta: 9 days, 0:51:00, time (data): 0.872 (0.006)] l_pix: 5.0181e-02 
2025-05-23 15:36:50,475 INFO: [train..][epoch:  8, iter: 182,300, lr:(2.000e-04,)] [eta: 9 days, 0:40:15, time (data): 0.871 (0.006)] l_pix: 4.5093e-02 
2025-05-23 15:38:17,685 INFO: [train..][epoch:  8, iter: 182,400, lr:(2.000e-04,)] [eta: 9 days, 0:29:40, time (data): 0.872 (0.006)] l_pix: 4.2922e-02 
2025-05-23 15:39:44,768 INFO: [train..][epoch:  8, iter: 182,500, lr:(2.000e-04,)] [eta: 9 days, 0:19:06, time (data): 0.873 (0.006)] l_pix: 5.7489e-02 
2025-05-23 15:41:12,216 INFO: [train..][epoch:  8, iter: 182,600, lr:(2.000e-04,)] [eta: 9 days, 0:09:03, time (data): 0.874 (0.006)] l_pix: 3.7612e-02 
2025-05-23 15:42:39,777 INFO: [train..][epoch:  8, iter: 182,700, lr:(2.000e-04,)] [eta: 8 days, 23:59:17, time (data): 0.881 (0.006)] l_pix: 4.7217e-02 
2025-05-23 15:44:06,848 INFO: [train..][epoch:  8, iter: 182,800, lr:(2.000e-04,)] [eta: 8 days, 23:49:07, time (data): 0.873 (0.006)] l_pix: 5.9475e-02 
2025-05-23 15:45:34,061 INFO: [train..][epoch:  8, iter: 182,900, lr:(2.000e-04,)] [eta: 8 days, 23:39:14, time (data): 0.872 (0.006)] l_pix: 5.0129e-02 
2025-05-23 15:47:01,259 INFO: [train..][epoch:  8, iter: 183,000, lr:(2.000e-04,)] [eta: 8 days, 23:29:28, time (data): 0.872 (0.006)] l_pix: 5.0425e-02 
2025-05-23 15:48:28,460 INFO: [train..][epoch:  8, iter: 183,100, lr:(2.000e-04,)] [eta: 8 days, 23:19:49, time (data): 0.871 (0.006)] l_pix: 4.3260e-02 
2025-05-23 15:49:55,409 INFO: [train..][epoch:  8, iter: 183,200, lr:(2.000e-04,)] [eta: 8 days, 23:10:03, time (data): 0.870 (0.006)] l_pix: 4.7542e-02 
2025-05-23 15:51:22,503 INFO: [train..][epoch:  8, iter: 183,300, lr:(2.000e-04,)] [eta: 8 days, 23:00:33, time (data): 0.871 (0.006)] l_pix: 5.2277e-02 
2025-05-23 15:52:49,729 INFO: [train..][epoch:  8, iter: 183,400, lr:(2.000e-04,)] [eta: 8 days, 22:51:18, time (data): 0.872 (0.006)] l_pix: 4.3193e-02 
2025-05-23 15:54:16,817 INFO: [train..][epoch:  8, iter: 183,500, lr:(2.000e-04,)] [eta: 8 days, 22:42:02, time (data): 0.868 (0.006)] l_pix: 4.0246e-02 
2025-05-23 15:55:44,102 INFO: [train..][epoch:  8, iter: 183,600, lr:(2.000e-04,)] [eta: 8 days, 22:33:04, time (data): 0.872 (0.006)] l_pix: 5.7124e-02 
2025-05-23 15:57:11,219 INFO: [train..][epoch:  8, iter: 183,700, lr:(2.000e-04,)] [eta: 8 days, 22:24:03, time (data): 0.870 (0.006)] l_pix: 5.2225e-02 
2025-05-23 15:58:38,363 INFO: [train..][epoch:  8, iter: 183,800, lr:(2.000e-04,)] [eta: 8 days, 22:15:10, time (data): 0.871 (0.006)] l_pix: 4.7125e-02 
2025-05-23 16:00:05,527 INFO: [train..][epoch:  8, iter: 183,900, lr:(2.000e-04,)] [eta: 8 days, 22:06:25, time (data): 0.873 (0.006)] l_pix: 4.6161e-02 
2025-05-23 16:01:32,713 INFO: [train..][epoch:  8, iter: 184,000, lr:(2.000e-04,)] [eta: 8 days, 21:57:48, time (data): 0.872 (0.006)] l_pix: 3.3199e-02 
2025-05-23 16:02:59,786 INFO: [train..][epoch:  8, iter: 184,100, lr:(2.000e-04,)] [eta: 8 days, 21:49:09, time (data): 0.869 (0.006)] l_pix: 4.4823e-02 
2025-05-23 16:04:27,184 INFO: [train..][epoch:  8, iter: 184,200, lr:(2.000e-04,)] [eta: 8 days, 21:40:56, time (data): 0.873 (0.006)] l_pix: 4.1792e-02 
2025-05-23 16:05:54,372 INFO: [train..][epoch:  8, iter: 184,300, lr:(2.000e-04,)] [eta: 8 days, 21:32:36, time (data): 0.874 (0.006)] l_pix: 3.5586e-02 
2025-05-23 16:07:21,499 INFO: [train..][epoch:  8, iter: 184,400, lr:(2.000e-04,)] [eta: 8 days, 21:24:19, time (data): 0.872 (0.006)] l_pix: 2.9994e-02 
2025-05-23 16:08:48,662 INFO: [train..][epoch:  8, iter: 184,500, lr:(2.000e-04,)] [eta: 8 days, 21:16:09, time (data): 0.872 (0.006)] l_pix: 4.1994e-02 
2025-05-23 16:10:15,824 INFO: [train..][epoch:  8, iter: 184,600, lr:(2.000e-04,)] [eta: 8 days, 21:08:05, time (data): 0.872 (0.006)] l_pix: 3.8575e-02 
2025-05-23 16:11:42,868 INFO: [train..][epoch:  8, iter: 184,700, lr:(2.000e-04,)] [eta: 8 days, 21:00:00, time (data): 0.870 (0.006)] l_pix: 4.6496e-02 
2025-05-23 16:13:10,234 INFO: [train..][epoch:  8, iter: 184,800, lr:(2.000e-04,)] [eta: 8 days, 20:52:17, time (data): 0.873 (0.006)] l_pix: 4.1451e-02 
2025-05-23 16:14:37,382 INFO: [train..][epoch:  8, iter: 184,900, lr:(2.000e-04,)] [eta: 8 days, 20:44:28, time (data): 0.875 (0.006)] l_pix: 4.6619e-02 
2025-05-23 16:16:04,683 INFO: [train..][epoch:  8, iter: 185,000, lr:(2.000e-04,)] [eta: 8 days, 20:36:53, time (data): 0.873 (0.006)] l_pix: 5.1642e-02 
2025-05-23 16:16:04,685 INFO: Saving models and training states.
2025-05-23 16:22:08,745 INFO: Validation validation
	 # psnr: 27.1794	Best: 27.1794 @ 185000 iter

2025-05-23 16:23:36,238 INFO: [train..][epoch:  8, iter: 185,100, lr:(2.000e-04,)] [eta: 9 days, 1:56:58, time (data): 0.877 (0.006)] l_pix: 5.5066e-02 
2025-05-23 16:25:03,459 INFO: [train..][epoch:  8, iter: 185,200, lr:(2.000e-04,)] [eta: 9 days, 1:47:16, time (data): 0.873 (0.006)] l_pix: 6.3386e-02 
2025-05-23 16:26:30,749 INFO: [train..][epoch:  8, iter: 185,300, lr:(2.000e-04,)] [eta: 9 days, 1:37:44, time (data): 0.873 (0.006)] l_pix: 4.2200e-02 
2025-05-23 16:27:58,272 INFO: [train..][epoch:  8, iter: 185,400, lr:(2.000e-04,)] [eta: 9 days, 1:28:31, time (data): 0.875 (0.006)] l_pix: 5.4619e-02 
2025-05-23 16:29:25,805 INFO: [train..][epoch:  8, iter: 185,500, lr:(2.000e-04,)] [eta: 9 days, 1:19:24, time (data): 0.877 (0.006)] l_pix: 4.6020e-02 
2025-05-23 16:30:53,385 INFO: [train..][epoch:  8, iter: 185,600, lr:(2.000e-04,)] [eta: 9 days, 1:10:25, time (data): 0.876 (0.006)] l_pix: 5.1563e-02 
2025-05-23 16:32:21,658 INFO: [train..][epoch:  8, iter: 185,700, lr:(2.000e-04,)] [eta: 9 days, 1:02:09, time (data): 0.890 (0.006)] l_pix: 3.7649e-02 
2025-05-23 16:33:51,183 INFO: [train..][epoch:  8, iter: 185,800, lr:(2.000e-04,)] [eta: 9 days, 0:55:02, time (data): 0.894 (0.006)] l_pix: 6.7998e-02 
2025-05-23 16:35:20,257 INFO: [train..][epoch:  8, iter: 185,900, lr:(2.000e-04,)] [eta: 9 days, 0:47:36, time (data): 0.893 (0.006)] l_pix: 4.5253e-02 
2025-05-23 16:36:49,359 INFO: [train..][epoch:  8, iter: 186,000, lr:(2.000e-04,)] [eta: 9 days, 0:40:16, time (data): 0.891 (0.006)] l_pix: 5.0432e-02 
2025-05-23 16:38:17,948 INFO: [train..][epoch:  8, iter: 186,100, lr:(2.000e-04,)] [eta: 9 days, 0:32:34, time (data): 0.884 (0.006)] l_pix: 5.0158e-02 
2025-05-23 16:39:48,100 INFO: [train..][epoch:  8, iter: 186,200, lr:(2.000e-04,)] [eta: 9 days, 0:26:15, time (data): 0.899 (0.006)] l_pix: 4.8870e-02 
2025-05-23 16:41:17,517 INFO: [train..][epoch:  8, iter: 186,300, lr:(2.000e-04,)] [eta: 9 days, 0:19:24, time (data): 0.898 (0.006)] l_pix: 4.3160e-02 
2025-05-23 16:42:47,623 INFO: [train..][epoch:  8, iter: 186,400, lr:(2.000e-04,)] [eta: 9 days, 0:13:10, time (data): 0.901 (0.006)] l_pix: 4.7095e-02 
2025-05-23 16:44:19,698 INFO: [train..][epoch:  8, iter: 186,500, lr:(2.000e-04,)] [eta: 9 days, 0:08:37, time (data): 0.898 (0.006)] l_pix: 5.4133e-02 
2025-05-23 16:45:48,233 INFO: [train..][epoch:  8, iter: 186,600, lr:(2.000e-04,)] [eta: 9 days, 0:01:13, time (data): 0.887 (0.006)] l_pix: 4.8641e-02 
2025-05-23 16:47:15,490 INFO: [train..][epoch:  8, iter: 186,700, lr:(2.000e-04,)] [eta: 8 days, 23:52:51, time (data): 0.871 (0.006)] l_pix: 5.8137e-02 
2025-05-23 16:48:43,411 INFO: [train..][epoch:  8, iter: 186,800, lr:(2.000e-04,)] [eta: 8 days, 23:45:05, time (data): 0.878 (0.006)] l_pix: 4.5230e-02 
2025-05-23 16:50:11,014 INFO: [train..][epoch:  8, iter: 186,900, lr:(2.000e-04,)] [eta: 8 days, 23:37:10, time (data): 0.873 (0.006)] l_pix: 4.1716e-02 
2025-05-23 16:51:38,384 INFO: [train..][epoch:  8, iter: 187,000, lr:(2.000e-04,)] [eta: 8 days, 23:29:07, time (data): 0.874 (0.006)] l_pix: 4.8876e-02 
2025-05-23 16:53:05,818 INFO: [train..][epoch:  8, iter: 187,100, lr:(2.000e-04,)] [eta: 8 days, 23:21:12, time (data): 0.875 (0.006)] l_pix: 5.8317e-02 
2025-05-23 16:54:33,267 INFO: [train..][epoch:  8, iter: 187,200, lr:(2.000e-04,)] [eta: 8 days, 23:13:22, time (data): 0.875 (0.006)] l_pix: 4.4371e-02 
2025-05-23 16:56:00,880 INFO: [train..][epoch:  8, iter: 187,300, lr:(2.000e-04,)] [eta: 8 days, 23:05:45, time (data): 0.873 (0.006)] l_pix: 4.8340e-02 
2025-05-23 16:57:28,543 INFO: [train..][epoch:  8, iter: 187,400, lr:(2.000e-04,)] [eta: 8 days, 22:58:14, time (data): 0.876 (0.006)] l_pix: 4.7289e-02 
2025-05-23 16:58:56,316 INFO: [train..][epoch:  8, iter: 187,500, lr:(2.000e-04,)] [eta: 8 days, 22:50:52, time (data): 0.872 (0.006)] l_pix: 6.4001e-02 
2025-05-23 17:00:23,824 INFO: [train..][epoch:  8, iter: 187,600, lr:(2.000e-04,)] [eta: 8 days, 22:43:22, time (data): 0.875 (0.006)] l_pix: 4.7205e-02 
2025-05-23 17:01:52,153 INFO: [train..][epoch:  8, iter: 187,700, lr:(2.000e-04,)] [eta: 8 days, 22:36:34, time (data): 0.871 (0.006)] l_pix: 5.4905e-02 
2025-05-23 17:03:19,492 INFO: [train..][epoch:  8, iter: 187,800, lr:(2.000e-04,)] [eta: 8 days, 22:29:04, time (data): 0.873 (0.006)] l_pix: 4.2487e-02 
2025-05-23 17:04:46,940 INFO: [train..][epoch:  8, iter: 187,900, lr:(2.000e-04,)] [eta: 8 days, 22:21:43, time (data): 0.875 (0.006)] l_pix: 4.9408e-02 
2025-05-23 17:06:14,879 INFO: [train..][epoch:  8, iter: 188,000, lr:(2.000e-04,)] [eta: 8 days, 22:14:48, time (data): 0.879 (0.006)] l_pix: 4.0337e-02 
2025-05-23 17:07:43,661 INFO: [train..][epoch:  8, iter: 188,100, lr:(2.000e-04,)] [eta: 8 days, 22:08:35, time (data): 0.901 (0.006)] l_pix: 4.5514e-02 
2025-05-23 17:09:12,231 INFO: [train..][epoch:  8, iter: 188,200, lr:(2.000e-04,)] [eta: 8 days, 22:02:16, time (data): 0.887 (0.006)] l_pix: 5.2345e-02 
2025-05-23 17:10:40,511 INFO: [train..][epoch:  8, iter: 188,300, lr:(2.000e-04,)] [eta: 8 days, 21:55:46, time (data): 0.878 (0.006)] l_pix: 5.0632e-02 
2025-05-23 17:12:08,758 INFO: [train..][epoch:  8, iter: 188,400, lr:(2.000e-04,)] [eta: 8 days, 21:49:19, time (data): 0.882 (0.006)] l_pix: 4.8158e-02 
2025-05-23 17:13:37,621 INFO: [train..][epoch:  8, iter: 188,500, lr:(2.000e-04,)] [eta: 8 days, 21:43:22, time (data): 0.879 (0.006)] l_pix: 5.4367e-02 
2025-05-23 17:15:06,444 INFO: [train..][epoch:  8, iter: 188,600, lr:(2.000e-04,)] [eta: 8 days, 21:37:26, time (data): 0.888 (0.006)] l_pix: 4.9901e-02 
2025-05-23 17:16:34,729 INFO: [train..][epoch:  8, iter: 188,700, lr:(2.000e-04,)] [eta: 8 days, 21:31:09, time (data): 0.872 (0.005)] l_pix: 3.8256e-02 
