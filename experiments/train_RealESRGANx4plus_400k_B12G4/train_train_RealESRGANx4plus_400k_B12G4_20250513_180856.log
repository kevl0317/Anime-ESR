2025-05-13 18:08:56,908 INFO: 
                ____                _       _____  ____
               / __ ) ____ _ _____ (_)_____/ ___/ / __ \
              / __  |/ __ `// ___// // ___/\__ \ / /_/ /
             / /_/ // /_/ /(__  )/ // /__ ___/ // _, _/
            /_____/ \__,_//____//_/ \___//____//_/ |_|
     ______                   __   __                 __      __
    / ____/____   ____   ____/ /  / /   __  __ _____ / /__   / /
   / / __ / __ \ / __ \ / __  /  / /   / / / // ___// //_/  / /
  / /_/ // /_/ // /_/ // /_/ /  / /___/ /_/ // /__ / /<    /_/
  \____/ \____/ \____/ \____/  /_____/\____/ \___//_/|_|  (_)
    
Version Information: 
	BasicSR: 1.4.2
	PyTorch: 2.7.0+cu128
	TorchVision: 0.22.0+cu128
2025-05-13 18:08:56,908 INFO: 
  name: train_RealESRGANx4plus_400k_B12G4
  model_type: RealESRGANModel
  scale: 4
  num_gpu: 1
  manual_seed: 0
  l1_gt_usm: True
  percep_gt_usm: True
  gan_gt_usm: False
  resize_prob: [0.2, 0.7, 0.1]
  resize_range: [0.15, 1.5]
  gaussian_noise_prob: 0.5
  noise_range: [1, 30]
  poisson_scale_range: [0.05, 3]
  gray_noise_prob: 0.4
  jpeg_range: [30, 95]
  second_blur_prob: 0.8
  resize_prob2: [0.3, 0.4, 0.3]
  resize_range2: [0.3, 1.2]
  gaussian_noise_prob2: 0.5
  noise_range2: [1, 25]
  poisson_scale_range2: [0.05, 2.5]
  gray_noise_prob2: 0.4
  jpeg_range2: [30, 95]
  gt_size: 256
  queue_size: 180
  datasets:[
    train:[
      name: DF2K+OST
      type: RealESRGANDataset
      dataroot_gt: datasets/
      meta_info: datasets/meta_info.txt
      io_backend:[
        type: disk
      ]
      blur_kernel_size: 21
      kernel_list: ['iso', 'aniso', 'generalized_iso', 'generalized_aniso', 'plateau_iso', 'plateau_aniso']
      kernel_prob: [0.45, 0.25, 0.12, 0.03, 0.12, 0.03]
      sinc_prob: 0.1
      blur_sigma: [0.2, 3]
      betag_range: [0.5, 4]
      betap_range: [1, 2]
      blur_kernel_size2: 21
      kernel_list2: ['iso', 'aniso', 'generalized_iso', 'generalized_aniso', 'plateau_iso', 'plateau_aniso']
      kernel_prob2: [0.45, 0.25, 0.12, 0.03, 0.12, 0.03]
      sinc_prob2: 0.1
      blur_sigma2: [0.2, 1.5]
      betag_range2: [0.5, 4]
      betap_range2: [1, 2]
      final_sinc_prob: 0.8
      gt_size: 256
      use_hflip: True
      use_rot: False
      use_shuffle: True
      num_worker_per_gpu: 5
      batch_size_per_gpu: 12
      dataset_enlarge_ratio: 1
      prefetch_mode: None
      phase: train
      scale: 4
    ]
  ]
  network_g:[
    type: RRDBNet
    num_in_ch: 3
    num_out_ch: 3
    num_feat: 64
    num_block: 23
    num_grow_ch: 32
  ]
  network_d:[
    type: UNetDiscriminatorSN
    num_in_ch: 3
    num_feat: 64
    skip_connection: True
  ]
  path:[
    pretrain_network_g: experiments/net_g_50000.pth
    param_key_g: params_ema
    strict_load_g: True
    resume_state: None
    experiments_root: E:\ECE 175B\Project\Real-ESRGAN\experiments\train_RealESRGANx4plus_400k_B12G4
    models: E:\ECE 175B\Project\Real-ESRGAN\experiments\train_RealESRGANx4plus_400k_B12G4\models
    training_states: E:\ECE 175B\Project\Real-ESRGAN\experiments\train_RealESRGANx4plus_400k_B12G4\training_states
    log: E:\ECE 175B\Project\Real-ESRGAN\experiments\train_RealESRGANx4plus_400k_B12G4
    visualization: E:\ECE 175B\Project\Real-ESRGAN\experiments\train_RealESRGANx4plus_400k_B12G4\visualization
  ]
  train:[
    ema_decay: 0.999
    optim_g:[
      type: Adam
      lr: 0.0001
      weight_decay: 0
      betas: [0.9, 0.99]
    ]
    optim_d:[
      type: Adam
      lr: 0.0001
      weight_decay: 0
      betas: [0.9, 0.99]
    ]
    scheduler:[
      type: MultiStepLR
      milestones: [80000]
      gamma: 0.5
    ]
    total_iter: 80000
    warmup_iter: -1
    pixel_opt:[
      type: L1Loss
      loss_weight: 1.0
      reduction: mean
    ]
    perceptual_opt:[
      type: PerceptualLoss
      layer_weights:[
        conv1_2: 0.1
        conv2_2: 0.1
        conv3_4: 1
        conv4_4: 1
        conv5_4: 1
      ]
      vgg_type: vgg19
      use_input_norm: True
      perceptual_weight: 1.0
      style_weight: 0
      range_norm: False
      criterion: l1
    ]
    gan_opt:[
      type: GANLoss
      gan_type: vanilla
      real_label_val: 1.0
      fake_label_val: 0.0
      loss_weight: 0.1
    ]
    net_d_iters: 1
    net_d_init_iters: 0
  ]
  logger:[
    print_freq: 100
    save_checkpoint_freq: 5000.0
    use_tb_logger: True
    wandb:[
      project: None
      resume_id: None
    ]
  ]
  dist_params:[
    backend: nccl
    port: 29500
  ]
  dist: False
  rank: 0
  world_size: 1
  auto_resume: True
  is_train: True
  root_path: E:\ECE 175B\Project\Real-ESRGAN

2025-05-13 18:08:57,370 INFO: Dataset [RealESRGANDataset] - DF2K+OST is built.
2025-05-13 18:08:57,370 INFO: Training statistics:
	Number of train images: 62940
	Dataset enlarge ratio: 1
	Batch size per gpu: 12
	World size (gpu number): 1
	Require iter number per epoch: 5245
	Total epochs: 16; iters: 80000.
2025-05-13 18:08:57,946 INFO: Network [RRDBNet] is created.
2025-05-13 18:08:58,223 INFO: Network: RRDBNet, with parameters: 16,697,987
2025-05-13 18:08:58,223 INFO: RRDBNet(
  (conv_first): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (body): Sequential(
    (0): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (5): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (6): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (7): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (8): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (9): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (10): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (11): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (12): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (13): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (14): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (15): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (16): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (17): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (18): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (19): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (20): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (21): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (22): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
  (conv_body): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv_up1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv_up2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv_hr): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv_last): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
)
2025-05-13 18:08:58,778 INFO: Loading RRDBNet model from experiments/net_g_50000.pth, with param key: [params_ema].
2025-05-13 18:08:59,074 INFO: Use Exponential Moving Average with decay: 0.999
2025-05-13 18:08:59,623 INFO: Network [RRDBNet] is created.
2025-05-13 18:09:00,285 INFO: Loading RRDBNet model from experiments/net_g_50000.pth, with param key: [params_ema].
2025-05-13 18:09:00,487 INFO: Network [UNetDiscriminatorSN] is created.
2025-05-13 18:09:00,512 INFO: Network: UNetDiscriminatorSN, with parameters: 4,376,897
2025-05-13 18:09:00,512 INFO: UNetDiscriminatorSN(
  (conv0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv1): Conv2d(64, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
  (conv2): Conv2d(128, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
  (conv3): Conv2d(256, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
  (conv4): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (conv5): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (conv6): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (conv7): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (conv8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (conv9): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
)
2025-05-13 18:09:00,512 INFO: Loss [L1Loss] is created.
2025-05-13 18:09:03,741 INFO: Loss [PerceptualLoss] is created.
2025-05-13 18:09:03,768 INFO: Loss [GANLoss] is created.
2025-05-13 18:09:03,843 INFO: Model [RealESRGANModel] is created.
2025-05-13 18:09:46,351 INFO: Start training from epoch: 0, iter: 0
2025-05-13 18:13:10,549 INFO: [train..][epoch:  0, iter:     100, lr:(1.000e-04,)] [eta: 1 day, 4:54:33, time (data): 2.042 (0.461)] l_g_pix: 4.2968e-02 l_g_percep: 1.0267e+01 l_g_gan: 7.1029e-02 l_d_real: 7.0637e-01 out_d_real: -2.5585e-02 l_d_fake: 6.7695e-01 out_d_fake: -3.3343e-02 
2025-05-13 18:15:24,263 INFO: [train..][epoch:  0, iter:     200, lr:(1.000e-04,)] [eta: 1 day, 5:15:16, time (data): 1.690 (0.243)] l_g_pix: 3.3090e-02 l_g_percep: 8.4548e+00 l_g_gan: 7.3710e-02 l_d_real: 7.2966e-01 out_d_real: -6.9950e-02 l_d_fake: 6.5225e-01 out_d_fake: -8.4852e-02 
2025-05-13 18:17:38,364 INFO: [train..][epoch:  0, iter:     300, lr:(1.000e-04,)] [eta: 1 day, 5:22:26, time (data): 1.341 (0.020)] l_g_pix: 3.8917e-02 l_g_percep: 8.4036e+00 l_g_gan: 7.0105e-02 l_d_real: 7.0043e-01 out_d_real: -1.4434e-02 l_d_fake: 6.8539e-01 out_d_fake: -1.5664e-02 
2025-05-13 18:19:52,171 INFO: [train..][epoch:  0, iter:     400, lr:(1.000e-04,)] [eta: 1 day, 5:23:57, time (data): 1.339 (0.021)] l_g_pix: 4.7745e-02 l_g_percep: 9.5759e+00 l_g_gan: 7.0691e-02 l_d_real: 6.9797e-01 out_d_real: -9.1255e-03 l_d_fake: 6.8124e-01 out_d_fake: -2.5666e-02 
2025-05-13 18:22:05,653 INFO: [train..][epoch:  0, iter:     500, lr:(1.000e-04,)] [eta: 1 day, 5:23:06, time (data): 1.335 (0.025)] l_g_pix: 5.3298e-02 l_g_percep: 1.1614e+01 l_g_gan: 7.1100e-02 l_d_real: 6.2285e-01 out_d_real: 1.6877e-01 l_d_fake: 7.0235e-01 out_d_fake: -8.6388e-03 
2025-05-13 18:24:19,410 INFO: [train..][epoch:  0, iter:     600, lr:(1.000e-04,)] [eta: 1 day, 5:22:24, time (data): 1.336 (0.025)] l_g_pix: 5.9155e-02 l_g_percep: 1.2695e+01 l_g_gan: 8.8351e-02 l_d_real: 7.5237e-01 out_d_real: 1.7648e-01 l_d_fake: 5.5118e-01 out_d_fake: -3.3230e-01 
2025-05-13 18:26:33,062 INFO: [train..][epoch:  0, iter:     700, lr:(1.000e-04,)] [eta: 1 day, 5:21:04, time (data): 1.336 (0.025)] l_g_pix: 4.7978e-02 l_g_percep: 1.0869e+01 l_g_gan: 7.5324e-02 l_d_real: 6.9967e-01 out_d_real: 1.7782e-02 l_d_fake: 6.4076e-01 out_d_fake: -1.1247e-01 
2025-05-13 18:28:46,830 INFO: [train..][epoch:  0, iter:     800, lr:(1.000e-04,)] [eta: 1 day, 5:19:42, time (data): 1.337 (0.025)] l_g_pix: 4.2228e-02 l_g_percep: 9.1479e+00 l_g_gan: 8.7079e-02 l_d_real: 7.1550e-01 out_d_real: 1.2123e-01 l_d_fake: 6.0568e-01 out_d_fake: -2.6511e-01 
2025-05-13 18:31:00,466 INFO: [train..][epoch:  0, iter:     900, lr:(1.000e-04,)] [eta: 1 day, 5:17:57, time (data): 1.336 (0.025)] l_g_pix: 4.8537e-02 l_g_percep: 1.1223e+01 l_g_gan: 8.2411e-02 l_d_real: 5.5863e-01 out_d_real: 7.6111e-01 l_d_fake: 6.3956e-01 out_d_fake: -1.8454e-01 
2025-05-13 18:33:14,050 INFO: [train..][epoch:  0, iter:   1,000, lr:(1.000e-04,)] [eta: 1 day, 5:16:03, time (data): 1.336 (0.025)] l_g_pix: 3.6127e-02 l_g_percep: 8.9490e+00 l_g_gan: 9.2699e-02 l_d_real: 7.2819e-01 out_d_real: 1.7134e-01 l_d_fake: 5.4970e-01 out_d_fake: -3.7723e-01 
2025-05-13 18:35:27,687 INFO: [train..][epoch:  0, iter:   1,100, lr:(1.000e-04,)] [eta: 1 day, 5:14:08, time (data): 1.337 (0.025)] l_g_pix: 6.1316e-02 l_g_percep: 1.1424e+01 l_g_gan: 6.5720e-02 l_d_real: 4.6258e-01 out_d_real: 1.2210e+00 l_d_fake: 8.2500e-01 out_d_fake: 1.6780e-01 
2025-05-13 18:37:41,107 INFO: [train..][epoch:  0, iter:   1,200, lr:(1.000e-04,)] [eta: 1 day, 5:11:56, time (data): 1.335 (0.024)] l_g_pix: 3.6764e-02 l_g_percep: 8.8908e+00 l_g_gan: 7.1500e-02 l_d_real: 6.4055e-01 out_d_real: 1.6470e-01 l_d_fake: 6.7865e-01 out_d_fake: -3.6359e-02 
2025-05-13 18:39:54,854 INFO: [train..][epoch:  0, iter:   1,300, lr:(1.000e-04,)] [eta: 1 day, 5:10:04, time (data): 1.338 (0.026)] l_g_pix: 3.6998e-02 l_g_percep: 1.0129e+01 l_g_gan: 8.0698e-02 l_d_real: 6.2871e-01 out_d_real: 3.9227e-01 l_d_fake: 6.2174e-01 out_d_fake: -1.8523e-01 
2025-05-13 18:42:08,498 INFO: [train..][epoch:  0, iter:   1,400, lr:(1.000e-04,)] [eta: 1 day, 5:08:03, time (data): 1.337 (0.025)] l_g_pix: 4.1962e-02 l_g_percep: 9.4070e+00 l_g_gan: 1.0305e-01 l_d_real: 8.5771e-01 out_d_real: -8.3028e-02 l_d_fake: 4.5615e-01 out_d_fake: -5.7436e-01 
2025-05-13 18:44:22,010 INFO: [train..][epoch:  0, iter:   1,500, lr:(1.000e-04,)] [eta: 1 day, 5:05:53, time (data): 1.335 (0.024)] l_g_pix: 4.1806e-02 l_g_percep: 1.0120e+01 l_g_gan: 7.0108e-02 l_d_real: 5.7555e-01 out_d_real: 5.2055e-01 l_d_fake: 7.2231e-01 out_d_fake: 2.1226e-02 
2025-05-13 18:46:35,976 INFO: [train..][epoch:  0, iter:   1,600, lr:(1.000e-04,)] [eta: 1 day, 5:04:05, time (data): 1.338 (0.024)] l_g_pix: 4.4456e-02 l_g_percep: 1.0887e+01 l_g_gan: 1.0371e-01 l_d_real: 8.2436e-01 out_d_real: 1.8078e-01 l_d_fake: 4.6182e-01 out_d_fake: -5.7523e-01 
2025-05-13 18:48:50,348 INFO: [train..][epoch:  0, iter:   1,700, lr:(1.000e-04,)] [eta: 1 day, 5:02:33, time (data): 1.344 (0.023)] l_g_pix: 4.2996e-02 l_g_percep: 1.0275e+01 l_g_gan: 7.4673e-02 l_d_real: 6.2661e-01 out_d_real: 3.2885e-01 l_d_fake: 6.5006e-01 out_d_fake: -9.6672e-02 
2025-05-13 18:51:04,594 INFO: [train..][epoch:  0, iter:   1,800, lr:(1.000e-04,)] [eta: 1 day, 5:00:50, time (data): 1.343 (0.023)] l_g_pix: 5.5358e-02 l_g_percep: 1.2054e+01 l_g_gan: 9.0926e-02 l_d_real: 5.0209e-01 out_d_real: 1.2387e+00 l_d_fake: 5.5940e-01 out_d_fake: -3.4985e-01 
2025-05-13 18:53:18,797 INFO: [train..][epoch:  0, iter:   1,900, lr:(1.000e-04,)] [eta: 1 day, 4:59:03, time (data): 1.342 (0.023)] l_g_pix: 2.7785e-02 l_g_percep: 8.3095e+00 l_g_gan: 8.6046e-02 l_d_real: 6.6801e-01 out_d_real: 3.5197e-01 l_d_fake: 5.8353e-01 out_d_fake: -2.7686e-01 
2025-05-13 18:55:32,814 INFO: [train..][epoch:  0, iter:   2,000, lr:(1.000e-04,)] [eta: 1 day, 4:57:05, time (data): 1.341 (0.023)] l_g_pix: 6.6488e-02 l_g_percep: 1.2582e+01 l_g_gan: 1.0969e-01 l_d_real: 7.1679e-01 out_d_real: 5.9859e-01 l_d_fake: 4.3242e-01 out_d_fake: -6.6439e-01 
2025-05-13 18:57:46,677 INFO: [train..][epoch:  0, iter:   2,100, lr:(1.000e-04,)] [eta: 1 day, 4:55:00, time (data): 1.338 (0.023)] l_g_pix: 4.6990e-02 l_g_percep: 9.8423e+00 l_g_gan: 1.1699e-01 l_d_real: 9.3656e-01 out_d_real: -2.3542e-01 l_d_fake: 4.0590e-01 out_d_fake: -7.6385e-01 
2025-05-13 19:00:00,877 INFO: [train..][epoch:  0, iter:   2,200, lr:(1.000e-04,)] [eta: 1 day, 4:53:07, time (data): 1.340 (0.023)] l_g_pix: 4.4980e-02 l_g_percep: 1.0219e+01 l_g_gan: 9.2003e-02 l_d_real: 6.6202e-01 out_d_real: 7.1907e-01 l_d_fake: 5.8950e-01 out_d_fake: -3.3052e-01 
2025-05-13 19:02:15,199 INFO: [train..][epoch:  0, iter:   2,300, lr:(1.000e-04,)] [eta: 1 day, 4:51:15, time (data): 1.343 (0.024)] l_g_pix: 4.3263e-02 l_g_percep: 1.0532e+01 l_g_gan: 9.5347e-02 l_d_real: 6.9173e-01 out_d_real: 5.0944e-01 l_d_fake: 5.2291e-01 out_d_fake: -4.3054e-01 
2025-05-13 19:04:29,065 INFO: [train..][epoch:  0, iter:   2,400, lr:(1.000e-04,)] [eta: 1 day, 4:49:07, time (data): 1.341 (0.023)] l_g_pix: 4.9860e-02 l_g_percep: 1.0872e+01 l_g_gan: 9.0989e-02 l_d_real: 4.4005e-01 out_d_real: 1.5012e+00 l_d_fake: 6.0691e-01 out_d_fake: -3.0296e-01 
2025-05-13 19:06:42,734 INFO: [train..][epoch:  0, iter:   2,500, lr:(1.000e-04,)] [eta: 1 day, 4:46:53, time (data): 1.337 (0.025)] l_g_pix: 3.8645e-02 l_g_percep: 8.6826e+00 l_g_gan: 9.3814e-02 l_d_real: 5.8522e-01 out_d_real: 7.4095e-01 l_d_fake: 5.5358e-01 out_d_fake: -3.8448e-01 
2025-05-13 19:08:56,356 INFO: [train..][epoch:  0, iter:   2,600, lr:(1.000e-04,)] [eta: 1 day, 4:44:37, time (data): 1.336 (0.025)] l_g_pix: 5.0510e-02 l_g_percep: 1.1229e+01 l_g_gan: 1.0459e-01 l_d_real: 6.7408e-01 out_d_real: 1.0422e+00 l_d_fake: 4.7210e-01 out_d_fake: -5.7375e-01 
2025-05-13 19:11:09,807 INFO: [train..][epoch:  0, iter:   2,700, lr:(1.000e-04,)] [eta: 1 day, 4:42:16, time (data): 1.334 (0.025)] l_g_pix: 3.6802e-02 l_g_percep: 8.4150e+00 l_g_gan: 7.1581e-02 l_d_real: 5.2775e-01 out_d_real: 7.3443e-01 l_d_fake: 7.2878e-01 out_d_fake: 1.2954e-02 
2025-05-13 19:13:23,801 INFO: [train..][epoch:  0, iter:   2,800, lr:(1.000e-04,)] [eta: 1 day, 4:40:11, time (data): 1.337 (0.024)] l_g_pix: 5.9721e-02 l_g_percep: 1.1511e+01 l_g_gan: 7.5804e-02 l_d_real: 4.3726e-01 out_d_real: 1.7157e+00 l_d_fake: 8.4994e-01 out_d_fake: 9.1878e-02 
2025-05-13 19:15:38,048 INFO: [train..][epoch:  0, iter:   2,900, lr:(1.000e-04,)] [eta: 1 day, 4:38:12, time (data): 1.343 (0.022)] l_g_pix: 4.6362e-02 l_g_percep: 1.0673e+01 l_g_gan: 9.0762e-02 l_d_real: 6.0168e-01 out_d_real: 8.2789e-01 l_d_fake: 6.0441e-01 out_d_fake: -3.0319e-01 
2025-05-13 19:17:52,157 INFO: [train..][epoch:  0, iter:   3,000, lr:(1.000e-04,)] [eta: 1 day, 4:36:08, time (data): 1.342 (0.022)] l_g_pix: 4.8314e-02 l_g_percep: 1.0891e+01 l_g_gan: 8.6933e-02 l_d_real: 6.3508e-01 out_d_real: 3.9024e-01 l_d_fake: 5.8577e-01 out_d_fake: -2.8356e-01 
2025-05-13 19:20:06,194 INFO: [train..][epoch:  0, iter:   3,100, lr:(1.000e-04,)] [eta: 1 day, 4:34:02, time (data): 1.341 (0.021)] l_g_pix: 4.4848e-02 l_g_percep: 1.1024e+01 l_g_gan: 9.7378e-02 l_d_real: 5.1569e-01 out_d_real: 1.5304e+00 l_d_fake: 5.5031e-01 out_d_fake: -4.2347e-01 
2025-05-13 19:22:20,526 INFO: [train..][epoch:  0, iter:   3,200, lr:(1.000e-04,)] [eta: 1 day, 4:32:03, time (data): 1.342 (0.022)] l_g_pix: 5.0373e-02 l_g_percep: 1.1614e+01 l_g_gan: 1.0933e-01 l_d_real: 5.4584e-01 out_d_real: 1.1621e+00 l_d_fake: 4.4356e-01 out_d_fake: -6.4972e-01 
2025-05-13 19:24:34,906 INFO: [train..][epoch:  0, iter:   3,300, lr:(1.000e-04,)] [eta: 1 day, 4:30:04, time (data): 1.343 (0.023)] l_g_pix: 3.8252e-02 l_g_percep: 8.8923e+00 l_g_gan: 1.1191e-01 l_d_real: 6.1951e-01 out_d_real: 8.6089e-01 l_d_fake: 4.2744e-01 out_d_fake: -6.9148e-01 
2025-05-13 19:26:49,061 INFO: [train..][epoch:  0, iter:   3,400, lr:(1.000e-04,)] [eta: 1 day, 4:27:58, time (data): 1.342 (0.023)] l_g_pix: 3.4378e-02 l_g_percep: 8.2085e+00 l_g_gan: 1.1298e-01 l_d_real: 7.1025e-01 out_d_real: 4.8675e-01 l_d_fake: 4.3400e-01 out_d_fake: -6.9576e-01 
2025-05-13 19:29:02,867 INFO: [train..][epoch:  0, iter:   3,500, lr:(1.000e-04,)] [eta: 1 day, 4:25:45, time (data): 1.337 (0.024)] l_g_pix: 3.4512e-02 l_g_percep: 8.7111e+00 l_g_gan: 9.3652e-02 l_d_real: 4.7410e-01 out_d_real: 1.6442e+00 l_d_fake: 6.5086e-01 out_d_fake: -2.8619e-01 
2025-05-13 19:31:16,548 INFO: [train..][epoch:  0, iter:   3,600, lr:(1.000e-04,)] [eta: 1 day, 4:23:29, time (data): 1.337 (0.024)] l_g_pix: 4.4189e-02 l_g_percep: 1.0100e+01 l_g_gan: 9.9665e-02 l_d_real: 5.8591e-01 out_d_real: 8.7907e-01 l_d_fake: 5.3322e-01 out_d_fake: -4.6342e-01 
2025-05-13 19:33:30,255 INFO: [train..][epoch:  0, iter:   3,700, lr:(1.000e-04,)] [eta: 1 day, 4:21:14, time (data): 1.337 (0.025)] l_g_pix: 5.1455e-02 l_g_percep: 1.1739e+01 l_g_gan: 1.0031e-01 l_d_real: 4.0355e-01 out_d_real: 1.7986e+00 l_d_fake: 5.5417e-01 out_d_fake: -4.4891e-01 
2025-05-13 19:35:44,196 INFO: [train..][epoch:  0, iter:   3,800, lr:(1.000e-04,)] [eta: 1 day, 4:19:03, time (data): 1.338 (0.024)] l_g_pix: 4.6396e-02 l_g_percep: 1.0103e+01 l_g_gan: 9.7407e-02 l_d_real: 5.6830e-01 out_d_real: 9.2884e-01 l_d_fake: 5.4221e-01 out_d_fake: -4.3190e-01 
2025-05-13 19:37:57,878 INFO: [train..][epoch:  0, iter:   3,900, lr:(1.000e-04,)] [eta: 1 day, 4:16:47, time (data): 1.336 (0.025)] l_g_pix: 5.0722e-02 l_g_percep: 1.1286e+01 l_g_gan: 9.0379e-02 l_d_real: 4.0942e-01 out_d_real: 1.8249e+00 l_d_fake: 6.1668e-01 out_d_fake: -2.8720e-01 
2025-05-13 19:40:11,438 INFO: [train..][epoch:  0, iter:   4,000, lr:(1.000e-04,)] [eta: 1 day, 4:14:29, time (data): 1.336 (0.025)] l_g_pix: 5.3122e-02 l_g_percep: 1.0247e+01 l_g_gan: 1.2931e-01 l_d_real: 6.9102e-01 out_d_real: 6.2144e-01 l_d_fake: 3.9944e-01 out_d_fake: -8.9339e-01 
2025-05-13 19:42:25,262 INFO: [train..][epoch:  0, iter:   4,100, lr:(1.000e-04,)] [eta: 1 day, 4:12:16, time (data): 1.337 (0.025)] l_g_pix: 5.3580e-02 l_g_percep: 1.1987e+01 l_g_gan: 9.0733e-02 l_d_real: 3.9818e-01 out_d_real: 2.3421e+00 l_d_fake: 6.3708e-01 out_d_fake: -2.7026e-01 
2025-05-13 19:44:38,999 INFO: [train..][epoch:  0, iter:   4,200, lr:(1.000e-04,)] [eta: 1 day, 4:10:02, time (data): 1.337 (0.025)] l_g_pix: 4.4641e-02 l_g_percep: 1.0120e+01 l_g_gan: 1.0216e-01 l_d_real: 5.2593e-01 out_d_real: 1.9881e+00 l_d_fake: 5.4560e-01 out_d_fake: -4.7600e-01 
2025-05-13 19:46:52,530 INFO: [train..][epoch:  0, iter:   4,300, lr:(1.000e-04,)] [eta: 1 day, 4:07:44, time (data): 1.334 (0.024)] l_g_pix: 5.1000e-02 l_g_percep: 1.0744e+01 l_g_gan: 1.1825e-01 l_d_real: 6.0348e-01 out_d_real: 1.4017e+00 l_d_fake: 4.5639e-01 out_d_fake: -7.2584e-01 
2025-05-13 19:49:06,374 INFO: [train..][epoch:  0, iter:   4,400, lr:(1.000e-04,)] [eta: 1 day, 4:05:31, time (data): 1.337 (0.024)] l_g_pix: 5.0557e-02 l_g_percep: 1.0174e+01 l_g_gan: 9.5490e-02 l_d_real: 3.4614e-01 out_d_real: 2.9736e+00 l_d_fake: 6.6015e-01 out_d_fake: -2.9480e-01 
2025-05-13 19:51:20,052 INFO: [train..][epoch:  0, iter:   4,500, lr:(1.000e-04,)] [eta: 1 day, 4:03:16, time (data): 1.337 (0.025)] l_g_pix: 4.5049e-02 l_g_percep: 1.0031e+01 l_g_gan: 1.1949e-01 l_d_real: 7.4618e-01 out_d_real: 6.7132e-01 l_d_fake: 4.4278e-01 out_d_fake: -7.5205e-01 
2025-05-13 19:53:33,735 INFO: [train..][epoch:  0, iter:   4,600, lr:(1.000e-04,)] [eta: 1 day, 4:01:01, time (data): 1.337 (0.025)] l_g_pix: 4.9511e-02 l_g_percep: 1.0810e+01 l_g_gan: 9.0862e-02 l_d_real: 3.6007e-01 out_d_real: 2.5894e+00 l_d_fake: 7.1681e-01 out_d_fake: -1.9194e-01 
2025-05-13 19:55:47,479 INFO: [train..][epoch:  0, iter:   4,700, lr:(1.000e-04,)] [eta: 1 day, 3:58:46, time (data): 1.337 (0.026)] l_g_pix: 4.4317e-02 l_g_percep: 8.4506e+00 l_g_gan: 9.0642e-02 l_d_real: 5.6341e-01 out_d_real: 1.2090e+00 l_d_fake: 5.8902e-01 out_d_fake: -3.1753e-01 
2025-05-13 19:58:01,607 INFO: [train..][epoch:  0, iter:   4,800, lr:(1.000e-04,)] [eta: 1 day, 3:56:38, time (data): 1.339 (0.025)] l_g_pix: 4.9218e-02 l_g_percep: 1.0128e+01 l_g_gan: 8.0686e-02 l_d_real: 2.9310e-01 out_d_real: 2.6908e+00 l_d_fake: 7.3288e-01 out_d_fake: -7.4004e-02 
2025-05-13 20:00:15,208 INFO: [train..][epoch:  0, iter:   4,900, lr:(1.000e-04,)] [eta: 1 day, 3:54:22, time (data): 1.335 (0.022)] l_g_pix: 4.1580e-02 l_g_percep: 9.2352e+00 l_g_gan: 1.4061e-01 l_d_real: 8.3066e-01 out_d_real: 3.2898e-01 l_d_fake: 3.1926e-01 out_d_fake: -1.0867e+00 
2025-05-13 20:02:29,069 INFO: [train..][epoch:  0, iter:   5,000, lr:(1.000e-04,)] [eta: 1 day, 3:52:09, time (data): 1.337 (0.023)] l_g_pix: 4.4116e-02 l_g_percep: 9.5654e+00 l_g_gan: 1.3298e-01 l_d_real: 5.9299e-01 out_d_real: 1.8751e+00 l_d_fake: 3.6740e-01 out_d_fake: -9.6225e-01 
2025-05-13 20:02:29,069 INFO: Saving models and training states.
2025-05-13 20:04:43,751 INFO: [train..][epoch:  0, iter:   5,100, lr:(1.000e-04,)] [eta: 1 day, 3:50:09, time (data): 1.338 (0.025)] l_g_pix: 5.3278e-02 l_g_percep: 1.1624e+01 l_g_gan: 1.0467e-01 l_d_real: 3.4265e-01 out_d_real: 2.5264e+00 l_d_fake: 5.3252e-01 out_d_fake: -5.1422e-01 
2025-05-13 20:06:57,276 INFO: [train..][epoch:  0, iter:   5,200, lr:(1.000e-04,)] [eta: 1 day, 3:47:51, time (data): 1.337 (0.025)] l_g_pix: 5.8107e-02 l_g_percep: 1.2327e+01 l_g_gan: 1.2764e-01 l_d_real: 4.0067e-01 out_d_real: 2.9439e+00 l_d_fake: 4.2164e-01 out_d_fake: -8.5471e-01 
2025-05-13 20:09:54,844 INFO: [train..][epoch:  1, iter:   5,300, lr:(1.000e-04,)] [eta: 1 day, 3:55:54, time (data): 1.928 (0.622)] l_g_pix: 4.4990e-02 l_g_percep: 1.1123e+01 l_g_gan: 1.3968e-01 l_d_real: 5.5948e-01 out_d_real: 1.9733e+00 l_d_fake: 3.8611e-01 out_d_fake: -1.0106e+00 
2025-05-13 20:12:08,021 INFO: [train..][epoch:  1, iter:   5,400, lr:(1.000e-04,)] [eta: 1 day, 3:53:20, time (data): 1.586 (0.278)] l_g_pix: 5.3754e-02 l_g_percep: 8.5201e+00 l_g_gan: 1.1196e-01 l_d_real: 6.3631e-01 out_d_real: 1.0715e+00 l_d_fake: 4.8321e-01 out_d_fake: -6.3637e-01 
2025-05-13 20:14:21,242 INFO: [train..][epoch:  1, iter:   5,500, lr:(1.000e-04,)] [eta: 1 day, 3:50:47, time (data): 1.333 (0.022)] l_g_pix: 3.4606e-02 l_g_percep: 8.2148e+00 l_g_gan: 1.2097e-01 l_d_real: 6.8061e-01 out_d_real: 1.1446e+00 l_d_fake: 4.6942e-01 out_d_fake: -7.4028e-01 
2025-05-13 20:16:34,540 INFO: [train..][epoch:  1, iter:   5,600, lr:(1.000e-04,)] [eta: 1 day, 3:48:15, time (data): 1.333 (0.023)] l_g_pix: 4.9406e-02 l_g_percep: 1.1969e+01 l_g_gan: 8.8393e-02 l_d_real: 1.8816e-01 out_d_real: 3.4408e+00 l_d_fake: 7.2141e-01 out_d_fake: -1.6289e-01 
2025-05-13 20:18:47,670 INFO: [train..][epoch:  1, iter:   5,700, lr:(1.000e-04,)] [eta: 1 day, 3:45:43, time (data): 1.331 (0.024)] l_g_pix: 4.3485e-02 l_g_percep: 9.9667e+00 l_g_gan: 1.0852e-01 l_d_real: 5.4381e-01 out_d_real: 1.8518e+00 l_d_fake: 5.0970e-01 out_d_fake: -5.7588e-01 
2025-05-13 20:21:00,992 INFO: [train..][epoch:  1, iter:   5,800, lr:(1.000e-04,)] [eta: 1 day, 3:43:13, time (data): 1.332 (0.024)] l_g_pix: 5.0966e-02 l_g_percep: 1.1745e+01 l_g_gan: 1.3187e-01 l_d_real: 3.8335e-01 out_d_real: 3.0346e+00 l_d_fake: 4.2087e-01 out_d_fake: -8.9740e-01 
2025-05-13 20:23:14,201 INFO: [train..][epoch:  1, iter:   5,900, lr:(1.000e-04,)] [eta: 1 day, 3:40:42, time (data): 1.332 (0.023)] l_g_pix: 5.2233e-02 l_g_percep: 1.1779e+01 l_g_gan: 1.5140e-01 l_d_real: 5.9197e-01 out_d_real: 1.6592e+00 l_d_fake: 3.0963e-01 out_d_fake: -1.2039e+00 
2025-05-13 20:25:27,487 INFO: [train..][epoch:  1, iter:   6,000, lr:(1.000e-04,)] [eta: 1 day, 3:38:13, time (data): 1.332 (0.024)] l_g_pix: 4.8548e-02 l_g_percep: 9.7601e+00 l_g_gan: 1.0887e-01 l_d_real: 3.5120e-01 out_d_real: 3.2427e+00 l_d_fake: 5.6834e-01 out_d_fake: -5.2036e-01 
2025-05-13 20:27:40,642 INFO: [train..][epoch:  1, iter:   6,100, lr:(1.000e-04,)] [eta: 1 day, 3:35:43, time (data): 1.331 (0.025)] l_g_pix: 5.4577e-02 l_g_percep: 1.1377e+01 l_g_gan: 9.4452e-02 l_d_real: 4.1604e-01 out_d_real: 2.2680e+00 l_d_fake: 5.8284e-01 out_d_fake: -3.6159e-01 
2025-05-13 20:29:54,507 INFO: [train..][epoch:  1, iter:   6,200, lr:(1.000e-04,)] [eta: 1 day, 3:33:22, time (data): 1.336 (0.024)] l_g_pix: 4.7625e-02 l_g_percep: 1.0383e+01 l_g_gan: 1.1671e-01 l_d_real: 4.4682e-01 out_d_real: 1.8175e+00 l_d_fake: 4.2701e-01 out_d_fake: -7.4013e-01 
2025-05-13 20:32:08,344 INFO: [train..][epoch:  1, iter:   6,300, lr:(1.000e-04,)] [eta: 1 day, 3:31:00, time (data): 1.337 (0.022)] l_g_pix: 5.4271e-02 l_g_percep: 1.0141e+01 l_g_gan: 1.3264e-01 l_d_real: 5.8365e-01 out_d_real: 1.8105e+00 l_d_fake: 3.4926e-01 out_d_fake: -9.7689e-01 
2025-05-13 20:34:22,016 INFO: [train..][epoch:  1, iter:   6,400, lr:(1.000e-04,)] [eta: 1 day, 3:28:38, time (data): 1.337 (0.022)] l_g_pix: 4.9190e-02 l_g_percep: 1.0558e+01 l_g_gan: 1.1835e-01 l_d_real: 4.6404e-01 out_d_real: 1.8102e+00 l_d_fake: 4.6053e-01 out_d_fake: -7.2288e-01 
2025-05-13 20:36:35,874 INFO: [train..][epoch:  1, iter:   6,500, lr:(1.000e-04,)] [eta: 1 day, 3:26:17, time (data): 1.339 (0.023)] l_g_pix: 5.4799e-02 l_g_percep: 1.1396e+01 l_g_gan: 1.1967e-01 l_d_real: 4.9654e-01 out_d_real: 1.8587e+00 l_d_fake: 4.6565e-01 out_d_fake: -7.3113e-01 
2025-05-13 20:38:49,865 INFO: [train..][epoch:  1, iter:   6,600, lr:(1.000e-04,)] [eta: 1 day, 3:23:58, time (data): 1.340 (0.023)] l_g_pix: 4.4000e-02 l_g_percep: 9.3117e+00 l_g_gan: 1.1754e-01 l_d_real: 6.0949e-01 out_d_real: 1.4820e+00 l_d_fake: 4.3635e-01 out_d_fake: -7.3906e-01 
2025-05-13 20:41:03,461 INFO: [train..][epoch:  1, iter:   6,700, lr:(1.000e-04,)] [eta: 1 day, 3:21:35, time (data): 1.334 (0.024)] l_g_pix: 5.1541e-02 l_g_percep: 1.1762e+01 l_g_gan: 1.2330e-01 l_d_real: 4.5575e-01 out_d_real: 2.6197e+00 l_d_fake: 4.2675e-01 out_d_fake: -8.0612e-01 
2025-05-13 20:43:17,412 INFO: [train..][epoch:  1, iter:   6,800, lr:(1.000e-04,)] [eta: 1 day, 3:19:16, time (data): 1.337 (0.024)] l_g_pix: 3.9359e-02 l_g_percep: 8.7311e+00 l_g_gan: 1.4202e-01 l_d_real: 7.6021e-01 out_d_real: 7.8718e-01 l_d_fake: 3.5315e-01 out_d_fake: -1.0669e+00 
2025-05-13 20:45:30,948 INFO: [train..][epoch:  1, iter:   6,900, lr:(1.000e-04,)] [eta: 1 day, 3:16:53, time (data): 1.334 (0.023)] l_g_pix: 5.7258e-02 l_g_percep: 1.1881e+01 l_g_gan: 1.3299e-01 l_d_real: 4.2493e-01 out_d_real: 2.5784e+00 l_d_fake: 4.1711e-01 out_d_fake: -9.1245e-01 
2025-05-13 20:47:44,256 INFO: [train..][epoch:  1, iter:   7,000, lr:(1.000e-04,)] [eta: 1 day, 3:14:28, time (data): 1.333 (0.024)] l_g_pix: 3.9612e-02 l_g_percep: 8.4619e+00 l_g_gan: 1.4239e-01 l_d_real: 7.4797e-01 out_d_real: 8.9737e-01 l_d_fake: 3.5093e-01 out_d_fake: -1.0728e+00 
2025-05-13 20:49:57,910 INFO: [train..][epoch:  1, iter:   7,100, lr:(1.000e-04,)] [eta: 1 day, 3:12:06, time (data): 1.338 (0.025)] l_g_pix: 5.0746e-02 l_g_percep: 1.1361e+01 l_g_gan: 9.3531e-02 l_d_real: 2.0248e-01 out_d_real: 3.8867e+00 l_d_fake: 7.0086e-01 out_d_fake: -2.3429e-01 
2025-05-13 20:52:11,713 INFO: [train..][epoch:  1, iter:   7,200, lr:(1.000e-04,)] [eta: 1 day, 3:09:47, time (data): 1.338 (0.023)] l_g_pix: 4.8151e-02 l_g_percep: 1.0039e+01 l_g_gan: 1.0316e-01 l_d_real: 4.7208e-01 out_d_real: 2.0828e+00 l_d_fake: 5.5057e-01 out_d_fake: -4.8105e-01 
2025-05-13 20:54:25,567 INFO: [train..][epoch:  1, iter:   7,300, lr:(1.000e-04,)] [eta: 1 day, 3:07:28, time (data): 1.339 (0.021)] l_g_pix: 4.9230e-02 l_g_percep: 1.0500e+01 l_g_gan: 1.1417e-01 l_d_real: 3.6212e-01 out_d_real: 3.6701e+00 l_d_fake: 4.4455e-01 out_d_fake: -6.9717e-01 
2025-05-13 20:56:39,360 INFO: [train..][epoch:  1, iter:   7,400, lr:(1.000e-04,)] [eta: 1 day, 3:05:08, time (data): 1.338 (0.022)] l_g_pix: 5.3449e-02 l_g_percep: 1.1192e+01 l_g_gan: 1.1623e-01 l_d_real: 4.8523e-01 out_d_real: 2.3136e+00 l_d_fake: 4.9162e-01 out_d_fake: -6.7067e-01 
2025-05-13 20:58:53,113 INFO: [train..][epoch:  1, iter:   7,500, lr:(1.000e-04,)] [eta: 1 day, 3:02:48, time (data): 1.339 (0.022)] l_g_pix: 4.9973e-02 l_g_percep: 1.0755e+01 l_g_gan: 1.2228e-01 l_d_real: 5.2141e-01 out_d_real: 2.2031e+00 l_d_fake: 4.3324e-01 out_d_fake: -7.8932e-01 
2025-05-13 21:01:06,916 INFO: [train..][epoch:  1, iter:   7,600, lr:(1.000e-04,)] [eta: 1 day, 3:00:29, time (data): 1.338 (0.022)] l_g_pix: 4.1389e-02 l_g_percep: 1.0678e+01 l_g_gan: 1.2067e-01 l_d_real: 4.4005e-01 out_d_real: 2.7385e+00 l_d_fake: 4.4266e-01 out_d_fake: -7.6407e-01 
2025-05-13 21:03:20,817 INFO: [train..][epoch:  1, iter:   7,700, lr:(1.000e-04,)] [eta: 1 day, 2:58:11, time (data): 1.343 (0.020)] l_g_pix: 5.2166e-02 l_g_percep: 1.1199e+01 l_g_gan: 1.1124e-01 l_d_real: 4.8925e-01 out_d_real: 1.6724e+00 l_d_fake: 5.1354e-01 out_d_fake: -5.9883e-01 
2025-05-13 21:05:34,291 INFO: [train..][epoch:  1, iter:   7,800, lr:(1.000e-04,)] [eta: 1 day, 2:55:49, time (data): 1.338 (0.022)] l_g_pix: 4.1929e-02 l_g_percep: 9.6708e+00 l_g_gan: 1.2763e-01 l_d_real: 5.3462e-01 out_d_real: 1.4841e+00 l_d_fake: 4.5209e-01 out_d_fake: -8.2399e-01 
2025-05-13 21:07:47,439 INFO: [train..][epoch:  1, iter:   7,900, lr:(1.000e-04,)] [eta: 1 day, 2:53:25, time (data): 1.330 (0.024)] l_g_pix: 6.1584e-02 l_g_percep: 1.2443e+01 l_g_gan: 1.5581e-01 l_d_real: 4.6374e-01 out_d_real: 2.0116e+00 l_d_fake: 3.2025e-01 out_d_fake: -1.2375e+00 
2025-05-13 21:10:01,145 INFO: [train..][epoch:  1, iter:   8,000, lr:(1.000e-04,)] [eta: 1 day, 2:51:05, time (data): 1.334 (0.021)] l_g_pix: 5.5114e-02 l_g_percep: 1.1988e+01 l_g_gan: 1.7464e-01 l_d_real: 5.7655e-01 out_d_real: 2.6029e+00 l_d_fake: 2.5703e-01 out_d_fake: -1.4890e+00 
2025-05-13 21:12:14,930 INFO: [train..][epoch:  1, iter:   8,100, lr:(1.000e-04,)] [eta: 1 day, 2:48:47, time (data): 1.340 (0.020)] l_g_pix: 4.9931e-02 l_g_percep: 1.0649e+01 l_g_gan: 1.4273e-01 l_d_real: 4.3137e-01 out_d_real: 2.7724e+00 l_d_fake: 3.5693e-01 out_d_fake: -1.0702e+00 
2025-05-13 21:14:28,297 INFO: [train..][epoch:  1, iter:   8,200, lr:(1.000e-04,)] [eta: 1 day, 2:46:25, time (data): 1.336 (0.021)] l_g_pix: 4.0739e-02 l_g_percep: 9.3148e+00 l_g_gan: 1.2423e-01 l_d_real: 4.6196e-01 out_d_real: 2.2230e+00 l_d_fake: 4.3840e-01 out_d_fake: -8.0351e-01 
2025-05-13 21:16:42,230 INFO: [train..][epoch:  1, iter:   8,300, lr:(1.000e-04,)] [eta: 1 day, 2:44:08, time (data): 1.341 (0.019)] l_g_pix: 4.7840e-02 l_g_percep: 9.8434e+00 l_g_gan: 1.8153e-01 l_d_real: 9.8262e-01 out_d_real: 8.1390e-01 l_d_fake: 2.6255e-01 out_d_fake: -1.5522e+00 
2025-05-13 21:18:55,684 INFO: [train..][epoch:  1, iter:   8,400, lr:(1.000e-04,)] [eta: 1 day, 2:41:47, time (data): 1.337 (0.019)] l_g_pix: 4.6131e-02 l_g_percep: 9.6176e+00 l_g_gan: 1.2848e-01 l_d_real: 5.1250e-01 out_d_real: 1.6154e+00 l_d_fake: 4.1236e-01 out_d_fake: -8.7238e-01 
2025-05-13 21:21:09,474 INFO: [train..][epoch:  1, iter:   8,500, lr:(1.000e-04,)] [eta: 1 day, 2:39:29, time (data): 1.339 (0.020)] l_g_pix: 5.5852e-02 l_g_percep: 1.2339e+01 l_g_gan: 1.2027e-01 l_d_real: 4.3757e-01 out_d_real: 3.5049e+00 l_d_fake: 4.7491e-01 out_d_fake: -7.2759e-01 
2025-05-13 21:23:22,890 INFO: [train..][epoch:  1, iter:   8,600, lr:(1.000e-04,)] [eta: 1 day, 2:37:08, time (data): 1.336 (0.021)] l_g_pix: 5.6078e-02 l_g_percep: 1.1719e+01 l_g_gan: 9.7320e-02 l_d_real: 2.8654e-01 out_d_real: 4.2939e+00 l_d_fake: 6.0823e-01 out_d_fake: -3.6496e-01 
2025-05-13 21:25:36,122 INFO: [train..][epoch:  1, iter:   8,700, lr:(1.000e-04,)] [eta: 1 day, 2:34:46, time (data): 1.331 (0.024)] l_g_pix: 5.2523e-02 l_g_percep: 1.1910e+01 l_g_gan: 1.1635e-01 l_d_real: 3.1076e-01 out_d_real: 3.8789e+00 l_d_fake: 4.6420e-01 out_d_fake: -6.9923e-01 
2025-05-13 21:27:50,100 INFO: [train..][epoch:  1, iter:   8,800, lr:(1.000e-04,)] [eta: 1 day, 2:32:30, time (data): 1.337 (0.022)] l_g_pix: 5.4597e-02 l_g_percep: 1.0462e+01 l_g_gan: 1.5968e-01 l_d_real: 6.9149e-01 out_d_real: 1.9808e+00 l_d_fake: 2.8905e-01 out_d_fake: -1.3072e+00 
2025-05-13 21:30:04,053 INFO: [train..][epoch:  1, iter:   8,900, lr:(1.000e-04,)] [eta: 1 day, 2:30:14, time (data): 1.338 (0.022)] l_g_pix: 5.2463e-02 l_g_percep: 1.0383e+01 l_g_gan: 1.2327e-01 l_d_real: 5.6348e-01 out_d_real: 2.2260e+00 l_d_fake: 4.4462e-01 out_d_fake: -7.8802e-01 
2025-05-13 21:32:18,079 INFO: [train..][epoch:  1, iter:   9,000, lr:(1.000e-04,)] [eta: 1 day, 2:27:58, time (data): 1.340 (0.022)] l_g_pix: 5.0335e-02 l_g_percep: 1.0171e+01 l_g_gan: 1.3762e-01 l_d_real: 2.4419e-01 out_d_real: 4.2316e+00 l_d_fake: 3.6767e-01 out_d_fake: -1.0083e+00 
2025-05-13 21:34:31,851 INFO: [train..][epoch:  1, iter:   9,100, lr:(1.000e-04,)] [eta: 1 day, 2:25:41, time (data): 1.337 (0.023)] l_g_pix: 4.6511e-02 l_g_percep: 9.5254e+00 l_g_gan: 1.2448e-01 l_d_real: 5.3485e-01 out_d_real: 2.2223e+00 l_d_fake: 4.0374e-01 out_d_fake: -8.4101e-01 
2025-05-13 21:36:45,757 INFO: [train..][epoch:  1, iter:   9,200, lr:(1.000e-04,)] [eta: 1 day, 2:23:24, time (data): 1.338 (0.021)] l_g_pix: 4.6934e-02 l_g_percep: 9.9147e+00 l_g_gan: 1.3852e-01 l_d_real: 4.5338e-01 out_d_real: 3.2255e+00 l_d_fake: 3.6701e-01 out_d_fake: -1.0177e+00 
2025-05-13 21:38:59,765 INFO: [train..][epoch:  1, iter:   9,300, lr:(1.000e-04,)] [eta: 1 day, 2:21:08, time (data): 1.340 (0.023)] l_g_pix: 5.3768e-02 l_g_percep: 1.0390e+01 l_g_gan: 1.2677e-01 l_d_real: 2.8842e-01 out_d_real: 3.5822e+00 l_d_fake: 4.2770e-01 out_d_fake: -8.3989e-01 
2025-05-13 21:41:13,691 INFO: [train..][epoch:  1, iter:   9,400, lr:(1.000e-04,)] [eta: 1 day, 2:18:52, time (data): 1.339 (0.022)] l_g_pix: 5.3830e-02 l_g_percep: 1.1850e+01 l_g_gan: 1.6354e-01 l_d_real: 6.8364e-01 out_d_real: 1.1822e+00 l_d_fake: 2.9068e-01 out_d_fake: -1.3440e+00 
2025-05-13 21:43:27,861 INFO: [train..][epoch:  1, iter:   9,500, lr:(1.000e-04,)] [eta: 1 day, 2:16:38, time (data): 1.336 (0.020)] l_g_pix: 3.9441e-02 l_g_percep: 9.0020e+00 l_g_gan: 1.4865e-01 l_d_real: 6.8856e-01 out_d_real: 1.3014e+00 l_d_fake: 3.5574e-01 out_d_fake: -1.1305e+00 
2025-05-13 21:45:41,749 INFO: [train..][epoch:  1, iter:   9,600, lr:(1.000e-04,)] [eta: 1 day, 2:14:22, time (data): 1.338 (0.022)] l_g_pix: 5.7123e-02 l_g_percep: 1.1640e+01 l_g_gan: 1.5196e-01 l_d_real: 4.4873e-01 out_d_real: 2.6110e+00 l_d_fake: 3.6792e-01 out_d_fake: -1.1514e+00 
2025-05-13 21:47:55,420 INFO: [train..][epoch:  1, iter:   9,700, lr:(1.000e-04,)] [eta: 1 day, 2:12:04, time (data): 1.336 (0.024)] l_g_pix: 5.7093e-02 l_g_percep: 1.1187e+01 l_g_gan: 1.4780e-01 l_d_real: 3.8456e-01 out_d_real: 5.2152e+00 l_d_fake: 3.2816e-01 out_d_fake: -1.1495e+00 
2025-05-13 21:50:09,333 INFO: [train..][epoch:  1, iter:   9,800, lr:(1.000e-04,)] [eta: 1 day, 2:09:48, time (data): 1.338 (0.022)] l_g_pix: 5.0999e-02 l_g_percep: 1.0238e+01 l_g_gan: 1.2220e-01 l_d_real: 4.9855e-01 out_d_real: 2.7005e+00 l_d_fake: 4.9314e-01 out_d_fake: -7.2882e-01 
2025-05-13 21:52:23,186 INFO: [train..][epoch:  1, iter:   9,900, lr:(1.000e-04,)] [eta: 1 day, 2:07:31, time (data): 1.340 (0.024)] l_g_pix: 7.5128e-02 l_g_percep: 1.4794e+01 l_g_gan: 1.9934e-01 l_d_real: 7.6125e-01 out_d_real: 2.1331e+00 l_d_fake: 2.5258e-01 out_d_fake: -1.7389e+00 
2025-05-13 21:54:36,974 INFO: [train..][epoch:  1, iter:  10,000, lr:(1.000e-04,)] [eta: 1 day, 2:05:15, time (data): 1.339 (0.022)] l_g_pix: 4.8856e-02 l_g_percep: 9.9509e+00 l_g_gan: 1.4524e-01 l_d_real: 6.8510e-01 out_d_real: 1.1550e+00 l_d_fake: 3.4622e-01 out_d_fake: -1.1061e+00 
2025-05-13 21:54:36,974 INFO: Saving models and training states.
2025-05-13 21:56:51,928 INFO: [train..][epoch:  1, iter:  10,100, lr:(1.000e-04,)] [eta: 1 day, 2:03:06, time (data): 1.339 (0.023)] l_g_pix: 4.7561e-02 l_g_percep: 1.1194e+01 l_g_gan: 1.7155e-01 l_d_real: 4.9823e-01 out_d_real: 2.6699e+00 l_d_fake: 2.6953e-01 out_d_fake: -1.4452e+00 
2025-05-13 21:59:05,275 INFO: [train..][epoch:  1, iter:  10,200, lr:(1.000e-04,)] [eta: 1 day, 2:00:46, time (data): 1.335 (0.024)] l_g_pix: 5.3508e-02 l_g_percep: 1.2094e+01 l_g_gan: 1.3261e-01 l_d_real: 3.6297e-01 out_d_real: 3.8885e+00 l_d_fake: 4.3619e-01 out_d_fake: -8.8971e-01 
2025-05-13 22:01:18,630 INFO: [train..][epoch:  1, iter:  10,300, lr:(1.000e-04,)] [eta: 1 day, 1:58:26, time (data): 1.333 (0.023)] l_g_pix: 6.0751e-02 l_g_percep: 1.1933e+01 l_g_gan: 1.0870e-01 l_d_real: 2.8375e-01 out_d_real: 2.8800e+00 l_d_fake: 5.4645e-01 out_d_fake: -5.4064e-01 
2025-05-13 22:03:31,835 INFO: [train..][epoch:  1, iter:  10,400, lr:(1.000e-04,)] [eta: 1 day, 1:56:06, time (data): 1.333 (0.024)] l_g_pix: 4.6091e-02 l_g_percep: 1.0478e+01 l_g_gan: 1.0901e-01 l_d_real: 3.2987e-01 out_d_real: 4.4074e+00 l_d_fake: 5.4058e-01 out_d_fake: -5.4930e-01 
2025-05-13 22:06:29,016 INFO: [train..][epoch:  2, iter:  10,500, lr:(1.000e-04,)] [eta: 1 day, 1:58:37, time (data): 2.245 (0.935)] l_g_pix: 6.8361e-02 l_g_percep: 1.0771e+01 l_g_gan: 1.5003e-01 l_d_real: 6.0161e-01 out_d_real: 2.3496e+00 l_d_fake: 3.6911e-01 out_d_fake: -1.1310e+00 
2025-05-13 22:08:42,255 INFO: [train..][epoch:  2, iter:  10,600, lr:(1.000e-04,)] [eta: 1 day, 1:56:13, time (data): 1.628 (0.320)] l_g_pix: 4.1571e-02 l_g_percep: 7.9239e+00 l_g_gan: 1.2675e-01 l_d_real: 5.6419e-01 out_d_real: 2.2801e+00 l_d_fake: 4.1680e-01 out_d_fake: -8.5061e-01 
2025-05-13 22:10:55,737 INFO: [train..][epoch:  2, iter:  10,700, lr:(1.000e-04,)] [eta: 1 day, 1:53:52, time (data): 1.337 (0.024)] l_g_pix: 4.6886e-02 l_g_percep: 1.1391e+01 l_g_gan: 1.4212e-01 l_d_real: 4.8083e-01 out_d_real: 1.9377e+00 l_d_fake: 3.7430e-01 out_d_fake: -1.0468e+00 
2025-05-13 22:13:09,641 INFO: [train..][epoch:  2, iter:  10,800, lr:(1.000e-04,)] [eta: 1 day, 1:51:33, time (data): 1.339 (0.024)] l_g_pix: 4.2038e-02 l_g_percep: 8.8640e+00 l_g_gan: 1.4444e-01 l_d_real: 6.4829e-01 out_d_real: 1.5075e+00 l_d_fake: 3.5853e-01 out_d_fake: -1.0858e+00 
2025-05-13 22:15:23,286 INFO: [train..][epoch:  2, iter:  10,900, lr:(1.000e-04,)] [eta: 1 day, 1:49:13, time (data): 1.336 (0.024)] l_g_pix: 4.9603e-02 l_g_percep: 1.1882e+01 l_g_gan: 1.2909e-01 l_d_real: 4.6130e-01 out_d_real: 3.9344e+00 l_d_fake: 4.2115e-01 out_d_fake: -8.6939e-01 
2025-05-13 22:17:36,973 INFO: [train..][epoch:  2, iter:  11,000, lr:(1.000e-04,)] [eta: 1 day, 1:46:53, time (data): 1.336 (0.024)] l_g_pix: 5.2653e-02 l_g_percep: 1.0763e+01 l_g_gan: 1.5493e-01 l_d_real: 6.1320e-01 out_d_real: 1.8906e+00 l_d_fake: 3.1741e-01 out_d_fake: -1.2318e+00 
2025-05-13 22:19:50,751 INFO: [train..][epoch:  2, iter:  11,100, lr:(1.000e-04,)] [eta: 1 day, 1:44:34, time (data): 1.338 (0.024)] l_g_pix: 4.7366e-02 l_g_percep: 9.0972e+00 l_g_gan: 1.1879e-01 l_d_real: 5.7844e-01 out_d_real: 1.8974e+00 l_d_fake: 4.6755e-01 out_d_fake: -7.2038e-01 
2025-05-13 22:22:04,711 INFO: [train..][epoch:  2, iter:  11,200, lr:(1.000e-04,)] [eta: 1 day, 1:42:16, time (data): 1.339 (0.024)] l_g_pix: 3.8967e-02 l_g_percep: 9.1053e+00 l_g_gan: 1.2917e-01 l_d_real: 4.0888e-01 out_d_real: 3.2990e+00 l_d_fake: 4.3342e-01 out_d_fake: -8.5809e-01 
2025-05-13 22:24:18,353 INFO: [train..][epoch:  2, iter:  11,300, lr:(1.000e-04,)] [eta: 1 day, 1:39:57, time (data): 1.338 (0.024)] l_g_pix: 3.7222e-02 l_g_percep: 9.0211e+00 l_g_gan: 1.2614e-01 l_d_real: 5.2784e-01 out_d_real: 2.6446e+00 l_d_fake: 4.3826e-01 out_d_fake: -8.2312e-01 
2025-05-13 22:26:33,007 INFO: [train..][epoch:  2, iter:  11,400, lr:(1.000e-04,)] [eta: 1 day, 1:37:43, time (data): 1.344 (0.023)] l_g_pix: 4.6080e-02 l_g_percep: 9.7990e+00 l_g_gan: 1.0311e-01 l_d_real: 3.5733e-01 out_d_real: 2.1071e+00 l_d_fake: 5.9969e-01 out_d_fake: -4.3134e-01 
2025-05-13 22:28:47,355 INFO: [train..][epoch:  2, iter:  11,500, lr:(1.000e-04,)] [eta: 1 day, 1:35:28, time (data): 1.342 (0.022)] l_g_pix: 5.1515e-02 l_g_percep: 1.2284e+01 l_g_gan: 1.7427e-01 l_d_real: 5.1434e-01 out_d_real: 3.8483e+00 l_d_fake: 2.7040e-01 out_d_fake: -1.4719e+00 
2025-05-13 22:31:01,723 INFO: [train..][epoch:  2, iter:  11,600, lr:(1.000e-04,)] [eta: 1 day, 1:33:12, time (data): 1.343 (0.021)] l_g_pix: 4.1440e-02 l_g_percep: 9.6077e+00 l_g_gan: 1.0574e-01 l_d_real: 4.0065e-01 out_d_real: 3.0055e+00 l_d_fake: 6.1698e-01 out_d_fake: -4.4043e-01 
2025-05-13 22:33:16,268 INFO: [train..][epoch:  2, iter:  11,700, lr:(1.000e-04,)] [eta: 1 day, 1:30:58, time (data): 1.347 (0.025)] l_g_pix: 5.6659e-02 l_g_percep: 1.2091e+01 l_g_gan: 1.3734e-01 l_d_real: 4.0383e-01 out_d_real: 3.2494e+00 l_d_fake: 3.7908e-01 out_d_fake: -9.9403e-01 
2025-05-13 22:35:30,691 INFO: [train..][epoch:  2, iter:  11,800, lr:(1.000e-04,)] [eta: 1 day, 1:28:43, time (data): 1.345 (0.023)] l_g_pix: 5.4821e-02 l_g_percep: 1.1891e+01 l_g_gan: 1.0056e-01 l_d_real: 3.2279e-01 out_d_real: 3.2723e+00 l_d_fake: 5.9538e-01 out_d_fake: -4.1039e-01 
2025-05-13 22:37:45,096 INFO: [train..][epoch:  2, iter:  11,900, lr:(1.000e-04,)] [eta: 1 day, 1:26:28, time (data): 1.345 (0.022)] l_g_pix: 4.6221e-02 l_g_percep: 1.0649e+01 l_g_gan: 8.5061e-02 l_d_real: 2.0643e-01 out_d_real: 4.7664e+00 l_d_fake: 7.9850e-01 out_d_fake: -5.2382e-02 
2025-05-13 22:39:59,350 INFO: [train..][epoch:  2, iter:  12,000, lr:(1.000e-04,)] [eta: 1 day, 1:24:13, time (data): 1.343 (0.022)] l_g_pix: 4.8002e-02 l_g_percep: 1.0242e+01 l_g_gan: 1.3217e-01 l_d_real: 5.7767e-01 out_d_real: 2.2788e+00 l_d_fake: 4.2979e-01 out_d_fake: -8.9177e-01 
2025-05-13 22:42:13,901 INFO: [train..][epoch:  2, iter:  12,100, lr:(1.000e-04,)] [eta: 1 day, 1:21:58, time (data): 1.345 (0.024)] l_g_pix: 6.6103e-02 l_g_percep: 1.2549e+01 l_g_gan: 1.2598e-01 l_d_real: 4.5113e-01 out_d_real: 2.2532e+00 l_d_fake: 4.4444e-01 out_d_fake: -8.1533e-01 
2025-05-13 22:44:28,306 INFO: [train..][epoch:  2, iter:  12,200, lr:(1.000e-04,)] [eta: 1 day, 1:19:43, time (data): 1.344 (0.023)] l_g_pix: 3.9687e-02 l_g_percep: 8.8394e+00 l_g_gan: 1.1710e-01 l_d_real: 5.0907e-01 out_d_real: 2.1007e+00 l_d_fake: 4.5845e-01 out_d_fake: -7.1255e-01 
2025-05-13 22:46:42,673 INFO: [train..][epoch:  2, iter:  12,300, lr:(1.000e-04,)] [eta: 1 day, 1:17:28, time (data): 1.342 (0.022)] l_g_pix: 5.6776e-02 l_g_percep: 1.2011e+01 l_g_gan: 1.5783e-01 l_d_real: 4.5030e-01 out_d_real: 3.3533e+00 l_d_fake: 3.1008e-01 out_d_fake: -1.2680e+00 
2025-05-13 22:48:57,076 INFO: [train..][epoch:  2, iter:  12,400, lr:(1.000e-04,)] [eta: 1 day, 1:15:13, time (data): 1.344 (0.023)] l_g_pix: 5.0038e-02 l_g_percep: 1.0692e+01 l_g_gan: 1.1639e-01 l_d_real: 3.9102e-01 out_d_real: 3.5994e+00 l_d_fake: 5.2242e-01 out_d_fake: -6.4158e-01 
2025-05-13 22:51:11,380 INFO: [train..][epoch:  2, iter:  12,500, lr:(1.000e-04,)] [eta: 1 day, 1:12:58, time (data): 1.344 (0.024)] l_g_pix: 5.8867e-02 l_g_percep: 1.2060e+01 l_g_gan: 1.2675e-01 l_d_real: 4.3334e-01 out_d_real: 1.8562e+00 l_d_fake: 4.6322e-01 out_d_fake: -8.0423e-01 
2025-05-13 22:53:25,706 INFO: [train..][epoch:  2, iter:  12,600, lr:(1.000e-04,)] [eta: 1 day, 1:10:42, time (data): 1.343 (0.024)] l_g_pix: 5.2387e-02 l_g_percep: 1.2252e+01 l_g_gan: 1.7249e-01 l_d_real: 5.5822e-01 out_d_real: 2.1547e+00 l_d_fake: 2.9176e-01 out_d_fake: -1.4324e+00 
2025-05-13 22:55:39,632 INFO: [train..][epoch:  2, iter:  12,700, lr:(1.000e-04,)] [eta: 1 day, 1:08:25, time (data): 1.339 (0.024)] l_g_pix: 5.1160e-02 l_g_percep: 1.0659e+01 l_g_gan: 1.4705e-01 l_d_real: 5.4456e-01 out_d_real: 2.8938e+00 l_d_fake: 3.8079e-01 out_d_fake: -1.0892e+00 
2025-05-13 22:57:53,439 INFO: [train..][epoch:  2, iter:  12,800, lr:(1.000e-04,)] [eta: 1 day, 1:06:07, time (data): 1.338 (0.023)] l_g_pix: 5.1984e-02 l_g_percep: 1.1116e+01 l_g_gan: 1.3561e-01 l_d_real: 4.4546e-01 out_d_real: 3.9770e+00 l_d_fake: 4.4293e-01 out_d_fake: -9.1249e-01 
2025-05-13 23:00:07,402 INFO: [train..][epoch:  2, iter:  12,900, lr:(1.000e-04,)] [eta: 1 day, 1:03:50, time (data): 1.341 (0.026)] l_g_pix: 5.3645e-02 l_g_percep: 1.2081e+01 l_g_gan: 1.8388e-01 l_d_real: 6.6544e-01 out_d_real: 1.3988e+00 l_d_fake: 2.2874e-01 out_d_fake: -1.6098e+00 
2025-05-13 23:02:21,148 INFO: [train..][epoch:  2, iter:  13,000, lr:(1.000e-04,)] [eta: 1 day, 1:01:32, time (data): 1.338 (0.025)] l_g_pix: 3.6910e-02 l_g_percep: 8.5068e+00 l_g_gan: 1.4702e-01 l_d_real: 7.0548e-01 out_d_real: 2.3110e+00 l_d_fake: 3.6034e-01 out_d_fake: -1.1093e+00 
2025-05-13 23:04:35,154 INFO: [train..][epoch:  2, iter:  13,100, lr:(1.000e-04,)] [eta: 1 day, 0:59:15, time (data): 1.340 (0.026)] l_g_pix: 4.6856e-02 l_g_percep: 9.8986e+00 l_g_gan: 1.7748e-01 l_d_real: 8.4932e-01 out_d_real: 1.2906e+00 l_d_fake: 2.2297e-01 out_d_fake: -1.5502e+00 
2025-05-13 23:06:48,872 INFO: [train..][epoch:  2, iter:  13,200, lr:(1.000e-04,)] [eta: 1 day, 0:56:57, time (data): 1.338 (0.025)] l_g_pix: 4.4005e-02 l_g_percep: 9.1193e+00 l_g_gan: 1.3852e-01 l_d_real: 6.5356e-01 out_d_real: 1.3717e+00 l_d_fake: 3.8753e-01 out_d_fake: -9.9750e-01 
2025-05-13 23:09:02,645 INFO: [train..][epoch:  2, iter:  13,300, lr:(1.000e-04,)] [eta: 1 day, 0:54:39, time (data): 1.339 (0.024)] l_g_pix: 3.6742e-02 l_g_percep: 9.1669e+00 l_g_gan: 1.1436e-01 l_d_real: 3.7283e-01 out_d_real: 2.6141e+00 l_d_fake: 4.9253e-01 out_d_fake: -6.5137e-01 
2025-05-13 23:11:16,654 INFO: [train..][epoch:  2, iter:  13,400, lr:(1.000e-04,)] [eta: 1 day, 0:52:22, time (data): 1.340 (0.024)] l_g_pix: 5.2924e-02 l_g_percep: 1.0565e+01 l_g_gan: 1.5788e-01 l_d_real: 5.7000e-01 out_d_real: 2.5741e+00 l_d_fake: 3.2318e-01 out_d_fake: -1.2548e+00 
2025-05-13 23:13:30,462 INFO: [train..][epoch:  2, iter:  13,500, lr:(1.000e-04,)] [eta: 1 day, 0:50:04, time (data): 1.335 (0.025)] l_g_pix: 3.9302e-02 l_g_percep: 8.5643e+00 l_g_gan: 1.7154e-01 l_d_real: 6.4817e-01 out_d_real: 3.2072e+00 l_d_fake: 3.0807e-01 out_d_fake: -1.4065e+00 
